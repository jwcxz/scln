
AVRCrypto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000316  00800200  00005926  0000599a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005926  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000994  00800516  00005c3c  00005cb0  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007c5  00000000  00000000  00005e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016c8  00000000  00000000  00006655  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000954  00000000  00000000  00007d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001636  00000000  00000000  00008671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00009ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072c  00000000  00000000  00009f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c2f  00000000  00000000  0000a674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000b2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__ctors_end>
       4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
       8:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
       c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      10:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      14:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      18:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      1c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      20:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      24:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      28:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      2c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      30:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      34:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      38:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      3c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      40:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      44:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      48:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      4c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      50:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      54:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      58:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      5c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      60:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      64:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      68:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      6c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      70:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      74:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      78:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      7c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      80:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      84:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      88:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      8c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      90:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      94:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      98:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      9c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      a0:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      a4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      a8:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      ac:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      b0:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      b4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      b8:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      bc:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      c0:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      c4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      c8:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      cc:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      d0:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      d4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      d8:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      dc:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>
      e0:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__bad_interrupt>

000000e4 <DesCryptographicKey>:
      e4:	12 34 56 67 89 ab cd ef                             .4Vg....

000000ec <DesPLAINTEXT>:
      ec:	01 02 03 04 05 06 07 08                             ........

000000f4 <DesCIPHERTEXT>:
      f4:	f2 ac 1b c6 bf 00 61 d3                             ......a.

000000fc <Triple_DesCryptographicKey>:
      fc:	12 34 56 67 89 ab cd ef 22 44 66 88 aa bb cc dd     .4Vg...."Df.....

0000010c <Triple_DesPLAINTEXT>:
     10c:	01 02 03 04 05 06 07 08                             ........

00000114 <Triple_DesCIPHERTEXT>:
     114:	1a 54 e3 87 44 34 86 bc                             .T..D4..

0000011c <private64e3>:
     11c:	8b 35 eb 99 91 07 b6 0b                             .5......

00000124 <public64e3>:
     124:	d0 d0 e1 68 28 c7 35 59                             ...h(.5Y

0000012c <crypt64e3>:
     12c:	5f a5 71 5b fb d7 46 39                             _.q[..F9

00000134 <private128e3>:
     134:	6c 42 0e c7 92 8d 62 c2 10 f1 06 47 b9 14 83 2b     lB....b....G...+

00000144 <public128e3>:
     144:	a2 63 16 2b 5b d4 14 24 b1 cd d7 50 f8 2b 3f bb     .c.+[..$...P.+?.

00000154 <private256e3>:
     154:	9d d1 16 37 4c 0d 1e 3a 9d d9 2b 6c d9 be 9c eb     ...7L..:..+l....
     164:	ed 44 bd ec 9c 79 74 bb 82 d3 f4 1c fb 39 cc fb     .D...yt......9..

00000174 <public256e3>:
     174:	ec b9 a1 52 f2 13 ad 57 ec c5 c1 23 46 9d eb 63     ...R...W...#F..c
     184:	d0 98 e7 50 99 cb 49 32 2c 60 31 bd 3b 74 22 27     ...P..I2,`1.;t"'

00000194 <private512e3>:
     194:	86 77 6c 8a 02 62 d1 e3 f4 c6 47 a8 49 5c c0 2a     .wl..b....G.I\.*
     1a4:	6d 8d 19 04 c0 84 72 17 09 b0 93 da 4a 25 a9 f0     m.....r.....J%..
     1b4:	ca 61 a8 a1 2e 59 67 c3 01 0d 22 14 9a f7 a9 4d     .a...Yg..."....M
     1c4:	4b 0b f9 25 67 12 32 1e 81 31 fd 27 fb 64 db eb     K..%g.2..1.'.d..

000001d4 <public512e3>:
     1d4:	c9 b3 22 cf 03 94 3a d5 ef 29 6b 7c 6e 0b 20 3f     .."...:..)k|n. ?
     1e4:	a4 53 a5 87 20 c6 ab 22 8e 88 dd c7 6f 38 7e ea     .S.. .."....o8~.
     1f4:	f6 1a 01 ed 63 fe a2 e3 94 4e 45 85 16 ae 63 e1     ....c....NE...c.
     204:	04 97 4f ea 91 fb 80 d7 98 69 76 8c c3 d4 3d d3     ..O......iv...=.

00000214 <private1024e3>:
     214:	76 61 ba 8b db 5f 87 46 52 bd 96 91 dc 57 14 25     va..._.FR....W.%
     224:	32 58 cf 32 76 7b f5 09 49 93 82 0b 63 0e 4c fc     2X.2v{..I...c.L.
     234:	8b 8e 41 61 cc 0d a8 32 c0 b1 c0 13 6c c7 a6 95     ..Aa...2....l...
     244:	09 6b e4 54 a2 29 37 9c 2c e2 53 03 3b 9e eb 49     .k.T.)7.,.S.;..I
     254:	3c 49 19 31 77 c4 c0 82 46 26 2a 17 34 73 3d a8     <I.1w...F&*.4s=.
     264:	c7 46 64 df 9c 4b 1b c2 ca 74 01 94 26 53 3f 1b     .Fd..K...t..&S?.
     274:	02 e3 85 c3 5d ce 0b e0 57 be b9 cd 18 b7 74 0d     ....]...W.....t.
     284:	30 7c 85 6a 89 ff cb 61 4e ba fd 7a 7f 41 55 0b     0|.j...aN..z.AU.

00000294 <public1024e3>:
     294:	b1 92 97 d1 c9 0f 4a e9 7c 1c 61 da ca 82 9e 37     ......J.|.a....7
     2a4:	cb 85 36 cb b1 b9 ef 8d ee 5d 43 11 14 95 73 7a     ..6......]C...sz
     2b4:	d1 55 62 12 b2 14 7c 4c 21 0a a0 1d 23 2b 79 df     .Ub...|L!...#+y.
     2c4:	8e 21 d6 7e f3 3d d3 6a 43 53 7c 84 d9 6e 60 ef     .!.~.=.jCS|..n`.
     2d4:	85 35 f8 bd 02 2b eb b3 68 2f 84 f9 a3 58 13 1c     .5...+..h/...X..
     2e4:	8d e4 d6 ae 56 17 ed 28 65 2a 15 05 54 83 f9 7f     ....V..(e*..T...
     2f4:	18 77 00 9a 2d 05 99 20 55 bd 59 54 5a bf 9e 05     .w..-.. U.YTZ...
     304:	10 72 47 f8 6e 03 db e2 3a 55 41 6b 4b f0 ee 67     .rG.n...:UAkK..g

00000314 <crypt1024e3>:
     314:	1a ab 85 7d 1f 1b ff 68 44 10 6a dd 1e 43 9e 6b     ...}...hD.j..C.k
     324:	c6 e9 ae 42 c9 e2 c3 bd 6b be 2e cc fd 54 93 64     ...B....k....T.d
     334:	01 a3 95 38 b5 78 36 4a 4f d7 b0 45 44 10 d8 af     ...8.x6JO..ED...
     344:	5f bd b8 9e f3 21 83 e5 4d 20 e0 4e 98 af 16 1b     _....!..M .N....
     354:	4a eb bb 13 c9 6a 24 13 d0 6d 8a 93 27 ed 1a 46     J....j$..m..'..F
     364:	e6 ef 80 84 9f b7 cc 50 78 84 f2 a6 28 e6 aa fb     .......Px...(...
     374:	1a 92 a8 bd 70 e9 45 8d fa f6 ca 5e 1b cf cd e9     ....p.E....^....
     384:	d5 70 59 f4 7d da c7 59 ce 4c cd 29 d6 14 12 32     .pY.}..Y.L.)...2

00000394 <public2048e3>:
     394:	90 54 ce 2d 44 19 a2 e8 d7 95 94 82 f8 e0 cc 39     .T.-D..........9
     3a4:	2d b0 13 32 20 57 ad 1d 85 a0 4f 15 f0 b5 91 cc     -..2 W....O.....
     3b4:	00 9f 3f 9d d7 fe c9 6e 9a 1d 09 58 f0 06 d1 fd     ..?....n...X....
     3c4:	71 b9 1a 40 b9 03 b3 c3 2f a5 55 01 54 ef 33 8d     q..@..../.U.T.3.
     3d4:	09 07 44 18 7d 27 03 21 cd 77 36 a0 6c ec 47 3a     ..D.}'.!.w6.l.G:
     3e4:	41 6f 31 5e 06 38 14 32 ba 63 22 48 f7 3e 36 53     Ao1^.8.2.c"H.>6S
     3f4:	28 67 61 b0 29 50 d9 e9 c7 f5 a8 be b7 e0 b0 e0     (ga.)P..........
     404:	03 72 bf 8a d2 d6 8f b2 6d f3 80 ee 72 97 c6 36     .r......m...r..6
     414:	d7 87 af b8 9f b0 1d a2 79 3c f0 20 a0 a4 08 a2     ........y<. ....
     424:	8b e3 db 7e 17 93 8e 95 9f 76 9f e8 63 3e fc 96     ...~.....v..c>..
     434:	8f 69 da 80 c0 d7 a7 e6 3e 9a 92 1e 0d 7e ed c8     .i......>....~..
     444:	26 6a 62 d1 df fe 0f 38 fc ab 42 7f 6a 9f 9e 34     &jb....8..B.j..4
     454:	6a 14 b1 cb 21 90 3c bc 30 f5 5f d9 e9 26 ad be     j...!.<.0._..&..
     464:	46 23 8d b5 a3 d1 86 f4 df 24 00 af e4 33 65 7f     F#.......$...3e.
     474:	a0 be 3e c3 dd bb 95 86 42 39 6b 4b d5 8e 83 fd     ..>.....B9kK....
     484:	57 4b 31 ed a7 a5 52 11 4a 9d c6 66 79 b6 aa f3     WK1...R.J..fy...

00000494 <private2048e3>:
     494:	18 0e 22 5c e0 ae f0 7c 23 ee 43 6b 29 7a cc b4     .."\...|#.Ck)z..
     4a4:	32 48 03 33 05 63 f2 2f 96 45 62 83 a8 1e 42 f7     2H.3.c./.Eb...B.
     4b4:	55 6f df ef a3 ff cc 3d 19 af 81 8e d2 ab cd aa     Uo.....=........
     4c4:	3d 9e d9 b5 74 2b 48 a0 87 f0 e3 80 38 d2 88 97     =...t+H.....8...
     4d4:	81 81 36 04 14 db d5 da f7 93 de 70 12 27 61 34     ..6........p.'a4
     4e4:	60 3d 32 e5 01 09 58 b3 1f 10 85 b6 d3 df b3 b8     `=2...X.........
     4f4:	86 bb e5 9d 5c 38 24 51 a1 53 9c 1f c9 50 1d 7a     ....\8$Q.S...P.z
     504:	ab 3d ca 97 23 23 c2 9d bc fd ea d2 68 6e a1 08     .=..##......hn..
     514:	e2 ee cd 5c 1b 2d 9a 9c 23 32 2e 36 f1 b1 55 91     ...\.-..#2.6..U.
     524:	dd f4 70 fc b0 a7 1a fd 02 de 79 c1 31 2c c5 90     ..p.......y.1,..
     534:	54 d6 3b 45 04 7a d8 89 aa 9a 3c f6 a6 b8 3a 29     T.;E.z....<...:)
     544:	d1 f3 ea d3 fd 19 44 c2 31 78 6a 69 5c a4 1a e6     ......D.1xji\...
     554:	73 bf 46 31 5c b9 50 58 1d 92 a8 29 3a 7d d0 85     s.F1\.PX...):}..
     564:	46 9f 78 0c 64 e4 6e 93 67 f1 12 31 17 89 0b 6c     F.x.d.n.g..1...l
     574:	c7 89 c7 f5 a0 94 29 bb a7 2e 84 23 20 57 d7 b9     ......)....# W..
     584:	43 ab da 88 aa b0 c1 32 29 40 5d 3b ea 46 bf 8b     C......2)@];.F..

00000594 <crypt2048e3>:
     594:	59 ab d6 2a 37 7e 7b ca 32 20 03 79 4b 28 4a 28     Y..*7~{.2 .yK(J(
     5a4:	50 01 99 aa f0 0d 31 2f a0 0c d3 6f 3b 48 0e 6e     P.....1/...o;H.n
     5b4:	dd 38 ad be 02 eb 8a fc 95 70 e8 2a 27 21 50 21     .8.......p.*'!P!
     5c4:	46 37 00 b8 f0 ae d1 5c 0b f5 74 69 20 46 69 95     F7.....\..ti Fi.
     5d4:	ee d6 fb b7 fe 62 23 d1 73 17 6e 36 bd 0a cf 74     .....b#.s.n6...t
     5e4:	18 b7 d2 6b a5 fa 11 af 19 1e 12 77 a8 9f 86 4f     ...k.......w...O
     5f4:	29 97 2c 08 44 d1 44 71 aa 0f 2d 1a 3e bc c8 0c     ).,.D.Dq..-.>...
     604:	76 a6 0d 55 79 44 ea bb f4 a4 78 5e 19 36 f5 97     v..UyD....x^.6..
     614:	d0 82 d1 24 27 bf 59 29 ff 33 d2 1e cc 24 dc 67     ...$'.Y).3...$.g
     624:	30 4b bd aa e6 f3 f5 df 16 97 78 e9 45 e8 9f 4f     0K........x.E..O
     634:	27 53 f6 c9 01 6c b9 f8 10 46 f9 16 6d f9 28 ba     'S...l...F..m.(.
     644:	68 20 cd 46 8e 9c ae 79 9d 0e 44 d9 85 b4 fa 68     h .F...y..D....h
     654:	fa e7 e6 e4 be d0 4d 53 13 50 30 d0 76 d2 a1 99     ......MS.P0.v...
     664:	42 f1 10 47 ff 22 53 83 cb ab b2 eb ca a7 6a 0c     B..G."S.......j.
     674:	41 4d d0 14 37 fc 75 d4 be 81 6a f5 fd ea a1 b5     AM..7.u...j.....
     684:	d2 38 39 12 e7 17 b5 58 6c d7 26 53 7d 27 21 23     .89....Xl.&S}'!#

00000694 <private_key_flash>:
     694:	26 49 42 16 cc 84 bd 54 f5 0e c7 4f 03 d4 d6 b8     &IB....T...O....
     6a4:	76 0f 63 cc c0 98 32 ff 13 a6 dd 51 e9 2c e5 2b     v.c...2....Q.,.+
     6b4:	04 f3 b2 a4 ce f5 d8 7f ff 52 13 49 af 4e c3 7d     .........R.I.N.}
     6c4:	76 ec 6b 44 d0 c2 65 8c e1 93 4f 7c 30 9e 01 23     v.kD..e...O|0..#

000006d4 <public_key_flash>:
     6d4:	e5 b7 8c 88 cb 1c 6f fd be 58 ab da 16 fd 08 52     ......o..X.....R
     6e4:	c4 5c 56 cc 83 91 31 fa 75 e9 2f eb 77 0d 5f 04     .\V...1.u./.w._.
     6f4:	03 23 55 07 f4 59 76 e7 7b 1c d6 48 90 fb c0 90     .#U..Yv.{..H....
     704:	12 1b f4 14 fd fa 7c 22 c5 46 58 f5 2c 97 f1 0f     ......|".FX.,...

00000714 <CONSTANT_DATA>:
     714:	01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16     ................
     724:	5a 59 e9 71 1a cb 01 11 df 92 8e f4 7b ad d8 69     ZY.q........{..i
     734:	d5 8f 8c ad c2 eb ad cc 01 b9 b2 36 42 f4 a0 3a     ...........6B..:
     744:	11 22 33 44 55 66 77 88 99 aa bb cc dd ee 00 ff     ."3DUfw.........
     754:	01 0f 00 00 05 06 07 08 09 10 11 12 13 14 15 16     ................
     764:	5a 59 e9 71 1a cb 01 11 df 92 8e f4 7b ad d8 bb     ZY.q........{...
     774:	d5 8f 8c ad c2 eb ad cc 01 b9 b2 36 42 f4 a0 3a     ...........6B..:
     784:	11 22 33 44 55 66 77 88 99 aa bb cc dd ee 23 aa     ."3DUfw.......#.
     794:	01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16     ................
     7a4:	5a 59 e9 71 1a cb 01 11 df 92 8e f4 7b ad d8 69     ZY.q........{..i
     7b4:	d5 8f 8c ad c2 eb ad cc 01 b9 b2 36 42 f4 a0 3a     ...........6B..:
     7c4:	11 22 33 44 55 66 77 88 99 aa bb cc dd ee 00 ff     ."3DUfw.........
     7d4:	01 0f 00 00 05 06 07 08 09 10 11 12 13 14 15 16     ................
     7e4:	5a 59 e9 71 1a cb 01 11 df 92 8e f4 7b ad d8 bb     ZY.q........{...
     7f4:	d5 8f 8c ad c2 eb ad cc 01 b9 b2 36 42 f4 a0 3a     ...........6B..:
     804:	11 22 33 44 55 66 77 88 99 aa bb cc dd ee 23 aa     ."3DUfw.......#.

00000814 <CRYPYT_DATA>:
     814:	79 3f 5d 9c d2 d6 57 82 ae bb 1e 9a 12 53 cc 4f     y?]...W......S.O
     824:	dd 12 f1 40 eb d2 f3 47 b3 30 13 f8 01 ff 12 8f     ...@...G.0......
     834:	53 18 ee 7a d7 fe b2 ea 04 fa 8c d3 d8 ef ab 49     S..z...........I
     844:	7b c5 6c ce 03 5d c8 44 84 e3 01 4c a0 bd 07 87     {.l..].D...L....

00000854 <a_sha>:
     854:	61 62 63 64 62 63 64 65 63 64 65 66 64 65 66 67     abcdbcdecdefdefg
     864:	65 66 67 68 66 67 00                                efghfg.

0000086b <b_sha>:
     86b:	68 69 67 68 69 6a 68 69 6a 6b 69 6a 6b 6c 6a 6b     highijhijkijkljk
     87b:	6c 6d 6b 6c 6d 6e 6c 6d 6e 6f 6d 6e 6f 70 6e 6f     lmklmnlmnomnopno
     88b:	70 71 00                                            pq.

0000088e <c_sha>:
     88e:	53 48 41 54 65 73 74 46 65 63 74 6f 72 73 4a 75     SHATestFectorsJu
     89e:	73 74 46 6f 72 74 65 73 74 69 6e 67 3a 53 48 41     stFortesting:SHA
     8ae:	54 65 73 74 46 65 63 74 6f 72 73 4a 75 73 74 46     TestFectorsJustF
     8be:	6f 72 74 65 73 74 69 6e 67 3a 53 48 41 54 65 73     ortesting:SHATes
     8ce:	74 46 65 63 74 6f 72 73 4a 75 73 74 46 6f 72 74     tFectorsJustFort
     8de:	65 73 74 69 6e 67 00                                esting.

000008e5 <test_md5_cmp>:
     8e5:	03 83 e2 85 55 c6 b2 d2 ae 6f 8f 7a 6d f9 b3 07     ....U....o.zm...

000008f5 <test_md5_2_cmp>:
     8f5:	82 15 ef 07 96 a2 0b ca aa e1 16 d3 87 6c 66 4a     .............lfJ

00000905 <test_md5_3_cmp>:
     905:	ad eb 47 ec 97 9f 9f 74 a0 6b d1 c9 28 3f b8 40     ..G....t.k..(?.@

00000915 <test_md5_4_cmp>:
     915:	9e 10 7d 9d 37 2b b6 82 6b d8 1d 35 42 a4 19 d6     ..}.7+..k..5B...

00000925 <test_md5_5_cmp>:
     925:	ad eb 47 ec 97 9f 9f 74 a0 6b d1 c9 28 3f b8 40     ..G....t.k..(?.@

00000935 <a_md5>:
     935:	61 62 63 64 62 63 64 65 63 64 65 66 64 65 66 67     abcdbcdecdefdefg
     945:	65 66 67 68 66 67 00                                efghfg.

0000094c <b_md5>:
     94c:	68 69 67 68 69 6a 68 69 6a 6b 69 6a 6b 6c 6a 6b     highijhijkijkljk
     95c:	6c 6d 6b 6c 6d 6e 6c 6d 6e 6f 6d 6e 6f 70 6e 6f     lmklmnlmnomnopno
     96c:	70 71 00                                            pq.

0000096f <c_md5>:
     96f:	6d 64 35 54 65 73 74 46 65 63 74 6f 72 73 4a 75     md5TestFectorsJu
     97f:	73 74 46 6f 72 74 65 73 74 69 6e 67 3a 6d 64 35     stFortesting:md5
     98f:	54 65 73 74 46 65 63 74 6f 72 73 4a 75 73 74 46     TestFectorsJustF
     99f:	6f 72 74 65 73 74 69 6e 67 3a 6d 64 35 54 65 73     ortesting:md5Tes
     9af:	74 46 65 63 74 6f 72 73 4a 75 73 74 46 6f 72 74     tFectorsJustFort
     9bf:	65 73 74 69 6e 67 00                                esting.

000009c6 <SkipJack_Test1_Key>:
     9c6:	00 99 88 77 66 55 44 33 22 11                       ...wfUD3".

000009d0 <SkipJack_Test1_Plain>:
     9d0:	33 22 11 00 dd cc bb aa                             3"......

000009d8 <SkipJack_Test1_Cipher>:
     9d8:	25 87 ca e2 7a 12 d3 00                             %...z...

000009e0 <SkipJack_Test2_Key>:
     9e0:	e7 49 6e 99 e4 62 8b 7f 9f fb                       .In..b....

000009ea <SkipJack_Test2_Plain>:
     9ea:	99 cc fe 2b 90 fd 55 0b                             ...+..U.

000009f2 <SkipJack_Test2_Cipher>:
     9f2:	60 a7 3d 38 7b 51 7f ca                             `.=8{Q..

000009fa <AES_Test_Data_1>:
     9fa:	32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34     2C...Z0.11...7.4
     a0a:	4a 40 93 82 22 99 f3 1d 00 82 ef a9 8e c4 e6 c8     J@.."...........

00000a1a <AES_Test_Key_1>:
     a1a:	2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c     +~..(.........O<
     a2a:	76 2e 71 60 f3 8b 4d a5 6a 78 4d 90 45 19 0c fe     v.q`..M.jxM.E...

00000a3a <AES_Test_Result_128_1>:
     a3a:	39 25 84 1d 02 dc 09 fb dc 11 85 97 19 6a 0b 32     9%...........j.2

00000a4a <AES_Test_Result_192_1>:
     a4a:	f9 fb 29 ae fc 38 4a 25 03 40 d8 33 b8 7e bc 00     ..)..8J%.@.3.~..

00000a5a <AES_Test_Result_256_1>:
     a5a:	1a 6e 6c 2c 66 2e 7d a6 50 1f fb 62 bc 9e 93 f3     .nl,f.}.P..b....

00000a6a <AES_Test_Key_2>:
     a6a:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     a7a:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................

00000a8a <AES_Test_Data_2>:
     a8a:	00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff     .."3DUfw........

00000a9a <AES_Test_Result_128_2>:
     a9a:	69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a     i...j{.0....p..Z

00000aaa <AES_Test_Result_192_2>:
     aaa:	dd a9 7c a4 86 4c df e0 6e af 70 a0 ec 0d 71 91     ..|..L..n.p...q.

00000aba <AES_Test_Result_256_2>:
     aba:	8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89     ....QgE...I.KI`.

00000aca <Sha_Init_Const>:
     aca:	01 23       	and	r16, r17
     acc:	45 67       	ori	r20, 0x75	; 117
     ace:	89 ab       	std	Y+49, r24	; 0x31
     ad0:	cd ef       	ldi	r28, 0xFD	; 253
     ad2:	fe dc       	rcall	.-1540   	; 0x4d0 <private2048e3+0x3c>
     ad4:	ba 98       	cbi	0x17, 2	; 23
     ad6:	76 54       	subi	r23, 0x46	; 70
     ad8:	32 10       	cpse	r3, r2
     ada:	f0 e1       	ldi	r31, 0x10	; 16
     adc:	d2 c3       	rjmp	.+1956   	; 0x1282 <des_test+0x62>

00000ade <MD5_InitConst>:
     ade:	01 23       	and	r16, r17
     ae0:	45 67       	ori	r20, 0x75	; 117
     ae2:	89 ab       	std	Y+49, r24	; 0x31
     ae4:	cd ef       	ldi	r28, 0xFD	; 253
     ae6:	fe dc       	rcall	.-1540   	; 0x4e4 <private2048e3+0x50>
     ae8:	ba 98       	cbi	0x17, 2	; 23
     aea:	76 54       	subi	r23, 0x46	; 70
     aec:	32 10       	cpse	r3, r2

00000aee <MD5DataTransform>:
     aee:	78 a4       	ldd	r7, Y+40	; 0x28
     af0:	6a d7       	rcall	.+3796   	; 0x19c6 <test_sha3+0xc0>
     af2:	56 b7       	in	r21, 0x36	; 54
     af4:	c7 e8       	ldi	r28, 0x87	; 135
     af6:	db 70       	andi	r29, 0x0B	; 11
     af8:	20 24       	eor	r2, r0
     afa:	ee ce       	rjmp	.-548    	; 0x8d8 <c_sha+0x4a>
     afc:	bd c1       	rjmp	.+890    	; 0xe78 <T9+0x2>
     afe:	af 0f       	add	r26, r31
     b00:	7c f5       	brge	.+94     	; 0xb60 <MD5DataTransform+0x72>
     b02:	2a c6       	rjmp	.+3156   	; 0x1758 <test_sha5+0x12>
     b04:	87 47       	sbci	r24, 0x77	; 119
     b06:	13 46       	sbci	r17, 0x63	; 99
     b08:	30 a8       	ldd	r3, Z+48	; 0x30
     b0a:	01 95       	neg	r16
     b0c:	46 fd       	sbrc	r20, 6
     b0e:	d8 98       	cbi	0x1b, 0	; 27
     b10:	80 69       	ori	r24, 0x90	; 144
     b12:	af f7       	brid	.-22     	; 0xafe <MD5DataTransform+0x10>
     b14:	44 8b       	std	Z+20, r20	; 0x14
     b16:	b1 5b       	subi	r27, 0xB1	; 177
     b18:	ff ff       	.word	0xffff	; ????
     b1a:	be d7       	rcall	.+3964   	; 0x1a98 <test_sha2+0x2>
     b1c:	5c 89       	ldd	r21, Y+20	; 0x14
     b1e:	22 11       	cpse	r18, r2
     b20:	90 6b       	ori	r25, 0xB0	; 176
     b22:	93 71       	andi	r25, 0x13	; 19
     b24:	98 fd       	.word	0xfd98	; ????
     b26:	8e 43       	sbci	r24, 0x3E	; 62
     b28:	79 a6       	std	Y+41, r7	; 0x29
     b2a:	21 08       	sbc	r2, r1
     b2c:	b4 49       	sbci	r27, 0x94	; 148
     b2e:	62 25       	eor	r22, r2
     b30:	1e f6       	brtc	.-122    	; 0xab8 <AES_Test_Result_192_2+0xe>
     b32:	40 b3       	in	r20, 0x10	; 16
     b34:	40 c0       	rjmp	.+128    	; 0xbb6 <MD5DataTransform+0xc8>
     b36:	51 5a       	subi	r21, 0xA1	; 161
     b38:	5e 26       	eor	r5, r30
     b3a:	aa c7       	rjmp	.+3924   	; 0x1a90 <test_sha3+0x18a>
     b3c:	b6 e9       	ldi	r27, 0x96	; 150
     b3e:	5d 10       	cpse	r5, r13
     b40:	2f d6       	rcall	.+3166   	; 0x17a0 <test_sha5+0x5a>
     b42:	53 14       	cp	r5, r3
     b44:	44 02       	muls	r20, r20
     b46:	81 e6       	ldi	r24, 0x61	; 97
     b48:	a1 d8       	rcall	.-3774   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     b4a:	c8 fb       	.word	0xfbc8	; ????
     b4c:	d3 e7       	ldi	r29, 0x73	; 115
     b4e:	e6 cd       	rjmp	.-1076   	; 0x71c <CONSTANT_DATA+0x8>
     b50:	e1 21       	and	r30, r1
     b52:	d6 07       	cpc	r29, r22
     b54:	37 c3       	rjmp	.+1646   	; 0x11c4 <.do_copy_data_start+0x2>
     b56:	87 0d       	add	r24, r7
     b58:	d5 f4       	brhc	.+52     	; 0xb8e <MD5DataTransform+0xa0>
     b5a:	ed 14       	cp	r14, r13
     b5c:	5a 45       	sbci	r21, 0x5A	; 90
     b5e:	05 e9       	ldi	r16, 0x95	; 149
     b60:	e3 a9       	ldd	r30, Z+51	; 0x33
     b62:	f8 a3       	std	Y+32, r31	; 0x20
     b64:	ef fc       	.word	0xfcef	; ????
     b66:	d9 02       	muls	r29, r25
     b68:	6f 67       	ori	r22, 0x7F	; 127
     b6a:	8a 4c       	sbci	r24, 0xCA	; 202
     b6c:	2a 8d       	ldd	r18, Y+26	; 0x1a
     b6e:	42 39       	cpi	r20, 0x92	; 146
     b70:	fa ff       	.word	0xfffa	; ????
     b72:	81 f6       	brne	.-96     	; 0xb14 <MD5DataTransform+0x26>
     b74:	71 87       	std	Z+9, r23	; 0x09
     b76:	22 61       	ori	r18, 0x12	; 18
     b78:	9d 6d       	ori	r25, 0xDD	; 221
     b7a:	0c 38       	cpi	r16, 0x8C	; 140
     b7c:	e5 fd       	sbrc	r30, 5
     b7e:	44 ea       	ldi	r20, 0xA4	; 164
     b80:	be a4       	ldd	r11, Y+46	; 0x2e
     b82:	a9 cf       	rjmp	.-174    	; 0xad6 <Sha_Init_Const+0xc>
     b84:	de 4b       	sbci	r29, 0xBE	; 190
     b86:	60 4b       	sbci	r22, 0xB0	; 176
     b88:	bb f6       	brvc	.-82     	; 0xb38 <MD5DataTransform+0x4a>
     b8a:	70 bc       	out	0x20, r7	; 32
     b8c:	bf be       	out	0x3f, r11	; 63
     b8e:	c6 7e       	andi	r28, 0xE6	; 230
     b90:	9b 28       	or	r9, r11
     b92:	fa 27       	eor	r31, r26
     b94:	a1 ea       	ldi	r26, 0xA1	; 161
     b96:	85 30       	cpi	r24, 0x05	; 5
     b98:	ef d4       	rcall	.+2526   	; 0x1578 <rsa_test+0x236>
     b9a:	05 1d       	adc	r16, r5
     b9c:	88 04       	cpc	r8, r8
     b9e:	39 d0       	rcall	.+114    	; 0xc12 <MD5RolTransform+0x24>
     ba0:	d4 d9       	rcall	.-3160   	; 0xffffff4a <__eeprom_end+0xff7eff4a>
     ba2:	e5 99       	sbic	0x1c, 5	; 28
     ba4:	db e6       	ldi	r29, 0x6B	; 107
     ba6:	f8 7c       	andi	r31, 0xC8	; 200
     ba8:	a2 1f       	adc	r26, r18
     baa:	65 56       	subi	r22, 0x65	; 101
     bac:	ac c4       	rjmp	.+2392   	; 0x1506 <rsa_test+0x1c4>
     bae:	44 22       	and	r4, r20
     bb0:	29 f4       	brne	.+10     	; 0xbbc <MD5DataTransform+0xce>
     bb2:	97 ff       	sbrs	r25, 7
     bb4:	2a 43       	sbci	r18, 0x3A	; 58
     bb6:	a7 23       	and	r26, r23
     bb8:	94 ab       	std	Z+52, r25	; 0x34
     bba:	39 a0       	ldd	r3, Y+33	; 0x21
     bbc:	93 fc       	sbrc	r9, 3
     bbe:	c3 59       	subi	r28, 0x93	; 147
     bc0:	5b 65       	ori	r21, 0x5B	; 91
     bc2:	92 cc       	rjmp	.-1756   	; 0x4e8 <private2048e3+0x54>
     bc4:	0c 8f       	std	Y+28, r16	; 0x1c
     bc6:	7d f4       	brhc	.+30     	; 0xbe6 <MD5DataTransform+0xf8>
     bc8:	ef ff       	.word	0xffef	; ????
     bca:	d1 5d       	subi	r29, 0xD1	; 209
     bcc:	84 85       	ldd	r24, Z+12	; 0x0c
     bce:	4f 7e       	andi	r20, 0xEF	; 239
     bd0:	a8 6f       	ori	r26, 0xF8	; 248
     bd2:	e0 e6       	ldi	r30, 0x60	; 96
     bd4:	2c fe       	.word	0xfe2c	; ????
     bd6:	14 43       	sbci	r17, 0x34	; 52
     bd8:	01 a3       	std	Z+33, r16	; 0x21
     bda:	a1 11       	cpse	r26, r1
     bdc:	08 4e       	sbci	r16, 0xE8	; 232
     bde:	82 7e       	andi	r24, 0xE2	; 226
     be0:	53 f7       	brvc	.-44     	; 0xbb6 <MD5DataTransform+0xc8>
     be2:	35 f2       	brhs	.-116    	; 0xb70 <MD5DataTransform+0x82>
     be4:	3a bd       	out	0x2a, r19	; 42
     be6:	bb d2       	rcall	.+1398   	; 0x115e <AES_Flash_InvSBox+0xb8>
     be8:	d7 2a       	or	r13, r23
     bea:	91 d3       	rcall	.+1826   	; 0x130e <des_test+0xee>
     bec:	86 eb       	ldi	r24, 0xB6	; 182

00000bee <MD5RolTransform>:
     bee:	07 0c       	add	r0, r7
     bf0:	11 16       	cp	r1, r17
     bf2:	07 0c       	add	r0, r7
     bf4:	11 16       	cp	r1, r17
     bf6:	07 0c       	add	r0, r7
     bf8:	11 16       	cp	r1, r17
     bfa:	07 0c       	add	r0, r7
     bfc:	11 16       	cp	r1, r17
     bfe:	05 09       	sbc	r16, r5
     c00:	0e 14       	cp	r0, r14
     c02:	05 09       	sbc	r16, r5
     c04:	0e 14       	cp	r0, r14
     c06:	05 09       	sbc	r16, r5
     c08:	0e 14       	cp	r0, r14
     c0a:	05 09       	sbc	r16, r5
     c0c:	0e 14       	cp	r0, r14
     c0e:	04 0b       	sbc	r16, r20
     c10:	10 17       	cp	r17, r16
     c12:	04 0b       	sbc	r16, r20
     c14:	10 17       	cp	r17, r16
     c16:	04 0b       	sbc	r16, r20
     c18:	10 17       	cp	r17, r16
     c1a:	04 0b       	sbc	r16, r20
     c1c:	10 17       	cp	r17, r16
     c1e:	06 0a       	sbc	r0, r22
     c20:	0f 15       	cp	r16, r15
     c22:	06 0a       	sbc	r0, r22
     c24:	0f 15       	cp	r16, r15
     c26:	06 0a       	sbc	r0, r22
     c28:	0f 15       	cp	r16, r15
     c2a:	06 0a       	sbc	r0, r22
     c2c:	0f 15       	cp	r16, r15

00000c2e <MD5IndexTransform>:
     c2e:	00 01       	movw	r0, r0
     c30:	02 03       	mulsu	r16, r18
     c32:	04 05       	cpc	r16, r4
     c34:	06 07       	cpc	r16, r22
     c36:	08 09       	sbc	r16, r8
     c38:	0a 0b       	sbc	r16, r26
     c3a:	0c 0d       	add	r16, r12
     c3c:	0e 0f       	add	r16, r30
     c3e:	01 06       	cpc	r0, r17
     c40:	0b 00       	.word	0x000b	; ????
     c42:	05 0a       	sbc	r0, r21
     c44:	0f 04       	cpc	r0, r15
     c46:	09 0e       	add	r0, r25
     c48:	03 08       	sbc	r0, r3
     c4a:	0d 02       	muls	r16, r29
     c4c:	07 0c       	add	r0, r7
     c4e:	05 08       	sbc	r0, r5
     c50:	0b 0e       	add	r0, r27
     c52:	01 04       	cpc	r0, r1
     c54:	07 0a       	sbc	r0, r23
     c56:	0d 00       	.word	0x000d	; ????
     c58:	03 06       	cpc	r0, r19
     c5a:	09 0c       	add	r0, r9
     c5c:	0f 02       	muls	r16, r31
     c5e:	00 07       	cpc	r16, r16
     c60:	0e 05       	cpc	r16, r14
     c62:	0c 03       	fmul	r16, r20
     c64:	0a 01       	movw	r0, r20
     c66:	08 0f       	add	r16, r24
     c68:	06 0d       	add	r16, r6
     c6a:	04 0b       	sbc	r16, r20
     c6c:	02 09       	sbc	r16, r2

00000c6e <skipjack_ftable>:
     c6e:	a3 d7       	rcall	.+3910   	; 0x1bb6 <test_sha2+0x120>
     c70:	09 83       	std	Y+1, r16	; 0x01
     c72:	f8 48       	sbci	r31, 0x88	; 136
     c74:	f6 f4       	brtc	.+60     	; 0xcb2 <skipjack_ftable+0x44>
     c76:	b3 21       	and	r27, r3
     c78:	15 78       	andi	r17, 0x85	; 133
     c7a:	99 b1       	in	r25, 0x09	; 9
     c7c:	af f9       	.word	0xf9af	; ????
     c7e:	e7 2d       	mov	r30, r7
     c80:	4d 8a       	std	Y+21, r4	; 0x15
     c82:	ce 4c       	sbci	r28, 0xCE	; 206
     c84:	ca 2e       	mov	r12, r26
     c86:	52 95       	swap	r21
     c88:	d9 1e       	adc	r13, r25
     c8a:	4e 38       	cpi	r20, 0x8E	; 142
     c8c:	44 28       	or	r4, r4
     c8e:	0a df       	rcall	.-492    	; 0xaa4 <AES_Test_Result_128_2+0xa>
     c90:	02 a0       	ldd	r0, Z+34	; 0x22
     c92:	17 f1       	brie	.+68     	; 0xcd8 <skipjack_ftable+0x6a>
     c94:	60 68       	ori	r22, 0x80	; 128
     c96:	12 b7       	in	r17, 0x32	; 50
     c98:	7a c3       	rjmp	.+1780   	; 0x138e <rsa_test+0x4c>
     c9a:	e9 fa       	.word	0xfae9	; ????
     c9c:	3d 53       	subi	r19, 0x3D	; 61
     c9e:	96 84       	ldd	r9, Z+14	; 0x0e
     ca0:	6b ba       	out	0x1b, r6	; 27
     ca2:	f2 63       	ori	r31, 0x32	; 50
     ca4:	9a 19       	sub	r25, r10
     ca6:	7c ae       	std	Y+60, r7	; 0x3c
     ca8:	e5 f5       	brhc	.+120    	; 0xd22 <skipjack_ftable+0xb4>
     caa:	f7 16       	cp	r15, r23
     cac:	6a a2       	std	Y+34, r6	; 0x22
     cae:	39 b6       	in	r3, 0x39	; 57
     cb0:	7b 0f       	add	r23, r27
     cb2:	c1 93       	st	Z+, r28
     cb4:	81 1b       	sub	r24, r17
     cb6:	ee b4       	in	r14, 0x2e	; 46
     cb8:	1a ea       	ldi	r17, 0xAA	; 170
     cba:	d0 91 2f b8 	lds	r29, 0xB82F
     cbe:	55 b9       	out	0x05, r21	; 5
     cc0:	da 85       	ldd	r29, Y+10	; 0x0a
     cc2:	3f 41       	sbci	r19, 0x1F	; 31
     cc4:	bf e0       	ldi	r27, 0x0F	; 15
     cc6:	5a 58       	subi	r21, 0x8A	; 138
     cc8:	80 5f       	subi	r24, 0xF0	; 240
     cca:	66 0b       	sbc	r22, r22
     ccc:	d8 90       	.word	0x90d8	; ????
     cce:	35 d5       	rcall	.+2666   	; 0x173a <rsa_test+0x3f8>
     cd0:	c0 a7       	std	Z+40, r28	; 0x28
     cd2:	33 06       	cpc	r3, r19
     cd4:	65 69       	ori	r22, 0x95	; 149
     cd6:	45 00       	.word	0x0045	; ????
     cd8:	94 56       	subi	r25, 0x64	; 100
     cda:	6d 98       	cbi	0x0d, 5	; 13
     cdc:	9b 76       	andi	r25, 0x6B	; 107
     cde:	97 fc       	sbrc	r9, 7
     ce0:	b2 c2       	rjmp	.+1380   	; 0x1246 <des_test+0x26>
     ce2:	b0 fe       	sbrs	r11, 0
     ce4:	db 20       	and	r13, r11
     ce6:	e1 eb       	ldi	r30, 0xB1	; 177
     ce8:	d6 e4       	ldi	r29, 0x46	; 70
     cea:	dd 47       	sbci	r29, 0x7D	; 125
     cec:	4a 1d       	adc	r20, r10
     cee:	42 ed       	ldi	r20, 0xD2	; 210
     cf0:	9e 6e       	ori	r25, 0xEE	; 238
     cf2:	49 3c       	cpi	r20, 0xC9	; 201
     cf4:	cd 43       	sbci	r28, 0x3D	; 61
     cf6:	27 d2       	rcall	.+1102   	; 0x1146 <AES_Flash_InvSBox+0xa0>
     cf8:	07 d4       	rcall	.+2062   	; 0x1508 <rsa_test+0x1c6>
     cfa:	de c7       	rjmp	.+4028   	; 0x1cb8 <sha_test+0xe>
     cfc:	67 18       	sub	r6, r7
     cfe:	89 cb       	rjmp	.-2286   	; 0x412 <public2048e3+0x7e>
     d00:	30 1f       	adc	r19, r16
     d02:	8d c6       	rjmp	.+3354   	; 0x1a1e <test_sha3+0x118>
     d04:	8f aa       	std	Y+55, r8	; 0x37
     d06:	c8 74       	andi	r28, 0x48	; 72
     d08:	dc c9       	rjmp	.-3144   	; 0xc2 <__SREG__+0x83>
     d0a:	5d 5c       	subi	r21, 0xCD	; 205
     d0c:	31 a4       	ldd	r3, Z+41	; 0x29
     d0e:	70 88       	ldd	r7, Z+16	; 0x10
     d10:	61 2c       	mov	r6, r1
     d12:	9f 0d       	add	r25, r15
     d14:	2b 87       	std	Y+11, r18	; 0x0b
     d16:	50 82       	st	Z, r5
     d18:	54 64       	ori	r21, 0x44	; 68
     d1a:	26 7d       	andi	r18, 0xD6	; 214
     d1c:	03 40       	sbci	r16, 0x03	; 3
     d1e:	34 4b       	sbci	r19, 0xB4	; 180
     d20:	1c 73       	andi	r17, 0x3C	; 60
     d22:	d1 c4       	rjmp	.+2466   	; 0x16c6 <rsa_test+0x384>
     d24:	fd 3b       	cpi	r31, 0xBD	; 189
     d26:	cc fb       	.word	0xfbcc	; ????
     d28:	7f ab       	std	Y+55, r23	; 0x37
     d2a:	e6 3e       	cpi	r30, 0xE6	; 230
     d2c:	5b a5       	ldd	r21, Y+43	; 0x2b
     d2e:	ad 04       	cpc	r10, r13
     d30:	23 9c       	mul	r2, r3
     d32:	14 51       	subi	r17, 0x14	; 20
     d34:	22 f0       	brmi	.+8      	; 0xd3e <skipjack_ftable+0xd0>
     d36:	29 79       	andi	r18, 0x99	; 153
     d38:	71 7e       	andi	r23, 0xE1	; 225
     d3a:	ff 8c       	ldd	r15, Y+31	; 0x1f
     d3c:	0e e2       	ldi	r16, 0x2E	; 46
     d3e:	0c ef       	ldi	r16, 0xFC	; 252
     d40:	bc 72       	andi	r27, 0x2C	; 44
     d42:	75 6f       	ori	r23, 0xF5	; 245
     d44:	37 a1       	ldd	r19, Z+39	; 0x27
     d46:	ec d3       	rcall	.+2008   	; 0x1520 <rsa_test+0x1de>
     d48:	8e 62       	ori	r24, 0x2E	; 46
     d4a:	8b 86       	std	Y+11, r8	; 0x0b
     d4c:	10 e8       	ldi	r17, 0x80	; 128
     d4e:	08 77       	andi	r16, 0x78	; 120
     d50:	11 be       	out	0x31, r1	; 49
     d52:	92 4f       	sbci	r25, 0xF2	; 242
     d54:	24 c5       	rjmp	.+2632   	; 0x179e <test_sha5+0x58>
     d56:	32 36       	cpi	r19, 0x62	; 98
     d58:	9d cf       	rjmp	.-198    	; 0xc94 <skipjack_ftable+0x26>
     d5a:	f3 a6       	std	Z+43, r15	; 0x2b
     d5c:	bb ac       	ldd	r11, Y+59	; 0x3b
     d5e:	5e 6c       	ori	r21, 0xCE	; 206
     d60:	a9 13       	cpse	r26, r25
     d62:	57 25       	eor	r21, r7
     d64:	b5 e3       	ldi	r27, 0x35	; 53
     d66:	bd a8       	ldd	r11, Y+53	; 0x35
     d68:	3a 01       	movw	r6, r20
     d6a:	05 59       	subi	r16, 0x95	; 149
     d6c:	2a 46       	sbci	r18, 0x6A	; 106

00000d6e <T1_1>:
     d6e:	27 07       	cpc	r18, r23
     d70:	2f 0f       	add	r18, r31
     d72:	37 17       	cp	r19, r23
     d74:	3f 1f       	adc	r19, r31
     d76:	26 06       	cpc	r2, r22
     d78:	2e 0e       	add	r2, r30
     d7a:	36 16       	cp	r3, r22
     d7c:	3e 1e       	adc	r3, r30
     d7e:	25 05       	cpc	r18, r5
     d80:	2d 0d       	add	r18, r13
     d82:	35 15       	cp	r19, r5
     d84:	3d 1d       	adc	r19, r13
     d86:	24 04       	cpc	r2, r4
     d88:	2c 0c       	add	r2, r12
     d8a:	34 14       	cp	r3, r4
     d8c:	3c 1c       	adc	r3, r12
     d8e:	23 03       	mulsu	r18, r19
     d90:	2b 0b       	sbc	r18, r27
     d92:	33 13       	cpse	r19, r19
     d94:	3b 1b       	sub	r19, r27
     d96:	22 02       	muls	r18, r18
     d98:	2a 0a       	sbc	r2, r26
     d9a:	32 12       	cpse	r3, r18
     d9c:	3a 1a       	sub	r3, r26
     d9e:	21 01       	movw	r4, r2
     da0:	29 09       	sbc	r18, r9
     da2:	31 11       	cpse	r19, r1
     da4:	39 19       	sub	r19, r9
     da6:	20 00       	.word	0x0020	; ????
     da8:	28 08       	sbc	r2, r8
     daa:	30 10       	cpse	r3, r0
     dac:	38 18       	sub	r3, r8

00000dae <T2_1>:
     dae:	39 31       	cpi	r19, 0x19	; 25
     db0:	29 21       	and	r18, r9
     db2:	19 11       	cpse	r17, r9
     db4:	09 01       	movw	r0, r18
     db6:	3b 33       	cpi	r19, 0x3B	; 59
     db8:	2b 23       	and	r18, r27
     dba:	1b 13       	cpse	r17, r27
     dbc:	0b 03       	fmul	r16, r19
     dbe:	3d 35       	cpi	r19, 0x5D	; 93
     dc0:	2d 25       	eor	r18, r13
     dc2:	1d 15       	cp	r17, r13
     dc4:	0d 05       	cpc	r16, r13
     dc6:	3f 37       	cpi	r19, 0x7F	; 127
     dc8:	2f 27       	eor	r18, r31
     dca:	1f 17       	cp	r17, r31
     dcc:	0f 07       	cpc	r16, r31
     dce:	38 30       	cpi	r19, 0x08	; 8
     dd0:	28 20       	and	r2, r8
     dd2:	18 10       	cpse	r1, r8
     dd4:	08 00       	.word	0x0008	; ????
     dd6:	3a 32       	cpi	r19, 0x2A	; 42
     dd8:	2a 22       	and	r2, r26
     dda:	1a 12       	cpse	r1, r26
     ddc:	0a 02       	muls	r16, r26
     dde:	3c 34       	cpi	r19, 0x4C	; 76
     de0:	2c 24       	eor	r2, r12
     de2:	1c 14       	cp	r1, r12
     de4:	0c 04       	cpc	r0, r12
     de6:	3e 36       	cpi	r19, 0x6E	; 110
     de8:	2e 26       	eor	r2, r30
     dea:	1e 16       	cp	r1, r30
     dec:	0e 06       	cpc	r0, r30

00000dee <T3_32>:
     dee:	3f 20       	and	r3, r15
     df0:	21 22       	and	r2, r17
     df2:	23 24       	eor	r2, r3
     df4:	23 24       	eor	r2, r3
     df6:	25 26       	eor	r2, r21
     df8:	27 28       	or	r2, r7
     dfa:	27 28       	or	r2, r7
     dfc:	29 2a       	or	r2, r25
     dfe:	2b 2c       	mov	r2, r11
     e00:	2b 2c       	mov	r2, r11
     e02:	2d 2e       	mov	r2, r29
     e04:	2f 30       	cpi	r18, 0x0F	; 15
     e06:	2f 30       	cpi	r18, 0x0F	; 15
     e08:	31 32       	cpi	r19, 0x21	; 33
     e0a:	33 34       	cpi	r19, 0x43	; 67
     e0c:	33 34       	cpi	r19, 0x43	; 67
     e0e:	35 36       	cpi	r19, 0x65	; 101
     e10:	37 38       	cpi	r19, 0x87	; 135
     e12:	37 38       	cpi	r19, 0x87	; 135
     e14:	39 3a       	cpi	r19, 0xA9	; 169
     e16:	3b 3c       	cpi	r19, 0xCB	; 203
     e18:	3b 3c       	cpi	r19, 0xCB	; 203
     e1a:	3d 3e       	cpi	r19, 0xED	; 237
     e1c:	3f 20       	and	r3, r15

00000e1e <T5_1_32>:
     e1e:	28 30       	cpi	r18, 0x08	; 8
     e20:	36 3e       	cpi	r19, 0xE6	; 230
     e22:	2c 3b       	cpi	r18, 0xBC	; 188
     e24:	21 31       	cpi	r18, 0x11	; 17
     e26:	37 2f       	mov	r19, r23
     e28:	3d 25       	eor	r19, r13
     e2a:	39 33       	cpi	r19, 0x39	; 57
     e2c:	29 20       	and	r2, r9
     e2e:	27 2d       	mov	r18, r7
     e30:	38 22       	and	r3, r24
     e32:	23 3c       	cpi	r18, 0xC3	; 195
     e34:	2a 32       	cpi	r18, 0x2A	; 42
     e36:	3f 2b       	or	r19, r31
     e38:	35 26       	eor	r3, r21
     e3a:	24 3a       	cpi	r18, 0xA4	; 164
     e3c:	2e 34       	cpi	r18, 0x4E	; 78

00000e3e <T7_1_2>:
     e3e:	38 30       	cpi	r19, 0x08	; 8
     e40:	28 20       	and	r2, r8
     e42:	18 10       	cpse	r1, r8
     e44:	08 00       	.word	0x0008	; ????
     e46:	39 31       	cpi	r19, 0x19	; 25
     e48:	29 21       	and	r18, r9
     e4a:	19 11       	cpse	r17, r9
     e4c:	09 01       	movw	r0, r18
     e4e:	3a 32       	cpi	r19, 0x2A	; 42
     e50:	2a 22       	and	r2, r26
     e52:	1a 12       	cpse	r1, r26
     e54:	0a 02       	muls	r16, r26
     e56:	3b 33       	cpi	r19, 0x3B	; 59
     e58:	2b 23       	and	r18, r27
     e5a:	3e 36       	cpi	r19, 0x6E	; 110
     e5c:	2e 26       	eor	r2, r30
     e5e:	1e 16       	cp	r1, r30
     e60:	0e 06       	cpc	r0, r30
     e62:	3d 35       	cpi	r19, 0x5D	; 93
     e64:	2d 25       	eor	r18, r13
     e66:	1d 15       	cp	r17, r13
     e68:	0d 05       	cpc	r16, r13
     e6a:	3c 34       	cpi	r19, 0x4C	; 76
     e6c:	2c 24       	eor	r2, r12
     e6e:	1c 14       	cp	r1, r12
     e70:	0c 04       	cpc	r0, r12
     e72:	1b 13       	cpse	r17, r27
     e74:	0b 03       	fmul	r16, r19

00000e76 <T9>:
     e76:	0d 10       	cpse	r0, r13
     e78:	0a 17       	cp	r16, r26
     e7a:	00 04       	cpc	r0, r0
     e7c:	02 1b       	sub	r16, r18
     e7e:	0e 05       	cpc	r16, r14
     e80:	14 09       	sbc	r17, r4
     e82:	16 12       	cpse	r1, r22
     e84:	0b 03       	fmul	r16, r19
     e86:	19 07       	cpc	r17, r25
     e88:	0f 06       	cpc	r0, r31
     e8a:	1a 13       	cpse	r17, r26
     e8c:	0c 01       	movw	r0, r24
     e8e:	28 33       	cpi	r18, 0x38	; 56
     e90:	1e 24       	eor	r1, r14
     e92:	2e 36       	cpi	r18, 0x6E	; 110
     e94:	1d 27       	eor	r17, r29
     e96:	32 2c       	mov	r3, r2
     e98:	20 2f       	mov	r18, r16
     e9a:	2b 30       	cpi	r18, 0x0B	; 11
     e9c:	26 37       	cpi	r18, 0x76	; 118
     e9e:	21 34       	cpi	r18, 0x41	; 65
     ea0:	2d 29       	or	r18, r13
     ea2:	31 23       	and	r19, r17
     ea4:	1c 1f       	adc	r17, r28

00000ea6 <sTable>:
     ea6:	e4 d1       	rcall	.+968    	; 0x1270 <des_test+0x50>
     ea8:	2f b8       	out	0x0f, r2	; 15
     eaa:	3a 6c       	ori	r19, 0xCA	; 202
     eac:	59 07       	cpc	r21, r25
     eae:	0f 74       	andi	r16, 0x4F	; 79
     eb0:	e2 d1       	rcall	.+964    	; 0x1276 <des_test+0x56>
     eb2:	a6 cb       	rjmp	.-2228   	; 0x600 <crypt2048e3+0x6c>
     eb4:	95 38       	cpi	r25, 0x85	; 133
     eb6:	41 e8       	ldi	r20, 0x81	; 129
     eb8:	d6 2b       	or	r29, r22
     eba:	fc 97       	sbiw	r30, 0x3c	; 60
     ebc:	3a 50       	subi	r19, 0x0A	; 10
     ebe:	fc 82       	std	Y+4, r15	; 0x04
     ec0:	49 17       	cp	r20, r25
     ec2:	5b 3e       	cpi	r21, 0xEB	; 235
     ec4:	a0 6d       	ori	r26, 0xD0	; 208
     ec6:	f1 8e       	std	Z+25, r15	; 0x19
     ec8:	6b 34       	cpi	r22, 0x4B	; 75
     eca:	97 2d       	mov	r25, r7
     ecc:	c0 5a       	subi	r28, 0xA0	; 160
     ece:	3d 47       	sbci	r19, 0x7D	; 125
     ed0:	f2 8e       	std	Z+26, r15	; 0x1a
     ed2:	c0 1a       	sub	r12, r16
     ed4:	69 b5       	in	r22, 0x29	; 41
     ed6:	0e 7b       	andi	r16, 0xBE	; 190
     ed8:	a4 d1       	rcall	.+840    	; 0x1222 <des_test+0x2>
     eda:	58 c6       	rjmp	.+3248   	; 0x1b8c <test_sha2+0xf6>
     edc:	93 2f       	mov	r25, r19
     ede:	d8 a1       	ldd	r29, Y+32	; 0x20
     ee0:	3f 42       	sbci	r19, 0x2F	; 47
     ee2:	b6 7c       	andi	r27, 0xC6	; 198
     ee4:	05 e9       	ldi	r16, 0x95	; 149
     ee6:	a0 9e       	mul	r10, r16
     ee8:	63 f5       	brvc	.+88     	; 0xf42 <sTable+0x9c>
     eea:	1d c7       	rjmp	.+3642   	; 0x1d26 <sha_test+0x7c>
     eec:	b4 28       	or	r11, r4
     eee:	d7 09       	sbc	r29, r7
     ef0:	34 6a       	ori	r19, 0xA4	; 164
     ef2:	28 5e       	subi	r18, 0xE8	; 232
     ef4:	cb f1       	brvs	.+114    	; 0xf68 <sTable+0xc2>
     ef6:	d6 49       	sbci	r29, 0x96	; 150
     ef8:	8f 30       	cpi	r24, 0x0F	; 15
     efa:	b1 2c       	mov	r11, r1
     efc:	5a e7       	ldi	r21, 0x7A	; 122
     efe:	1a d0       	rcall	.+52     	; 0xf34 <sTable+0x8e>
     f00:	69 87       	std	Y+9, r22	; 0x09
     f02:	4f e3       	ldi	r20, 0x3F	; 63
     f04:	b5 2c       	mov	r11, r5
     f06:	7d e3       	ldi	r23, 0x3D	; 61
     f08:	06 9a       	sbi	0x00, 6	; 0
     f0a:	12 85       	ldd	r17, Z+10	; 0x0a
     f0c:	bc 4f       	sbci	r27, 0xFC	; 252
     f0e:	d8 b5       	in	r29, 0x28	; 40
     f10:	6f 03       	fmul	r22, r23
     f12:	47 2c       	mov	r4, r7
     f14:	1a e9       	ldi	r17, 0x9A	; 154
     f16:	a6 90       	elpm	r10, Z+
     f18:	cb 7d       	andi	r28, 0xDB	; 219
     f1a:	f1 3e       	cpi	r31, 0xE1	; 225
     f1c:	52 84       	ldd	r5, Z+10	; 0x0a
     f1e:	3f 06       	cpc	r3, r31
     f20:	a1 d8       	rcall	.-3774   	; 0x64 <__SREG__+0x25>
     f22:	94 5b       	subi	r25, 0xB4	; 180
     f24:	c7 2e       	mov	r12, r23
     f26:	2c 41       	sbci	r18, 0x1C	; 28
     f28:	7a b6       	in	r7, 0x3a	; 58
     f2a:	85 3f       	cpi	r24, 0xF5	; 245
     f2c:	d0 e9       	ldi	r29, 0x90	; 144
     f2e:	eb 2c       	mov	r14, r11
     f30:	47 d1       	rcall	.+654    	; 0x11c0 <.do_copy_data_loop+0x2>
     f32:	50 fa       	bst	r5, 0
     f34:	39 86       	std	Y+9, r3	; 0x09
     f36:	42 1b       	sub	r20, r18
     f38:	ad 78       	andi	r26, 0x8D	; 141
     f3a:	f9 c5       	rjmp	.+3058   	; 0x1b2e <test_sha2+0x98>
     f3c:	63 0e       	add	r6, r19
     f3e:	b8 c7       	rjmp	.+3952   	; 0x1eb0 <test_md5_5+0x24>
     f40:	1e 2d       	mov	r17, r14
     f42:	6f 09       	sbc	r22, r15
     f44:	a4 53       	subi	r26, 0x34	; 52
     f46:	c1 af       	std	Z+57, r28	; 0x39
     f48:	92 68       	ori	r25, 0x82	; 130
     f4a:	0d 34       	cpi	r16, 0x4D	; 77
     f4c:	e7 5b       	subi	r30, 0xB7	; 183
     f4e:	af 42       	sbci	r26, 0x2F	; 47
     f50:	7c 95 61 de 	jmp	0x5dbcc2	; 0x5dbcc2 <__data_load_end+0x5d6086>
     f54:	0b 38       	cpi	r16, 0x8B	; 139
     f56:	9e f5       	brtc	.+102    	; 0xfbe <AES_Flash_SBox+0x18>
     f58:	28 c3       	rjmp	.+1616   	; 0x15aa <rsa_test+0x268>
     f5a:	70 4a       	sbci	r23, 0xA0	; 160
     f5c:	1d b6       	in	r1, 0x3d	; 61
     f5e:	43 2c       	mov	r4, r3
     f60:	95 fa       	bst	r9, 5
     f62:	be 17       	cp	r27, r30
     f64:	60 8d       	ldd	r22, Z+24	; 0x18
     f66:	4b 2e       	mov	r4, r27
     f68:	f0 8d       	ldd	r31, Z+24	; 0x18
     f6a:	3c 97       	sbiw	r30, 0x0c	; 12
     f6c:	5a 61       	ori	r21, 0x1A	; 26
     f6e:	d0 b7       	in	r29, 0x30	; 48
     f70:	49 1a       	sub	r4, r25
     f72:	e3 5c       	subi	r30, 0xC3	; 195
     f74:	2f 86       	std	Y+15, r2	; 0x0f
     f76:	14 bd       	out	0x24, r17	; 36
     f78:	c3 7e       	andi	r28, 0xE3	; 227
     f7a:	af 68       	ori	r26, 0x8F	; 143
     f7c:	05 92       	.word	0x9205	; ????
     f7e:	6b d8       	rcall	.-3882   	; 0x56 <__SREG__+0x17>
     f80:	14 a7       	std	Z+44, r17	; 0x2c
     f82:	95 0f       	add	r25, r21
     f84:	e2 3c       	cpi	r30, 0xC2	; 194
     f86:	d2 84       	ldd	r13, Z+10	; 0x0a
     f88:	6f b1       	in	r22, 0x0f	; 15
     f8a:	a9 3e       	cpi	r26, 0xE9	; 233
     f8c:	50 c7       	rjmp	.+3744   	; 0x1e2e <sha_test+0x184>
     f8e:	1f d8       	rcall	.-4034   	; 0xffffffce <__eeprom_end+0xff7effce>
     f90:	a3 74       	andi	r26, 0x43	; 67
     f92:	c5 6b       	ori	r28, 0xB5	; 181
     f94:	0e 92       	st	-X, r0
     f96:	7b 41       	sbci	r23, 0x1B	; 27
     f98:	9c e2       	ldi	r25, 0x2C	; 44
     f9a:	06 ad       	ldd	r16, Z+62	; 0x3e
     f9c:	f3 58       	subi	r31, 0x83	; 131
     f9e:	21 e7       	ldi	r18, 0x71	; 113
     fa0:	4a 8d       	ldd	r20, Y+26	; 0x1a
     fa2:	fc 90       	ld	r15, X
     fa4:	35 6b       	ori	r19, 0xB5	; 181

00000fa6 <AES_Flash_SBox>:
     fa6:	63 7c       	andi	r22, 0xC3	; 195
     fa8:	77 7b       	andi	r23, 0xB7	; 183
     faa:	f2 6b       	ori	r31, 0xB2	; 178
     fac:	6f c5       	rjmp	.+2782   	; 0x1a8c <test_sha3+0x186>
     fae:	30 01       	movw	r6, r0
     fb0:	67 2b       	or	r22, r23
     fb2:	fe d7       	rcall	.+4092   	; 0x1fb0 <test_md5_3+0x48>
     fb4:	ab 76       	andi	r26, 0x6B	; 107
     fb6:	ca 82       	std	Y+2, r12	; 0x02
     fb8:	c9 7d       	andi	r28, 0xD9	; 217
     fba:	fa 59       	subi	r31, 0x9A	; 154
     fbc:	47 f0       	brie	.+16     	; 0xfce <AES_Flash_SBox+0x28>
     fbe:	ad d4       	rcall	.+2394   	; 0x191a <test_sha3+0x14>
     fc0:	a2 af       	std	Z+58, r26	; 0x3a
     fc2:	9c a4       	ldd	r9, Y+44	; 0x2c
     fc4:	72 c0       	rjmp	.+228    	; 0x10aa <AES_Flash_InvSBox+0x4>
     fc6:	b7 fd       	sbrc	r27, 7
     fc8:	93 26       	eor	r9, r19
     fca:	36 3f       	cpi	r19, 0xF6	; 246
     fcc:	f7 cc       	rjmp	.-1554   	; 0x9bc <c_md5+0x4d>
     fce:	34 a5       	ldd	r19, Z+44	; 0x2c
     fd0:	e5 f1       	brhs	.+120    	; 0x104a <AES_Flash_SBox+0xa4>
     fd2:	71 d8       	rcall	.-3870   	; 0xb6 <__SREG__+0x77>
     fd4:	31 15       	cp	r19, r1
     fd6:	04 c7       	rjmp	.+3592   	; 0x1de0 <sha_test+0x136>
     fd8:	23 c3       	rjmp	.+1606   	; 0x1620 <rsa_test+0x2de>
     fda:	18 96       	adiw	r26, 0x08	; 8
     fdc:	05 9a       	sbi	0x00, 5	; 0
     fde:	07 12       	cpse	r0, r23
     fe0:	80 e2       	ldi	r24, 0x20	; 32
     fe2:	eb 27       	eor	r30, r27
     fe4:	b2 75       	andi	r27, 0x52	; 82
     fe6:	09 83       	std	Y+1, r16	; 0x01
     fe8:	2c 1a       	sub	r2, r28
     fea:	1b 6e       	ori	r17, 0xEB	; 235
     fec:	5a a0       	ldd	r5, Y+34	; 0x22
     fee:	52 3b       	cpi	r21, 0xB2	; 178
     ff0:	d6 b3       	in	r29, 0x16	; 22
     ff2:	29 e3       	ldi	r18, 0x39	; 57
     ff4:	2f 84       	ldd	r2, Y+15	; 0x0f
     ff6:	53 d1       	rcall	.+678    	; 0x129e <des_test+0x7e>
     ff8:	00 ed       	ldi	r16, 0xD0	; 208
     ffa:	20 fc       	sbrc	r2, 0
     ffc:	b1 5b       	subi	r27, 0xB1	; 177
     ffe:	6a cb       	rjmp	.-2348   	; 0x6d4 <public_key_flash>
    1000:	be 39       	cpi	r27, 0x9E	; 158
    1002:	4a 4c       	sbci	r20, 0xCA	; 202
    1004:	58 cf       	rjmp	.-336    	; 0xeb6 <sTable+0x10>
    1006:	d0 ef       	ldi	r29, 0xF0	; 240
    1008:	aa fb       	.word	0xfbaa	; ????
    100a:	43 4d       	sbci	r20, 0xD3	; 211
    100c:	33 85       	ldd	r19, Z+11	; 0x0b
    100e:	45 f9       	bld	r20, 5
    1010:	02 7f       	andi	r16, 0xF2	; 242
    1012:	50 3c       	cpi	r21, 0xC0	; 192
    1014:	9f a8       	ldd	r9, Y+55	; 0x37
    1016:	51 a3       	std	Z+33, r21	; 0x21
    1018:	40 8f       	std	Z+24, r20	; 0x18
    101a:	92 9d       	mul	r25, r2
    101c:	38 f5       	brcc	.+78     	; 0x106c <AES_Flash_SBox+0xc6>
    101e:	bc b6       	in	r11, 0x3c	; 60
    1020:	da 21       	and	r29, r10
    1022:	10 ff       	sbrs	r17, 0
    1024:	f3 d2       	rcall	.+1510   	; 0x160c <rsa_test+0x2ca>
    1026:	cd 0c       	add	r12, r13
    1028:	13 ec       	ldi	r17, 0xC3	; 195
    102a:	5f 97       	sbiw	r26, 0x1f	; 31
    102c:	44 17       	cp	r20, r20
    102e:	c4 a7       	std	Z+44, r28	; 0x2c
    1030:	7e 3d       	cpi	r23, 0xDE	; 222
    1032:	64 5d       	subi	r22, 0xD4	; 212
    1034:	19 73       	andi	r17, 0x39	; 57
    1036:	60 81       	ld	r22, Z
    1038:	4f dc       	rcall	.-1890   	; 0x8d8 <c_sha+0x4a>
    103a:	22 2a       	or	r2, r18
    103c:	90 88       	ldd	r9, Z+16	; 0x10
    103e:	46 ee       	ldi	r20, 0xE6	; 230
    1040:	b8 14       	cp	r11, r8
    1042:	de 5e       	subi	r29, 0xEE	; 238
    1044:	0b db       	rcall	.-2538   	; 0x65c <crypt2048e3+0xc8>
    1046:	e0 32       	cpi	r30, 0x20	; 32
    1048:	3a 0a       	sbc	r3, r26
    104a:	49 06       	cpc	r4, r25
    104c:	24 5c       	subi	r18, 0xC4	; 196
    104e:	c2 d3       	rcall	.+1924   	; 0x17d4 <test_sha5+0x8e>
    1050:	ac 62       	ori	r26, 0x2C	; 44
    1052:	91 95       	neg	r25
    1054:	e4 79       	andi	r30, 0x94	; 148
    1056:	e7 c8       	rjmp	.-3634   	; 0x226 <private1024e3+0x12>
    1058:	37 6d       	ori	r19, 0xD7	; 215
    105a:	8d d5       	rcall	.+2842   	; 0x1b76 <test_sha2+0xe0>
    105c:	4e a9       	ldd	r20, Y+54	; 0x36
    105e:	6c 56       	subi	r22, 0x6C	; 108
    1060:	f4 ea       	ldi	r31, 0xA4	; 164
    1062:	65 7a       	andi	r22, 0xA5	; 165
    1064:	ae 08       	sbc	r10, r14
    1066:	ba 78       	andi	r27, 0x8A	; 138
    1068:	25 2e       	mov	r2, r21
    106a:	1c a6       	std	Y+44, r1	; 0x2c
    106c:	b4 c6       	rjmp	.+3432   	; 0x1dd6 <sha_test+0x12c>
    106e:	e8 dd       	rcall	.-1072   	; 0xc40 <MD5IndexTransform+0x12>
    1070:	74 1f       	adc	r23, r20
    1072:	4b bd       	out	0x2b, r20	; 43
    1074:	8b 8a       	std	Y+19, r8	; 0x13
    1076:	70 3e       	cpi	r23, 0xE0	; 224
    1078:	b5 66       	ori	r27, 0x65	; 101
    107a:	48 03       	fmul	r20, r16
    107c:	f6 0e       	add	r15, r22
    107e:	61 35       	cpi	r22, 0x51	; 81
    1080:	57 b9       	out	0x07, r21	; 7
    1082:	86 c1       	rjmp	.+780    	; 0x1390 <rsa_test+0x4e>
    1084:	1d 9e       	mul	r1, r29
    1086:	e1 f8       	bld	r14, 1
    1088:	98 11       	cpse	r25, r8
    108a:	69 d9       	rcall	.-3374   	; 0x35e <crypt1024e3+0x4a>
    108c:	8e 94 9b 1e 	call	0x203d36	; 0x203d36 <__data_load_end+0x1fe0fa>
    1090:	87 e9       	ldi	r24, 0x97	; 151
    1092:	ce 55       	subi	r28, 0x5E	; 94
    1094:	28 df       	rcall	.-432    	; 0xee6 <sTable+0x40>
    1096:	8c a1       	ldd	r24, Y+36	; 0x24
    1098:	89 0d       	add	r24, r9
    109a:	bf e6       	ldi	r27, 0x6F	; 111
    109c:	42 68       	ori	r20, 0x82	; 130
    109e:	41 99       	sbic	0x08, 1	; 8
    10a0:	2d 0f       	add	r18, r29
    10a2:	b0 54       	subi	r27, 0x40	; 64
    10a4:	bb 16       	cp	r11, r27

000010a6 <AES_Flash_InvSBox>:
    10a6:	52 09       	sbc	r21, r2
    10a8:	6a d5       	rcall	.+2772   	; 0x1b7e <test_sha2+0xe8>
    10aa:	30 36       	cpi	r19, 0x60	; 96
    10ac:	a5 38       	cpi	r26, 0x85	; 133
    10ae:	bf 40       	sbci	r27, 0x0F	; 15
    10b0:	a3 9e       	mul	r10, r19
    10b2:	81 f3       	breq	.-32     	; 0x1094 <AES_Flash_SBox+0xee>
    10b4:	d7 fb       	bst	r29, 7
    10b6:	7c e3       	ldi	r23, 0x3C	; 60
    10b8:	39 82       	std	Y+1, r3	; 0x01
    10ba:	9b 2f       	mov	r25, r27
    10bc:	ff 87       	std	Y+15, r31	; 0x0f
    10be:	34 8e       	std	Z+28, r3	; 0x1c
    10c0:	43 44       	sbci	r20, 0x43	; 67
    10c2:	c4 de       	rcall	.-632    	; 0xe4c <T7_1_2+0xe>
    10c4:	e9 cb       	rjmp	.-2094   	; 0x898 <c_sha+0xa>
    10c6:	54 7b       	andi	r21, 0xB4	; 180
    10c8:	94 32       	cpi	r25, 0x24	; 36
    10ca:	a6 c2       	rjmp	.+1356   	; 0x1618 <rsa_test+0x2d6>
    10cc:	23 3d       	cpi	r18, 0xD3	; 211
    10ce:	ee 4c       	sbci	r30, 0xCE	; 206
    10d0:	95 0b       	sbc	r25, r21
    10d2:	42 fa       	bst	r4, 2
    10d4:	c3 4e       	sbci	r28, 0xE3	; 227
    10d6:	08 2e       	mov	r0, r24
    10d8:	a1 66       	ori	r26, 0x61	; 97
    10da:	28 d9       	rcall	.-3504   	; 0x32c <crypt1024e3+0x18>
    10dc:	24 b2       	in	r2, 0x14	; 20
    10de:	76 5b       	subi	r23, 0xB6	; 182
    10e0:	a2 49       	sbci	r26, 0x92	; 146
    10e2:	6d 8b       	std	Y+21, r22	; 0x15
    10e4:	d1 25       	eor	r29, r1
    10e6:	72 f8       	bld	r7, 2
    10e8:	f6 64       	ori	r31, 0x46	; 70
    10ea:	86 68       	ori	r24, 0x86	; 134
    10ec:	98 16       	cp	r9, r24
    10ee:	d4 a4       	ldd	r13, Z+44	; 0x2c
    10f0:	5c cc       	rjmp	.-1864   	; 0x9aa <c_md5+0x3b>
    10f2:	5d 65       	ori	r21, 0x5D	; 93
    10f4:	b6 92       	.word	0x92b6	; ????
    10f6:	6c 70       	andi	r22, 0x0C	; 12
    10f8:	48 50       	subi	r20, 0x08	; 8
    10fa:	fd ed       	ldi	r31, 0xDD	; 221
    10fc:	b9 da       	rcall	.-2702   	; 0x670 <crypt2048e3+0xdc>
    10fe:	5e 15       	cp	r21, r14
    1100:	46 57       	subi	r20, 0x76	; 118
    1102:	a7 8d       	ldd	r26, Z+31	; 0x1f
    1104:	9d 84       	ldd	r9, Y+13	; 0x0d
    1106:	90 d8       	rcall	.-3808   	; 0x228 <private1024e3+0x14>
    1108:	ab 00       	.word	0x00ab	; ????
    110a:	8c bc       	out	0x2c, r8	; 44
    110c:	d3 0a       	sbc	r13, r19
    110e:	f7 e4       	ldi	r31, 0x47	; 71
    1110:	58 05       	cpc	r21, r8
    1112:	b8 b3       	in	r27, 0x18	; 24
    1114:	45 06       	cpc	r4, r21
    1116:	d0 2c       	mov	r13, r0
    1118:	1e 8f       	std	Y+30, r17	; 0x1e
    111a:	ca 3f       	cpi	r28, 0xFA	; 250
    111c:	0f 02       	muls	r16, r31
    111e:	c1 af       	std	Z+57, r28	; 0x39
    1120:	bd 03       	fmulsu	r19, r21
    1122:	01 13       	cpse	r16, r17
    1124:	8a 6b       	ori	r24, 0xBA	; 186
    1126:	3a 91       	ld	r19, -Y
    1128:	11 41       	sbci	r17, 0x11	; 17
    112a:	4f 67       	ori	r20, 0x7F	; 127
    112c:	dc ea       	ldi	r29, 0xAC	; 172
    112e:	97 f2       	brie	.-92     	; 0x10d4 <AES_Flash_InvSBox+0x2e>
    1130:	cf ce       	rjmp	.-610    	; 0xed0 <sTable+0x2a>
    1132:	f0 b4       	in	r15, 0x20	; 32
    1134:	e6 73       	andi	r30, 0x36	; 54
    1136:	96 ac       	ldd	r9, Z+62	; 0x3e
    1138:	74 22       	and	r7, r20
    113a:	e7 ad       	ldd	r30, Z+63	; 0x3f
    113c:	35 85       	ldd	r19, Z+13	; 0x0d
    113e:	e2 f9       	bld	r30, 2
    1140:	37 e8       	ldi	r19, 0x87	; 135
    1142:	1c 75       	andi	r17, 0x5C	; 92
    1144:	df 6e       	ori	r29, 0xEF	; 239
    1146:	47 f1       	brie	.+80     	; 0x1198 <AES_Flash_InvSBox+0xf2>
    1148:	1a 71       	andi	r17, 0x1A	; 26
    114a:	1d 29       	or	r17, r13
    114c:	c5 89       	ldd	r28, Z+21	; 0x15
    114e:	6f b7       	in	r22, 0x3f	; 63
    1150:	62 0e       	add	r6, r18
    1152:	aa 18       	sub	r10, r10
    1154:	be 1b       	sub	r27, r30
    1156:	fc 56       	subi	r31, 0x6C	; 108
    1158:	3e 4b       	sbci	r19, 0xBE	; 190
    115a:	c6 d2       	rcall	.+1420   	; 0x16e8 <rsa_test+0x3a6>
    115c:	79 20       	and	r7, r9
    115e:	9a db       	rcall	.-2252   	; 0x894 <c_sha+0x6>
    1160:	c0 fe       	sbrs	r12, 0
    1162:	78 cd       	rjmp	.-1296   	; 0xc54 <MD5IndexTransform+0x26>
    1164:	5a f4       	brpl	.+22     	; 0x117c <AES_Flash_InvSBox+0xd6>
    1166:	1f dd       	rcall	.-1474   	; 0xba6 <MD5DataTransform+0xb8>
    1168:	a8 33       	cpi	r26, 0x38	; 56
    116a:	88 07       	cpc	r24, r24
    116c:	c7 31       	cpi	r28, 0x17	; 23
    116e:	b1 12       	cpse	r11, r17
    1170:	10 59       	subi	r17, 0x90	; 144
    1172:	27 80       	ldd	r2, Z+7	; 0x07
    1174:	ec 5f       	subi	r30, 0xFC	; 252
    1176:	60 51       	subi	r22, 0x10	; 16
    1178:	7f a9       	ldd	r23, Y+55	; 0x37
    117a:	19 b5       	in	r17, 0x29	; 41
    117c:	4a 0d       	add	r20, r10
    117e:	2d e5       	ldi	r18, 0x5D	; 93
    1180:	7a 9f       	mul	r23, r26
    1182:	93 c9       	rjmp	.-3290   	; 0x4aa <private2048e3+0x16>
    1184:	9c ef       	ldi	r25, 0xFC	; 252
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	3b 4d       	sbci	r19, 0xDB	; 219
    118a:	ae 2a       	or	r10, r30
    118c:	f5 b0       	in	r15, 0x05	; 5
    118e:	c8 eb       	ldi	r28, 0xB8	; 184
    1190:	bb 3c       	cpi	r27, 0xCB	; 203
    1192:	83 53       	subi	r24, 0x33	; 51
    1194:	99 61       	ori	r25, 0x19	; 25
    1196:	17 2b       	or	r17, r23
    1198:	04 7e       	andi	r16, 0xE4	; 228
    119a:	ba 77       	andi	r27, 0x7A	; 122
    119c:	d6 26       	eor	r13, r22
    119e:	e1 69       	ori	r30, 0x91	; 145
    11a0:	14 63       	ori	r17, 0x34	; 52
    11a2:	55 21       	and	r21, r5
    11a4:	0c 7d       	andi	r16, 0xDC	; 220

000011a6 <__ctors_end>:
    11a6:	11 24       	eor	r1, r1
    11a8:	1f be       	out	0x3f, r1	; 63
    11aa:	cf ef       	ldi	r28, 0xFF	; 255
    11ac:	d1 e2       	ldi	r29, 0x21	; 33
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	cd bf       	out	0x3d, r28	; 61

000011b2 <__do_copy_data>:
    11b2:	15 e0       	ldi	r17, 0x05	; 5
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	b2 e0       	ldi	r27, 0x02	; 2
    11b8:	e6 e2       	ldi	r30, 0x26	; 38
    11ba:	f9 e5       	ldi	r31, 0x59	; 89
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <.do_copy_data_start>

000011be <.do_copy_data_loop>:
    11be:	05 90       	lpm	r0, Z+
    11c0:	0d 92       	st	X+, r0

000011c2 <.do_copy_data_start>:
    11c2:	a6 31       	cpi	r26, 0x16	; 22
    11c4:	b1 07       	cpc	r27, r17
    11c6:	d9 f7       	brne	.-10     	; 0x11be <.do_copy_data_loop>

000011c8 <__do_clear_bss>:
    11c8:	1e e0       	ldi	r17, 0x0E	; 14
    11ca:	a6 e1       	ldi	r26, 0x16	; 22
    11cc:	b5 e0       	ldi	r27, 0x05	; 5
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <.do_clear_bss_start>

000011d0 <.do_clear_bss_loop>:
    11d0:	1d 92       	st	X+, r1

000011d2 <.do_clear_bss_start>:
    11d2:	aa 3a       	cpi	r26, 0xAA	; 170
    11d4:	b1 07       	cpc	r27, r17
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <.do_clear_bss_loop>
    11d8:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <main>
    11dc:	0c 94 91 2c 	jmp	0x5922	; 0x5922 <_exit>

000011e0 <__bad_interrupt>:
    11e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000011e4 <main>:
unsigned char sha_test(void);
unsigned char md5_test(void);
unsigned char SkipJack_test(void); 
unsigned char AES_test(void); 
int main(void )
{
    11e4:	1f 93       	push	r17
unsigned char ret=0;
	if(md5_test()) ret|=0x01;
    11e6:	0e 94 cb 10 	call	0x2196	; 0x2196 <md5_test>
    11ea:	81 11       	cpse	r24, r1
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	18 2f       	mov	r17, r24
	if(SkipJack_test())ret|=0x10;
    11f0:	0e 94 40 11 	call	0x2280	; 0x2280 <SkipJack_test>
    11f4:	81 11       	cpse	r24, r1
    11f6:	10 61       	ori	r17, 0x10	; 16
	if(AES_test())ret|=0x20;
    11f8:	0e 94 c5 14 	call	0x298a	; 0x298a <AES_test>
    11fc:	81 11       	cpse	r24, r1
    11fe:	10 62       	ori	r17, 0x20	; 32
	if(sha_test()) ret|=0x02;	
    1200:	0e 94 55 0e 	call	0x1caa	; 0x1caa <sha_test>
    1204:	81 11       	cpse	r24, r1
    1206:	12 60       	ori	r17, 0x02	; 2
	if(des_test()) ret|=0x04;
    1208:	0e 94 10 09 	call	0x1220	; 0x1220 <des_test>
    120c:	81 11       	cpse	r24, r1
    120e:	14 60       	ori	r17, 0x04	; 4
	if(rsa_test()) ret|=0x08;
    1210:	0e 94 a1 09 	call	0x1342	; 0x1342 <rsa_test>
    1214:	81 11       	cpse	r24, r1
    1216:	18 60       	ori	r17, 0x08	; 8
	
	return ret;
}
    1218:	81 2f       	mov	r24, r17
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <des_test>:
unsigned char Triple_DesPlain[8];
unsigned char Triple_DesCipher[8];


unsigned char des_test(void)
{
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
unsigned char ret=0;

	memcpy_P(DesKey,DesCryptographicKey, sizeof(DesKey));
    122a:	48 e0       	ldi	r20, 0x08	; 8
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	64 ee       	ldi	r22, 0xE4	; 228
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	86 e4       	ldi	r24, 0x46	; 70
    1234:	95 e0       	ldi	r25, 0x05	; 5
    1236:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(DesPlain,DesPLAINTEXT, sizeof(DesPlain));
    123a:	c6 e1       	ldi	r28, 0x16	; 22
    123c:	d5 e0       	ldi	r29, 0x05	; 5
    123e:	48 e0       	ldi	r20, 0x08	; 8
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	6c ee       	ldi	r22, 0xEC	; 236
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	ce 01       	movw	r24, r28
    1248:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memset(DesCipher,0,sizeof(DesCipher));
    124c:	0e e1       	ldi	r16, 0x1E	; 30
    124e:	15 e0       	ldi	r17, 0x05	; 5
    1250:	88 e0       	ldi	r24, 0x08	; 8
    1252:	f8 01       	movw	r30, r16
    1254:	11 92       	st	Z+, r1
    1256:	8a 95       	dec	r24
    1258:	e9 f7       	brne	.-6      	; 0x1254 <des_test+0x34>

	Des_Encrypt(DesPlain,DesCipher,DesKey);
    125a:	46 e4       	ldi	r20, 0x46	; 70
    125c:	55 e0       	ldi	r21, 0x05	; 5
    125e:	b8 01       	movw	r22, r16
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 32 19 	call	0x3264	; 0x3264 <Des_Encrypt>
	if(memcmp_P(DesCipher,DesCIPHERTEXT,sizeof(DesCipher)))
    1266:	48 e0       	ldi	r20, 0x08	; 8
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	64 ef       	ldi	r22, 0xF4	; 244
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	c8 01       	movw	r24, r16
    1270:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    1274:	ff 24       	eor	r15, r15
    1276:	89 2b       	or	r24, r25
    1278:	11 f0       	breq	.+4      	; 0x127e <des_test+0x5e>
    127a:	ff 24       	eor	r15, r15
    127c:	f3 94       	inc	r15
		{
			ret|=0x01; // return the error 
		}
	memset(DesPlain,0,sizeof(DesPlain));
    127e:	88 e0       	ldi	r24, 0x08	; 8
    1280:	fe 01       	movw	r30, r28
    1282:	11 92       	st	Z+, r1
    1284:	8a 95       	dec	r24
    1286:	e9 f7       	brne	.-6      	; 0x1282 <des_test+0x62>
	Des_Decrypt(DesCipher,DesPlain,DesKey);
    1288:	46 e4       	ldi	r20, 0x46	; 70
    128a:	55 e0       	ldi	r21, 0x05	; 5
    128c:	66 e1       	ldi	r22, 0x16	; 22
    128e:	75 e0       	ldi	r23, 0x05	; 5
    1290:	8e e1       	ldi	r24, 0x1E	; 30
    1292:	95 e0       	ldi	r25, 0x05	; 5
    1294:	0e 94 03 19 	call	0x3206	; 0x3206 <Des_Decrypt>
	if(memcmp_P(DesPlain,DesPLAINTEXT,sizeof(DesPlain)))
    1298:	48 e0       	ldi	r20, 0x08	; 8
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	6c ee       	ldi	r22, 0xEC	; 236
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	86 e1       	ldi	r24, 0x16	; 22
    12a2:	95 e0       	ldi	r25, 0x05	; 5
    12a4:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    12a8:	89 2b       	or	r24, r25
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <des_test+0x90>
		{
			ret|=0x02; // return the error 
    12ac:	f2 e0       	ldi	r31, 0x02	; 2
    12ae:	ff 2a       	or	r15, r31
		}
	memcpy_P(Triple_DesKey,Triple_DesCryptographicKey, sizeof(Triple_DesKey));
    12b0:	40 e1       	ldi	r20, 0x10	; 16
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	6c ef       	ldi	r22, 0xFC	; 252
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	8e e2       	ldi	r24, 0x2E	; 46
    12ba:	95 e0       	ldi	r25, 0x05	; 5
    12bc:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(Triple_DesPlain,Triple_DesPLAINTEXT, sizeof(Triple_DesPlain));
    12c0:	ce e3       	ldi	r28, 0x3E	; 62
    12c2:	d5 e0       	ldi	r29, 0x05	; 5
    12c4:	48 e0       	ldi	r20, 0x08	; 8
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	6c e0       	ldi	r22, 0x0C	; 12
    12ca:	71 e0       	ldi	r23, 0x01	; 1
    12cc:	ce 01       	movw	r24, r28
    12ce:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memset(Triple_DesCipher,0,sizeof(Triple_DesCipher));
    12d2:	06 e2       	ldi	r16, 0x26	; 38
    12d4:	15 e0       	ldi	r17, 0x05	; 5
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	f8 01       	movw	r30, r16
    12da:	11 92       	st	Z+, r1
    12dc:	8a 95       	dec	r24
    12de:	e9 f7       	brne	.-6      	; 0x12da <des_test+0xba>
	Triple_Des_Encrypt(Triple_DesPlain,Triple_DesCipher,Triple_DesKey);
    12e0:	4e e2       	ldi	r20, 0x2E	; 46
    12e2:	55 e0       	ldi	r21, 0x05	; 5
    12e4:	b8 01       	movw	r22, r16
    12e6:	ce 01       	movw	r24, r28
    12e8:	0e 94 ae 19 	call	0x335c	; 0x335c <Triple_Des_Encrypt>
	if(memcmp_P(Triple_DesCipher,Triple_DesCIPHERTEXT,sizeof(Triple_DesCipher)))
    12ec:	48 e0       	ldi	r20, 0x08	; 8
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	64 e1       	ldi	r22, 0x14	; 20
    12f2:	71 e0       	ldi	r23, 0x01	; 1
    12f4:	c8 01       	movw	r24, r16
    12f6:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    12fa:	89 2b       	or	r24, r25
    12fc:	11 f0       	breq	.+4      	; 0x1302 <des_test+0xe2>
		{
			ret|=0x04; // return the error 
    12fe:	f4 e0       	ldi	r31, 0x04	; 4
    1300:	ff 2a       	or	r15, r31
		}
	memset(Triple_DesPlain,0,sizeof(Triple_DesPlain));
    1302:	88 e0       	ldi	r24, 0x08	; 8
    1304:	fe 01       	movw	r30, r28
    1306:	11 92       	st	Z+, r1
    1308:	8a 95       	dec	r24
    130a:	e9 f7       	brne	.-6      	; 0x1306 <des_test+0xe6>
	Triple_Des_Decrypt(Triple_DesCipher,Triple_DesPlain,Triple_DesKey);
    130c:	4e e2       	ldi	r20, 0x2E	; 46
    130e:	55 e0       	ldi	r21, 0x05	; 5
    1310:	6e e3       	ldi	r22, 0x3E	; 62
    1312:	75 e0       	ldi	r23, 0x05	; 5
    1314:	86 e2       	ldi	r24, 0x26	; 38
    1316:	95 e0       	ldi	r25, 0x05	; 5
    1318:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Triple_Des_Decrypt>
	if(memcmp_P(Triple_DesPlain,Triple_DesPLAINTEXT,sizeof(Triple_DesPlain)))
    131c:	48 e0       	ldi	r20, 0x08	; 8
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	6c e0       	ldi	r22, 0x0C	; 12
    1322:	71 e0       	ldi	r23, 0x01	; 1
    1324:	8e e3       	ldi	r24, 0x3E	; 62
    1326:	95 e0       	ldi	r25, 0x05	; 5
    1328:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    132c:	89 2b       	or	r24, r25
    132e:	11 f0       	breq	.+4      	; 0x1334 <des_test+0x114>
		{
			ret|=0x08; // return the error 
    1330:	f8 e0       	ldi	r31, 0x08	; 8
    1332:	ff 2a       	or	r15, r31
		}
	return ret;
}
    1334:	8f 2d       	mov	r24, r15
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	08 95       	ret

00001342 <rsa_test>:
unsigned char rsa_tmp[3*RSA_MAX_LEN];
#define rsa_s (rsa_tmp+(2*RSA_MAX_LEN))
//unsigned char rsa_s[RSALEN];

unsigned char rsa_test(void)
{
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
unsigned char ret=0;

/* (plaintext^private_key)%public_key = ciphertext */
	memcpy_P(cryptdata	,CONSTANT_DATA		,sizeof(CONSTANT_DATA));
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	51 e0       	ldi	r21, 0x01	; 1
    1352:	64 e1       	ldi	r22, 0x14	; 20
    1354:	77 e0       	ldi	r23, 0x07	; 7
    1356:	80 e5       	ldi	r24, 0x50	; 80
    1358:	96 e0       	ldi	r25, 0x06	; 6
    135a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	
	rsa_encrypt_P(sizeof(public64e3),cryptdata ,private64e3,public64e3,rsa_s,rsa_tmp);
    135e:	80 e5       	ldi	r24, 0x50	; 80
    1360:	e8 2e       	mov	r14, r24
    1362:	88 e0       	ldi	r24, 0x08	; 8
    1364:	f8 2e       	mov	r15, r24
    1366:	00 e5       	ldi	r16, 0x50	; 80
    1368:	1a e0       	ldi	r17, 0x0A	; 10
    136a:	24 e2       	ldi	r18, 0x24	; 36
    136c:	31 e0       	ldi	r19, 0x01	; 1
    136e:	4c e1       	ldi	r20, 0x1C	; 28
    1370:	51 e0       	ldi	r21, 0x01	; 1
    1372:	60 e5       	ldi	r22, 0x50	; 80
    1374:	76 e0       	ldi	r23, 0x06	; 6
    1376:	88 e0       	ldi	r24, 0x08	; 8
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <rsa_encrypt_P>
	if(memcmp_P(cryptdata,crypt64e3,sizeof(crypt64e3)))
    137e:	48 e0       	ldi	r20, 0x08	; 8
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	6c e2       	ldi	r22, 0x2C	; 44
    1384:	71 e0       	ldi	r23, 0x01	; 1
    1386:	80 e5       	ldi	r24, 0x50	; 80
    1388:	96 e0       	ldi	r25, 0x06	; 6
    138a:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    138e:	89 2b       	or	r24, r25
    1390:	09 f4       	brne	.+2      	; 0x1394 <rsa_test+0x52>
    1392:	d5 c1       	rjmp	.+938    	; 0x173e <rsa_test+0x3fc>
    1394:	04 e0       	ldi	r16, 0x04	; 4
    1396:	c0 2e       	mov	r12, r16
    1398:	1c e0       	ldi	r17, 0x0C	; 12
    139a:	d1 2e       	mov	r13, r17
	{
		ret|=4;
	}
	memcpy_P(cryptdata,crypt64e3,sizeof(public64e3));
    139c:	48 e0       	ldi	r20, 0x08	; 8
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	6c e2       	ldi	r22, 0x2C	; 44
    13a2:	71 e0       	ldi	r23, 0x01	; 1
    13a4:	80 e5       	ldi	r24, 0x50	; 80
    13a6:	96 e0       	ldi	r25, 0x06	; 6
    13a8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	
/* (ciphertext^public_exponent)%public_key = plaintext */
 	public_exponent=3;
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	90 93 4f 06 	sts	0x064F, r25
    13b4:	80 93 4e 06 	sts	0x064E, r24
	
	rsa_decrypt_P(sizeof(public64e3),cryptdata,public_exponent,public64e3,rsa_s,rsa_tmp); 
    13b8:	a0 e5       	ldi	r26, 0x50	; 80
    13ba:	ea 2e       	mov	r14, r26
    13bc:	a8 e0       	ldi	r26, 0x08	; 8
    13be:	fa 2e       	mov	r15, r26
    13c0:	00 e5       	ldi	r16, 0x50	; 80
    13c2:	1a e0       	ldi	r17, 0x0A	; 10
    13c4:	24 e2       	ldi	r18, 0x24	; 36
    13c6:	31 e0       	ldi	r19, 0x01	; 1
    13c8:	43 e0       	ldi	r20, 0x03	; 3
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	60 e5       	ldi	r22, 0x50	; 80
    13ce:	76 e0       	ldi	r23, 0x06	; 6
    13d0:	88 e0       	ldi	r24, 0x08	; 8
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 5d 17 	call	0x2eba	; 0x2eba <rsa_decrypt_P>
	if(memcmp_P(cryptdata,CONSTANT_DATA,sizeof(public64e3)))
    13d8:	48 e0       	ldi	r20, 0x08	; 8
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	64 e1       	ldi	r22, 0x14	; 20
    13de:	77 e0       	ldi	r23, 0x07	; 7
    13e0:	80 e5       	ldi	r24, 0x50	; 80
    13e2:	96 e0       	ldi	r25, 0x06	; 6
    13e4:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    13e8:	89 2b       	or	r24, r25
    13ea:	09 f4       	brne	.+2      	; 0x13ee <rsa_test+0xac>
    13ec:	dc 2c       	mov	r13, r12
		ret|=8;
	}


/* (plaintext^private_key)%public_key = ciphertext */
	memcpy_P(cryptdata	,CONSTANT_DATA		,sizeof(CONSTANT_DATA));
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	51 e0       	ldi	r21, 0x01	; 1
    13f2:	64 e1       	ldi	r22, 0x14	; 20
    13f4:	77 e0       	ldi	r23, 0x07	; 7
    13f6:	80 e5       	ldi	r24, 0x50	; 80
    13f8:	96 e0       	ldi	r25, 0x06	; 6
    13fa:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(public_key	,public64e3			,sizeof(public64e3));
    13fe:	48 e0       	ldi	r20, 0x08	; 8
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	64 e2       	ldi	r22, 0x24	; 36
    1404:	71 e0       	ldi	r23, 0x01	; 1
    1406:	8e e4       	ldi	r24, 0x4E	; 78
    1408:	95 e0       	ldi	r25, 0x05	; 5
    140a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(private_key,private64e3		,sizeof(private64e3));
    140e:	48 e0       	ldi	r20, 0x08	; 8
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	6c e1       	ldi	r22, 0x1C	; 28
    1414:	71 e0       	ldi	r23, 0x01	; 1
    1416:	80 e5       	ldi	r24, 0x50	; 80
    1418:	97 e0       	ldi	r25, 0x07	; 7
    141a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>

	rsa_encrypt(sizeof(public64e3),cryptdata ,private_key,public_key,rsa_s,rsa_tmp);
    141e:	f0 e5       	ldi	r31, 0x50	; 80
    1420:	ef 2e       	mov	r14, r31
    1422:	f8 e0       	ldi	r31, 0x08	; 8
    1424:	ff 2e       	mov	r15, r31
    1426:	00 e5       	ldi	r16, 0x50	; 80
    1428:	1a e0       	ldi	r17, 0x0A	; 10
    142a:	2e e4       	ldi	r18, 0x4E	; 78
    142c:	35 e0       	ldi	r19, 0x05	; 5
    142e:	40 e5       	ldi	r20, 0x50	; 80
    1430:	57 e0       	ldi	r21, 0x07	; 7
    1432:	60 e5       	ldi	r22, 0x50	; 80
    1434:	76 e0       	ldi	r23, 0x06	; 6
    1436:	88 e0       	ldi	r24, 0x08	; 8
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <rsa_encrypt>
	if(memcmp_P(cryptdata,crypt64e3,sizeof(crypt64e3)))
    143e:	48 e0       	ldi	r20, 0x08	; 8
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	6c e2       	ldi	r22, 0x2C	; 44
    1444:	71 e0       	ldi	r23, 0x01	; 1
    1446:	80 e5       	ldi	r24, 0x50	; 80
    1448:	96 e0       	ldi	r25, 0x06	; 6
    144a:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    144e:	89 2b       	or	r24, r25
    1450:	11 f0       	breq	.+4      	; 0x1456 <rsa_test+0x114>
	{
		ret|=4;
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	d8 2a       	or	r13, r24
	}
	memcpy_P(cryptdata,crypt64e3,sizeof(public64e3));
    1456:	48 e0       	ldi	r20, 0x08	; 8
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	6c e2       	ldi	r22, 0x2C	; 44
    145c:	71 e0       	ldi	r23, 0x01	; 1
    145e:	80 e5       	ldi	r24, 0x50	; 80
    1460:	96 e0       	ldi	r25, 0x06	; 6
    1462:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	
/* (ciphertext^public_exponent)%public_key = plaintext */
 	public_exponent=3;
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	90 93 4f 06 	sts	0x064F, r25
    146e:	80 93 4e 06 	sts	0x064E, r24
	memcpy_P(public_key	,public64e3		,sizeof(public64e3));
    1472:	48 e0       	ldi	r20, 0x08	; 8
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	64 e2       	ldi	r22, 0x24	; 36
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	8e e4       	ldi	r24, 0x4E	; 78
    147c:	95 e0       	ldi	r25, 0x05	; 5
    147e:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	rsa_decrypt(sizeof(public64e3),cryptdata,public_exponent,public_key,rsa_s,rsa_tmp); 
    1482:	40 91 4e 06 	lds	r20, 0x064E
    1486:	50 91 4f 06 	lds	r21, 0x064F
    148a:	e0 e5       	ldi	r30, 0x50	; 80
    148c:	ee 2e       	mov	r14, r30
    148e:	e8 e0       	ldi	r30, 0x08	; 8
    1490:	fe 2e       	mov	r15, r30
    1492:	00 e5       	ldi	r16, 0x50	; 80
    1494:	1a e0       	ldi	r17, 0x0A	; 10
    1496:	2e e4       	ldi	r18, 0x4E	; 78
    1498:	35 e0       	ldi	r19, 0x05	; 5
    149a:	60 e5       	ldi	r22, 0x50	; 80
    149c:	76 e0       	ldi	r23, 0x06	; 6
    149e:	88 e0       	ldi	r24, 0x08	; 8
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <rsa_decrypt>
	if(memcmp_P(cryptdata,CONSTANT_DATA,sizeof(public64e3)))
    14a6:	48 e0       	ldi	r20, 0x08	; 8
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	64 e1       	ldi	r22, 0x14	; 20
    14ac:	77 e0       	ldi	r23, 0x07	; 7
    14ae:	80 e5       	ldi	r24, 0x50	; 80
    14b0:	96 e0       	ldi	r25, 0x06	; 6
    14b2:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    14b6:	89 2b       	or	r24, r25
    14b8:	11 f0       	breq	.+4      	; 0x14be <rsa_test+0x17c>
	{
		ret|=8;
    14ba:	88 e0       	ldi	r24, 0x08	; 8
    14bc:	d8 2a       	or	r13, r24
	}
	
/* (plaintext^private_key)%public_key = ciphertext */
	memcpy_P(cryptdata	,CONSTANT_DATA		,sizeof(CONSTANT_DATA));
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	51 e0       	ldi	r21, 0x01	; 1
    14c2:	64 e1       	ldi	r22, 0x14	; 20
    14c4:	77 e0       	ldi	r23, 0x07	; 7
    14c6:	80 e5       	ldi	r24, 0x50	; 80
    14c8:	96 e0       	ldi	r25, 0x06	; 6
    14ca:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(public_key	,public_key_flash	,sizeof(public_key_flash));
    14ce:	40 e4       	ldi	r20, 0x40	; 64
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	64 ed       	ldi	r22, 0xD4	; 212
    14d4:	76 e0       	ldi	r23, 0x06	; 6
    14d6:	8e e4       	ldi	r24, 0x4E	; 78
    14d8:	95 e0       	ldi	r25, 0x05	; 5
    14da:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(private_key,private_key_flash	,sizeof(private_key_flash));
    14de:	40 e4       	ldi	r20, 0x40	; 64
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	64 e9       	ldi	r22, 0x94	; 148
    14e4:	76 e0       	ldi	r23, 0x06	; 6
    14e6:	80 e5       	ldi	r24, 0x50	; 80
    14e8:	97 e0       	ldi	r25, 0x07	; 7
    14ea:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>

	rsa_encrypt(sizeof(public_key_flash),cryptdata ,private_key,public_key,rsa_s,rsa_tmp);
    14ee:	70 e5       	ldi	r23, 0x50	; 80
    14f0:	e7 2e       	mov	r14, r23
    14f2:	78 e0       	ldi	r23, 0x08	; 8
    14f4:	f7 2e       	mov	r15, r23
    14f6:	00 e5       	ldi	r16, 0x50	; 80
    14f8:	1a e0       	ldi	r17, 0x0A	; 10
    14fa:	2e e4       	ldi	r18, 0x4E	; 78
    14fc:	35 e0       	ldi	r19, 0x05	; 5
    14fe:	40 e5       	ldi	r20, 0x50	; 80
    1500:	57 e0       	ldi	r21, 0x07	; 7
    1502:	60 e5       	ldi	r22, 0x50	; 80
    1504:	76 e0       	ldi	r23, 0x06	; 6
    1506:	80 e4       	ldi	r24, 0x40	; 64
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <rsa_encrypt>
	if(memcmp_P(cryptdata,CRYPYT_DATA,sizeof(public_key_flash)))
    150e:	40 e4       	ldi	r20, 0x40	; 64
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	64 e1       	ldi	r22, 0x14	; 20
    1514:	78 e0       	ldi	r23, 0x08	; 8
    1516:	80 e5       	ldi	r24, 0x50	; 80
    1518:	96 e0       	ldi	r25, 0x06	; 6
    151a:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    151e:	89 2b       	or	r24, r25
    1520:	11 f0       	breq	.+4      	; 0x1526 <rsa_test+0x1e4>
	{
		ret|=1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	d8 2a       	or	r13, r24
	}
	memcpy_P(cryptdata,CRYPYT_DATA,sizeof(CRYPYT_DATA));
    1526:	40 e4       	ldi	r20, 0x40	; 64
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	64 e1       	ldi	r22, 0x14	; 20
    152c:	78 e0       	ldi	r23, 0x08	; 8
    152e:	80 e5       	ldi	r24, 0x50	; 80
    1530:	96 e0       	ldi	r25, 0x06	; 6
    1532:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>

/* (ciphertext^public_exponent)%public_key = plaintext */
 	public_exponent=3;
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	90 93 4f 06 	sts	0x064F, r25
    153e:	80 93 4e 06 	sts	0x064E, r24
	memcpy_P(public_key,public_key_flash,sizeof(public_key_flash));
    1542:	40 e4       	ldi	r20, 0x40	; 64
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	64 ed       	ldi	r22, 0xD4	; 212
    1548:	76 e0       	ldi	r23, 0x06	; 6
    154a:	8e e4       	ldi	r24, 0x4E	; 78
    154c:	95 e0       	ldi	r25, 0x05	; 5
    154e:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>

	rsa_decrypt(sizeof(public_key_flash),cryptdata,public_exponent,public_key,rsa_s,rsa_tmp); 
    1552:	40 91 4e 06 	lds	r20, 0x064E
    1556:	50 91 4f 06 	lds	r21, 0x064F
    155a:	60 e5       	ldi	r22, 0x50	; 80
    155c:	e6 2e       	mov	r14, r22
    155e:	68 e0       	ldi	r22, 0x08	; 8
    1560:	f6 2e       	mov	r15, r22
    1562:	00 e5       	ldi	r16, 0x50	; 80
    1564:	1a e0       	ldi	r17, 0x0A	; 10
    1566:	2e e4       	ldi	r18, 0x4E	; 78
    1568:	35 e0       	ldi	r19, 0x05	; 5
    156a:	60 e5       	ldi	r22, 0x50	; 80
    156c:	76 e0       	ldi	r23, 0x06	; 6
    156e:	80 e4       	ldi	r24, 0x40	; 64
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 39 15 	call	0x2a72	; 0x2a72 <rsa_decrypt>
	if(memcmp_P(cryptdata,CONSTANT_DATA,sizeof(public_key_flash)))
    1576:	40 e4       	ldi	r20, 0x40	; 64
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	64 e1       	ldi	r22, 0x14	; 20
    157c:	77 e0       	ldi	r23, 0x07	; 7
    157e:	80 e5       	ldi	r24, 0x50	; 80
    1580:	96 e0       	ldi	r25, 0x06	; 6
    1582:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    1586:	89 2b       	or	r24, r25
    1588:	11 f0       	breq	.+4      	; 0x158e <rsa_test+0x24c>
	{
		ret|=2;
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	d8 2a       	or	r13, r24
	}

/* (plaintext^private_key)%public_key = ciphertext */
	memcpy_P(cryptdata	,CONSTANT_DATA		,sizeof(CONSTANT_DATA));
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	51 e0       	ldi	r21, 0x01	; 1
    1592:	64 e1       	ldi	r22, 0x14	; 20
    1594:	77 e0       	ldi	r23, 0x07	; 7
    1596:	80 e5       	ldi	r24, 0x50	; 80
    1598:	96 e0       	ldi	r25, 0x06	; 6
    159a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(public_key	,public1024e3		,sizeof(public1024e3));
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	64 e9       	ldi	r22, 0x94	; 148
    15a4:	72 e0       	ldi	r23, 0x02	; 2
    15a6:	8e e4       	ldi	r24, 0x4E	; 78
    15a8:	95 e0       	ldi	r25, 0x05	; 5
    15aa:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(private_key,private1024e3		,sizeof(private1024e3));
    15ae:	40 e8       	ldi	r20, 0x80	; 128
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	64 e1       	ldi	r22, 0x14	; 20
    15b4:	72 e0       	ldi	r23, 0x02	; 2
    15b6:	80 e5       	ldi	r24, 0x50	; 80
    15b8:	97 e0       	ldi	r25, 0x07	; 7
    15ba:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>

	rsa_encrypt(sizeof(public1024e3),cryptdata ,private_key,public_key,rsa_s,rsa_tmp);
    15be:	30 e5       	ldi	r19, 0x50	; 80
    15c0:	e3 2e       	mov	r14, r19
    15c2:	38 e0       	ldi	r19, 0x08	; 8
    15c4:	f3 2e       	mov	r15, r19
    15c6:	00 e5       	ldi	r16, 0x50	; 80
    15c8:	1a e0       	ldi	r17, 0x0A	; 10
    15ca:	2e e4       	ldi	r18, 0x4E	; 78
    15cc:	35 e0       	ldi	r19, 0x05	; 5
    15ce:	40 e5       	ldi	r20, 0x50	; 80
    15d0:	57 e0       	ldi	r21, 0x07	; 7
    15d2:	60 e5       	ldi	r22, 0x50	; 80
    15d4:	76 e0       	ldi	r23, 0x06	; 6
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <rsa_encrypt>
	if(memcmp_P(cryptdata,crypt1024e3,sizeof(crypt1024e3)))
    15de:	40 e8       	ldi	r20, 0x80	; 128
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	64 e1       	ldi	r22, 0x14	; 20
    15e4:	73 e0       	ldi	r23, 0x03	; 3
    15e6:	80 e5       	ldi	r24, 0x50	; 80
    15e8:	96 e0       	ldi	r25, 0x06	; 6
    15ea:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    15ee:	89 2b       	or	r24, r25
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <rsa_test+0x2b4>
	{
		ret|=4;
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	d8 2a       	or	r13, r24
	}
	memcpy_P(cryptdata,crypt1024e3,sizeof(public1024e3));
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	64 e1       	ldi	r22, 0x14	; 20
    15fc:	73 e0       	ldi	r23, 0x03	; 3
    15fe:	80 e5       	ldi	r24, 0x50	; 80
    1600:	96 e0       	ldi	r25, 0x06	; 6
    1602:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	
/* (ciphertext^public_exponent)%public_key = plaintext */
 	public_exponent=3;
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	90 93 4f 06 	sts	0x064F, r25
    160e:	80 93 4e 06 	sts	0x064E, r24
	memcpy_P(public_key	,public1024e3		,sizeof(public1024e3));
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	64 e9       	ldi	r22, 0x94	; 148
    1618:	72 e0       	ldi	r23, 0x02	; 2
    161a:	8e e4       	ldi	r24, 0x4E	; 78
    161c:	95 e0       	ldi	r25, 0x05	; 5
    161e:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	rsa_decrypt(sizeof(public1024e3),cryptdata,public_exponent,public_key,rsa_s,rsa_tmp); 
    1622:	40 91 4e 06 	lds	r20, 0x064E
    1626:	50 91 4f 06 	lds	r21, 0x064F
    162a:	20 e5       	ldi	r18, 0x50	; 80
    162c:	e2 2e       	mov	r14, r18
    162e:	28 e0       	ldi	r18, 0x08	; 8
    1630:	f2 2e       	mov	r15, r18
    1632:	00 e5       	ldi	r16, 0x50	; 80
    1634:	1a e0       	ldi	r17, 0x0A	; 10
    1636:	2e e4       	ldi	r18, 0x4E	; 78
    1638:	35 e0       	ldi	r19, 0x05	; 5
    163a:	60 e5       	ldi	r22, 0x50	; 80
    163c:	76 e0       	ldi	r23, 0x06	; 6
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 39 15 	call	0x2a72	; 0x2a72 <rsa_decrypt>
	if(memcmp_P(cryptdata,CONSTANT_DATA,sizeof(public1024e3)))
    1646:	40 e8       	ldi	r20, 0x80	; 128
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	64 e1       	ldi	r22, 0x14	; 20
    164c:	77 e0       	ldi	r23, 0x07	; 7
    164e:	80 e5       	ldi	r24, 0x50	; 80
    1650:	96 e0       	ldi	r25, 0x06	; 6
    1652:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    1656:	89 2b       	or	r24, r25
    1658:	11 f0       	breq	.+4      	; 0x165e <rsa_test+0x31c>
	{
		ret|=8;
    165a:	88 e0       	ldi	r24, 0x08	; 8
    165c:	d8 2a       	or	r13, r24
	}
/* (plaintext^private_key)%public_key = ciphertext */
	memcpy_P(cryptdata	,CONSTANT_DATA		,sizeof(CONSTANT_DATA));
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	51 e0       	ldi	r21, 0x01	; 1
    1662:	64 e1       	ldi	r22, 0x14	; 20
    1664:	77 e0       	ldi	r23, 0x07	; 7
    1666:	80 e5       	ldi	r24, 0x50	; 80
    1668:	96 e0       	ldi	r25, 0x06	; 6
    166a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(public_key	,public2048e3		,sizeof(public2048e3));
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	51 e0       	ldi	r21, 0x01	; 1
    1672:	64 e9       	ldi	r22, 0x94	; 148
    1674:	73 e0       	ldi	r23, 0x03	; 3
    1676:	8e e4       	ldi	r24, 0x4E	; 78
    1678:	95 e0       	ldi	r25, 0x05	; 5
    167a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(private_key,private2048e3		,sizeof(private2048e3));
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	51 e0       	ldi	r21, 0x01	; 1
    1682:	64 e9       	ldi	r22, 0x94	; 148
    1684:	74 e0       	ldi	r23, 0x04	; 4
    1686:	80 e5       	ldi	r24, 0x50	; 80
    1688:	97 e0       	ldi	r25, 0x07	; 7
    168a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>

	rsa_encrypt(sizeof(public2048e3),cryptdata ,private_key,public_key,rsa_s,rsa_tmp);
    168e:	90 e5       	ldi	r25, 0x50	; 80
    1690:	e9 2e       	mov	r14, r25
    1692:	98 e0       	ldi	r25, 0x08	; 8
    1694:	f9 2e       	mov	r15, r25
    1696:	00 e5       	ldi	r16, 0x50	; 80
    1698:	1a e0       	ldi	r17, 0x0A	; 10
    169a:	2e e4       	ldi	r18, 0x4E	; 78
    169c:	35 e0       	ldi	r19, 0x05	; 5
    169e:	40 e5       	ldi	r20, 0x50	; 80
    16a0:	57 e0       	ldi	r21, 0x07	; 7
    16a2:	60 e5       	ldi	r22, 0x50	; 80
    16a4:	76 e0       	ldi	r23, 0x06	; 6
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <rsa_encrypt>
	if(memcmp_P(cryptdata,crypt2048e3,sizeof(crypt2048e3)))
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	51 e0       	ldi	r21, 0x01	; 1
    16b2:	64 e9       	ldi	r22, 0x94	; 148
    16b4:	75 e0       	ldi	r23, 0x05	; 5
    16b6:	80 e5       	ldi	r24, 0x50	; 80
    16b8:	96 e0       	ldi	r25, 0x06	; 6
    16ba:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    16be:	89 2b       	or	r24, r25
    16c0:	11 f0       	breq	.+4      	; 0x16c6 <rsa_test+0x384>
	{
		ret|=4;
    16c2:	84 e0       	ldi	r24, 0x04	; 4
    16c4:	d8 2a       	or	r13, r24
	}
	memcpy_P(cryptdata,crypt2048e3,sizeof(public2048e3));
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	51 e0       	ldi	r21, 0x01	; 1
    16ca:	64 e9       	ldi	r22, 0x94	; 148
    16cc:	75 e0       	ldi	r23, 0x05	; 5
    16ce:	80 e5       	ldi	r24, 0x50	; 80
    16d0:	96 e0       	ldi	r25, 0x06	; 6
    16d2:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	
/* (ciphertext^public_exponent)%public_key = plaintext */
 	public_exponent=3;
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	90 93 4f 06 	sts	0x064F, r25
    16de:	80 93 4e 06 	sts	0x064E, r24
	memcpy_P(public_key	,public2048e3		,sizeof(public2048e3));
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	51 e0       	ldi	r21, 0x01	; 1
    16e6:	64 e9       	ldi	r22, 0x94	; 148
    16e8:	73 e0       	ldi	r23, 0x03	; 3
    16ea:	8e e4       	ldi	r24, 0x4E	; 78
    16ec:	95 e0       	ldi	r25, 0x05	; 5
    16ee:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	rsa_decrypt(sizeof(public2048e3),cryptdata,public_exponent,public_key,rsa_s,rsa_tmp); 
    16f2:	40 91 4e 06 	lds	r20, 0x064E
    16f6:	50 91 4f 06 	lds	r21, 0x064F
    16fa:	80 e5       	ldi	r24, 0x50	; 80
    16fc:	e8 2e       	mov	r14, r24
    16fe:	88 e0       	ldi	r24, 0x08	; 8
    1700:	f8 2e       	mov	r15, r24
    1702:	00 e5       	ldi	r16, 0x50	; 80
    1704:	1a e0       	ldi	r17, 0x0A	; 10
    1706:	2e e4       	ldi	r18, 0x4E	; 78
    1708:	35 e0       	ldi	r19, 0x05	; 5
    170a:	60 e5       	ldi	r22, 0x50	; 80
    170c:	76 e0       	ldi	r23, 0x06	; 6
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	0e 94 39 15 	call	0x2a72	; 0x2a72 <rsa_decrypt>
	if(memcmp_P(cryptdata,CONSTANT_DATA,sizeof(public2048e3)))
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	51 e0       	ldi	r21, 0x01	; 1
    171a:	64 e1       	ldi	r22, 0x14	; 20
    171c:	77 e0       	ldi	r23, 0x07	; 7
    171e:	80 e5       	ldi	r24, 0x50	; 80
    1720:	96 e0       	ldi	r25, 0x06	; 6
    1722:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    1726:	89 2b       	or	r24, r25
    1728:	11 f0       	breq	.+4      	; 0x172e <rsa_test+0x3ec>
	{
		ret|=8;
    172a:	88 e0       	ldi	r24, 0x08	; 8
    172c:	d8 2a       	or	r13, r24
	}

	return ret;

}
    172e:	8d 2d       	mov	r24, r13
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	08 95       	ret

/* (plaintext^private_key)%public_key = ciphertext */
	memcpy_P(cryptdata	,CONSTANT_DATA		,sizeof(CONSTANT_DATA));
	
	rsa_encrypt_P(sizeof(public64e3),cryptdata ,private64e3,public64e3,rsa_s,rsa_tmp);
	if(memcmp_P(cryptdata,crypt64e3,sizeof(crypt64e3)))
    173e:	cc 24       	eor	r12, r12
    1740:	b8 e0       	ldi	r27, 0x08	; 8
    1742:	db 2e       	mov	r13, r27
    1744:	2b ce       	rjmp	.-938    	; 0x139c <rsa_test+0x5a>

00001746 <test_sha5>:
unsigned char PROGMEM a_sha[]={"abcdbcdecdefdefgefghfg"};
unsigned char PROGMEM b_sha[]={"highijhijkijkljklmklmnlmnomnopnopq"};
unsigned char PROGMEM c_sha[]={"SHATestFectorsJustFortesting:SHATestFectorsJustFortesting:SHATestFectorsJustFortesting"};

unsigned char  test_sha5(void)
{
    1746:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Sha_Init>
Sha_Init();
Sha_Update_P(a_sha,sizeof(a_sha)-1);
    174a:	66 e1       	ldi	r22, 0x16	; 22
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	84 e5       	ldi	r24, 0x54	; 84
    1750:	98 e0       	ldi	r25, 0x08	; 8
    1752:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <Sha_Update_P>
Sha_Update_P(b_sha,sizeof(b_sha)-1);
    1756:	62 e2       	ldi	r22, 0x22	; 34
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	8b e6       	ldi	r24, 0x6B	; 107
    175c:	98 e0       	ldi	r25, 0x08	; 8
    175e:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <Sha_Update_P>
Sha_Update_P(a_sha,sizeof(a_sha)-1);
    1762:	66 e1       	ldi	r22, 0x16	; 22
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	84 e5       	ldi	r24, 0x54	; 84
    1768:	98 e0       	ldi	r25, 0x08	; 8
    176a:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <Sha_Update_P>
Sha_Update_P(b_sha,sizeof(b_sha)-1);
    176e:	62 e2       	ldi	r22, 0x22	; 34
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	8b e6       	ldi	r24, 0x6B	; 107
    1774:	98 e0       	ldi	r25, 0x08	; 8
    1776:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <Sha_Update_P>
Sha_Update_P(c_sha,sizeof(c_sha)-1);
    177a:	66 e5       	ldi	r22, 0x56	; 86
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	8e e8       	ldi	r24, 0x8E	; 142
    1780:	98 e0       	ldi	r25, 0x08	; 8
    1782:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <Sha_Update_P>
Sha_Final();
    1786:	0e 94 1b 1a 	call	0x3436	; 0x3436 <Sha_Final>
/*  */

return (  Sha_Info.Digest[0]!= 0xfe855cb3 ||
    178a:	80 91 ec 03 	lds	r24, 0x03EC
    178e:	90 91 ed 03 	lds	r25, 0x03ED
    1792:	a0 91 ee 03 	lds	r26, 0x03EE
    1796:	b0 91 ef 03 	lds	r27, 0x03EF
    179a:	83 5b       	subi	r24, 0xB3	; 179
    179c:	9c 45       	sbci	r25, 0x5C	; 92
    179e:	a5 48       	sbci	r26, 0x85	; 133
    17a0:	be 4f       	sbci	r27, 0xFE	; 254
    17a2:	19 f0       	breq	.+6      	; 0x17aa <test_sha5+0x64>
    17a4:	21 e0       	ldi	r18, 0x01	; 1
		  Sha_Info.Digest[1]!= 0x869613d6 ||
		  Sha_Info.Digest[2]!= 0x9b086d7f ||
		  Sha_Info.Digest[3]!= 0xa27d0e64 ||
		  Sha_Info.Digest[4]!= 0x3f98436d );
}
    17a6:	82 2f       	mov	r24, r18
    17a8:	08 95       	ret
Sha_Update_P(b_sha,sizeof(b_sha)-1);
Sha_Update_P(c_sha,sizeof(c_sha)-1);
Sha_Final();
/*  */

return (  Sha_Info.Digest[0]!= 0xfe855cb3 ||
    17aa:	80 91 f0 03 	lds	r24, 0x03F0
    17ae:	90 91 f1 03 	lds	r25, 0x03F1
    17b2:	a0 91 f2 03 	lds	r26, 0x03F2
    17b6:	b0 91 f3 03 	lds	r27, 0x03F3
    17ba:	86 5d       	subi	r24, 0xD6	; 214
    17bc:	93 41       	sbci	r25, 0x13	; 19
    17be:	a6 49       	sbci	r26, 0x96	; 150
    17c0:	b6 48       	sbci	r27, 0x86	; 134
    17c2:	81 f7       	brne	.-32     	; 0x17a4 <test_sha5+0x5e>
    17c4:	80 91 f4 03 	lds	r24, 0x03F4
    17c8:	90 91 f5 03 	lds	r25, 0x03F5
    17cc:	a0 91 f6 03 	lds	r26, 0x03F6
    17d0:	b0 91 f7 03 	lds	r27, 0x03F7
    17d4:	8f 57       	subi	r24, 0x7F	; 127
    17d6:	9d 46       	sbci	r25, 0x6D	; 109
    17d8:	a8 40       	sbci	r26, 0x08	; 8
    17da:	bb 49       	sbci	r27, 0x9B	; 155
    17dc:	19 f7       	brne	.-58     	; 0x17a4 <test_sha5+0x5e>
    17de:	80 91 f8 03 	lds	r24, 0x03F8
    17e2:	90 91 f9 03 	lds	r25, 0x03F9
    17e6:	a0 91 fa 03 	lds	r26, 0x03FA
    17ea:	b0 91 fb 03 	lds	r27, 0x03FB
    17ee:	84 56       	subi	r24, 0x64	; 100
    17f0:	9e 40       	sbci	r25, 0x0E	; 14
    17f2:	ad 47       	sbci	r26, 0x7D	; 125
    17f4:	b2 4a       	sbci	r27, 0xA2	; 162
    17f6:	b1 f6       	brne	.-84     	; 0x17a4 <test_sha5+0x5e>
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	80 91 fc 03 	lds	r24, 0x03FC
    17fe:	90 91 fd 03 	lds	r25, 0x03FD
    1802:	a0 91 fe 03 	lds	r26, 0x03FE
    1806:	b0 91 ff 03 	lds	r27, 0x03FF
    180a:	8d 56       	subi	r24, 0x6D	; 109
    180c:	93 44       	sbci	r25, 0x43	; 67
    180e:	a8 49       	sbci	r26, 0x98	; 152
    1810:	bf 43       	sbci	r27, 0x3F	; 63
    1812:	09 f0       	breq	.+2      	; 0x1816 <test_sha5+0xd0>
    1814:	c7 cf       	rjmp	.-114    	; 0x17a4 <test_sha5+0x5e>
    1816:	c7 cf       	rjmp	.-114    	; 0x17a6 <test_sha5+0x60>

00001818 <test_sha4>:
		  Sha_Info.Digest[4]!= 0x3f98436d );
}


unsigned char  test_sha4(void)
{
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	ac 97       	sbiw	r28, 0x2c	; 44
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
unsigned char a[]={"The quick brown fox jumps over the lazy dog"};
    1830:	8e 01       	movw	r16, r28
    1832:	0f 5f       	subi	r16, 0xFF	; 255
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	d8 01       	movw	r26, r16
    1838:	e0 e0       	ldi	r30, 0x00	; 0
    183a:	f2 e0       	ldi	r31, 0x02	; 2
    183c:	8c e2       	ldi	r24, 0x2C	; 44
    183e:	01 90       	ld	r0, Z+
    1840:	0d 92       	st	X+, r0
    1842:	81 50       	subi	r24, 0x01	; 1
    1844:	e1 f7       	brne	.-8      	; 0x183e <test_sha4+0x26>

Sha_Init();
    1846:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Sha_Init>
Sha_Update(a,strlen((char *)a));
    184a:	f8 01       	movw	r30, r16
    184c:	01 90       	ld	r0, Z+
    184e:	00 20       	and	r0, r0
    1850:	e9 f7       	brne	.-6      	; 0x184c <test_sha4+0x34>
    1852:	31 97       	sbiw	r30, 0x01	; 1
    1854:	e0 1b       	sub	r30, r16
    1856:	f1 0b       	sbc	r31, r17
    1858:	bf 01       	movw	r22, r30
    185a:	c8 01       	movw	r24, r16
    185c:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Final();
    1860:	0e 94 1b 1a 	call	0x3436	; 0x3436 <Sha_Final>
/*  */
return (  Sha_Info.Digest[0]!= 0x2fd4e1c6 ||
    1864:	80 91 ec 03 	lds	r24, 0x03EC
    1868:	90 91 ed 03 	lds	r25, 0x03ED
    186c:	a0 91 ee 03 	lds	r26, 0x03EE
    1870:	b0 91 ef 03 	lds	r27, 0x03EF
    1874:	86 5c       	subi	r24, 0xC6	; 198
    1876:	91 4e       	sbci	r25, 0xE1	; 225
    1878:	a4 4d       	sbci	r26, 0xD4	; 212
    187a:	bf 42       	sbci	r27, 0x2F	; 47
    187c:	69 f0       	breq	.+26     	; 0x1898 <test_sha4+0x80>
    187e:	21 e0       	ldi	r18, 0x01	; 1
		  Sha_Info.Digest[1]!= 0x7a2d28fc ||
		  Sha_Info.Digest[2]!= 0xed849ee1 ||
		  Sha_Info.Digest[3]!= 0xbb76e739 ||
		  Sha_Info.Digest[4]!= 0x1b93eb12 );
}
    1880:	82 2f       	mov	r24, r18
    1882:	ac 96       	adiw	r28, 0x2c	; 44
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

Sha_Init();
Sha_Update(a,strlen((char *)a));
Sha_Final();
/*  */
return (  Sha_Info.Digest[0]!= 0x2fd4e1c6 ||
    1898:	80 91 f0 03 	lds	r24, 0x03F0
    189c:	90 91 f1 03 	lds	r25, 0x03F1
    18a0:	a0 91 f2 03 	lds	r26, 0x03F2
    18a4:	b0 91 f3 03 	lds	r27, 0x03F3
    18a8:	8c 5f       	subi	r24, 0xFC	; 252
    18aa:	98 42       	sbci	r25, 0x28	; 40
    18ac:	ad 42       	sbci	r26, 0x2D	; 45
    18ae:	ba 47       	sbci	r27, 0x7A	; 122
    18b0:	31 f7       	brne	.-52     	; 0x187e <test_sha4+0x66>
    18b2:	80 91 f4 03 	lds	r24, 0x03F4
    18b6:	90 91 f5 03 	lds	r25, 0x03F5
    18ba:	a0 91 f6 03 	lds	r26, 0x03F6
    18be:	b0 91 f7 03 	lds	r27, 0x03F7
    18c2:	81 5e       	subi	r24, 0xE1	; 225
    18c4:	9e 49       	sbci	r25, 0x9E	; 158
    18c6:	a4 48       	sbci	r26, 0x84	; 132
    18c8:	bd 4e       	sbci	r27, 0xED	; 237
    18ca:	c9 f6       	brne	.-78     	; 0x187e <test_sha4+0x66>
    18cc:	80 91 f8 03 	lds	r24, 0x03F8
    18d0:	90 91 f9 03 	lds	r25, 0x03F9
    18d4:	a0 91 fa 03 	lds	r26, 0x03FA
    18d8:	b0 91 fb 03 	lds	r27, 0x03FB
    18dc:	89 53       	subi	r24, 0x39	; 57
    18de:	97 4e       	sbci	r25, 0xE7	; 231
    18e0:	a6 47       	sbci	r26, 0x76	; 118
    18e2:	bb 4b       	sbci	r27, 0xBB	; 187
    18e4:	61 f6       	brne	.-104    	; 0x187e <test_sha4+0x66>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	80 91 fc 03 	lds	r24, 0x03FC
    18ec:	90 91 fd 03 	lds	r25, 0x03FD
    18f0:	a0 91 fe 03 	lds	r26, 0x03FE
    18f4:	b0 91 ff 03 	lds	r27, 0x03FF
    18f8:	82 51       	subi	r24, 0x12	; 18
    18fa:	9b 4e       	sbci	r25, 0xEB	; 235
    18fc:	a3 49       	sbci	r26, 0x93	; 147
    18fe:	bb 41       	sbci	r27, 0x1B	; 27
    1900:	09 f0       	breq	.+2      	; 0x1904 <test_sha4+0xec>
    1902:	bd cf       	rjmp	.-134    	; 0x187e <test_sha4+0x66>
    1904:	bd cf       	rjmp	.-134    	; 0x1880 <test_sha4+0x68>

00001906 <test_sha3>:

/* fe855cb3869613d69b086d7fa27d0e643f98436d */
// abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopqabcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopqSHATestFectorsJustFortesting:SHATestFectorsJustFortesting:SHATestFectorsJustFortesting

unsigned char  test_sha3(void)
{
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	c1 59       	subi	r28, 0x91	; 145
    191c:	d0 40       	sbci	r29, 0x00	; 0
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
unsigned char a[]={"abcdbcdecdefdefgefghfg"};
    1928:	8e 01       	movw	r16, r28
    192a:	0f 5f       	subi	r16, 0xFF	; 255
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	d8 01       	movw	r26, r16
    1930:	ec e2       	ldi	r30, 0x2C	; 44
    1932:	f2 e0       	ldi	r31, 0x02	; 2
    1934:	87 e1       	ldi	r24, 0x17	; 23
    1936:	01 90       	ld	r0, Z+
    1938:	0d 92       	st	X+, r0
    193a:	81 50       	subi	r24, 0x01	; 1
    193c:	e1 f7       	brne	.-8      	; 0x1936 <test_sha3+0x30>
unsigned char b[]={"highijhijkijkljklmklmnlmnomnopnopq"};
    193e:	98 e1       	ldi	r25, 0x18	; 24
    1940:	e9 2e       	mov	r14, r25
    1942:	f1 2c       	mov	r15, r1
    1944:	ec 0e       	add	r14, r28
    1946:	fd 1e       	adc	r15, r29
    1948:	d7 01       	movw	r26, r14
    194a:	e3 e4       	ldi	r30, 0x43	; 67
    194c:	f2 e0       	ldi	r31, 0x02	; 2
    194e:	83 e2       	ldi	r24, 0x23	; 35
    1950:	01 90       	ld	r0, Z+
    1952:	0d 92       	st	X+, r0
    1954:	81 50       	subi	r24, 0x01	; 1
    1956:	e1 f7       	brne	.-8      	; 0x1950 <test_sha3+0x4a>
unsigned char c[]={"SHATestFectorsJustFortesting:SHATestFectorsJustFortesting:SHATestFectorsJustFortesting"};
    1958:	8b e3       	ldi	r24, 0x3B	; 59
    195a:	c8 2e       	mov	r12, r24
    195c:	d1 2c       	mov	r13, r1
    195e:	cc 0e       	add	r12, r28
    1960:	dd 1e       	adc	r13, r29
    1962:	d6 01       	movw	r26, r12
    1964:	e6 e6       	ldi	r30, 0x66	; 102
    1966:	f2 e0       	ldi	r31, 0x02	; 2
    1968:	87 e5       	ldi	r24, 0x57	; 87
    196a:	01 90       	ld	r0, Z+
    196c:	0d 92       	st	X+, r0
    196e:	81 50       	subi	r24, 0x01	; 1
    1970:	e1 f7       	brne	.-8      	; 0x196a <test_sha3+0x64>

Sha_Init();
    1972:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Sha_Init>
Sha_Update(a,strlen((char *)a));
    1976:	f8 01       	movw	r30, r16
    1978:	01 90       	ld	r0, Z+
    197a:	00 20       	and	r0, r0
    197c:	e9 f7       	brne	.-6      	; 0x1978 <test_sha3+0x72>
    197e:	31 97       	sbiw	r30, 0x01	; 1
    1980:	e0 1b       	sub	r30, r16
    1982:	f1 0b       	sbc	r31, r17
    1984:	bf 01       	movw	r22, r30
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Update(b,strlen((char *)b));
    198c:	f7 01       	movw	r30, r14
    198e:	01 90       	ld	r0, Z+
    1990:	00 20       	and	r0, r0
    1992:	e9 f7       	brne	.-6      	; 0x198e <test_sha3+0x88>
    1994:	31 97       	sbiw	r30, 0x01	; 1
    1996:	ee 19       	sub	r30, r14
    1998:	ff 09       	sbc	r31, r15
    199a:	bf 01       	movw	r22, r30
    199c:	c7 01       	movw	r24, r14
    199e:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Update(a,strlen((char *)a));
    19a2:	f8 01       	movw	r30, r16
    19a4:	01 90       	ld	r0, Z+
    19a6:	00 20       	and	r0, r0
    19a8:	e9 f7       	brne	.-6      	; 0x19a4 <test_sha3+0x9e>
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	e0 1b       	sub	r30, r16
    19ae:	f1 0b       	sbc	r31, r17
    19b0:	bf 01       	movw	r22, r30
    19b2:	c8 01       	movw	r24, r16
    19b4:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Update(b,strlen((char *)b));
    19b8:	f7 01       	movw	r30, r14
    19ba:	01 90       	ld	r0, Z+
    19bc:	00 20       	and	r0, r0
    19be:	e9 f7       	brne	.-6      	; 0x19ba <test_sha3+0xb4>
    19c0:	31 97       	sbiw	r30, 0x01	; 1
    19c2:	ee 19       	sub	r30, r14
    19c4:	ff 09       	sbc	r31, r15
    19c6:	bf 01       	movw	r22, r30
    19c8:	c7 01       	movw	r24, r14
    19ca:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Update(c,strlen((char *)c));
    19ce:	f6 01       	movw	r30, r12
    19d0:	01 90       	ld	r0, Z+
    19d2:	00 20       	and	r0, r0
    19d4:	e9 f7       	brne	.-6      	; 0x19d0 <test_sha3+0xca>
    19d6:	31 97       	sbiw	r30, 0x01	; 1
    19d8:	ec 19       	sub	r30, r12
    19da:	fd 09       	sbc	r31, r13
    19dc:	bf 01       	movw	r22, r30
    19de:	c6 01       	movw	r24, r12
    19e0:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Final();
    19e4:	0e 94 1b 1a 	call	0x3436	; 0x3436 <Sha_Final>
/*  */

return (  Sha_Info.Digest[0]!= 0xfe855cb3 ||
    19e8:	80 91 ec 03 	lds	r24, 0x03EC
    19ec:	90 91 ed 03 	lds	r25, 0x03ED
    19f0:	a0 91 ee 03 	lds	r26, 0x03EE
    19f4:	b0 91 ef 03 	lds	r27, 0x03EF
    19f8:	83 5b       	subi	r24, 0xB3	; 179
    19fa:	9c 45       	sbci	r25, 0x5C	; 92
    19fc:	a5 48       	sbci	r26, 0x85	; 133
    19fe:	be 4f       	sbci	r27, 0xFE	; 254
    1a00:	91 f0       	breq	.+36     	; 0x1a26 <test_sha3+0x120>
    1a02:	21 e0       	ldi	r18, 0x01	; 1
		  Sha_Info.Digest[1]!= 0x869613d6 ||
		  Sha_Info.Digest[2]!= 0x9b086d7f ||
		  Sha_Info.Digest[3]!= 0xa27d0e64 ||
		  Sha_Info.Digest[4]!= 0x3f98436d );
}
    1a04:	82 2f       	mov	r24, r18
    1a06:	cf 56       	subi	r28, 0x6F	; 111
    1a08:	df 4f       	sbci	r29, 0xFF	; 255
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	08 95       	ret
Sha_Update(b,strlen((char *)b));
Sha_Update(c,strlen((char *)c));
Sha_Final();
/*  */

return (  Sha_Info.Digest[0]!= 0xfe855cb3 ||
    1a26:	80 91 f0 03 	lds	r24, 0x03F0
    1a2a:	90 91 f1 03 	lds	r25, 0x03F1
    1a2e:	a0 91 f2 03 	lds	r26, 0x03F2
    1a32:	b0 91 f3 03 	lds	r27, 0x03F3
    1a36:	86 5d       	subi	r24, 0xD6	; 214
    1a38:	93 41       	sbci	r25, 0x13	; 19
    1a3a:	a6 49       	sbci	r26, 0x96	; 150
    1a3c:	b6 48       	sbci	r27, 0x86	; 134
    1a3e:	09 f7       	brne	.-62     	; 0x1a02 <test_sha3+0xfc>
    1a40:	80 91 f4 03 	lds	r24, 0x03F4
    1a44:	90 91 f5 03 	lds	r25, 0x03F5
    1a48:	a0 91 f6 03 	lds	r26, 0x03F6
    1a4c:	b0 91 f7 03 	lds	r27, 0x03F7
    1a50:	8f 57       	subi	r24, 0x7F	; 127
    1a52:	9d 46       	sbci	r25, 0x6D	; 109
    1a54:	a8 40       	sbci	r26, 0x08	; 8
    1a56:	bb 49       	sbci	r27, 0x9B	; 155
    1a58:	a1 f6       	brne	.-88     	; 0x1a02 <test_sha3+0xfc>
    1a5a:	80 91 f8 03 	lds	r24, 0x03F8
    1a5e:	90 91 f9 03 	lds	r25, 0x03F9
    1a62:	a0 91 fa 03 	lds	r26, 0x03FA
    1a66:	b0 91 fb 03 	lds	r27, 0x03FB
    1a6a:	84 56       	subi	r24, 0x64	; 100
    1a6c:	9e 40       	sbci	r25, 0x0E	; 14
    1a6e:	ad 47       	sbci	r26, 0x7D	; 125
    1a70:	b2 4a       	sbci	r27, 0xA2	; 162
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <test_sha3+0x170>
    1a74:	c6 cf       	rjmp	.-116    	; 0x1a02 <test_sha3+0xfc>
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	80 91 fc 03 	lds	r24, 0x03FC
    1a7c:	90 91 fd 03 	lds	r25, 0x03FD
    1a80:	a0 91 fe 03 	lds	r26, 0x03FE
    1a84:	b0 91 ff 03 	lds	r27, 0x03FF
    1a88:	8d 56       	subi	r24, 0x6D	; 109
    1a8a:	93 44       	sbci	r25, 0x43	; 67
    1a8c:	a8 49       	sbci	r26, 0x98	; 152
    1a8e:	bf 43       	sbci	r27, 0x3F	; 63
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <test_sha3+0x18e>
    1a92:	b7 cf       	rjmp	.-146    	; 0x1a02 <test_sha3+0xfc>
    1a94:	b7 cf       	rjmp	.-146    	; 0x1a04 <test_sha3+0xfe>

00001a96 <test_sha2>:



/* 84983e44 1c3bd26e baae4aa1 f95129e5 e54670f1 */
unsigned char  test_sha2(void)
{
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	ea 97       	sbiw	r28, 0x3a	; 58
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
unsigned char a[]={"abcdbcdecdefdefgefghfg"};
    1ab2:	8e 01       	movw	r16, r28
    1ab4:	0f 5f       	subi	r16, 0xFF	; 255
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab8:	d8 01       	movw	r26, r16
    1aba:	ec e2       	ldi	r30, 0x2C	; 44
    1abc:	f2 e0       	ldi	r31, 0x02	; 2
    1abe:	87 e1       	ldi	r24, 0x17	; 23
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	0d 92       	st	X+, r0
    1ac4:	81 50       	subi	r24, 0x01	; 1
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <test_sha2+0x2a>
unsigned char b[]={"highijhijkijkljklmklmnlmnomnopnopq"};
    1ac8:	28 e1       	ldi	r18, 0x18	; 24
    1aca:	e2 2e       	mov	r14, r18
    1acc:	f1 2c       	mov	r15, r1
    1ace:	ec 0e       	add	r14, r28
    1ad0:	fd 1e       	adc	r15, r29
    1ad2:	d7 01       	movw	r26, r14
    1ad4:	e3 e4       	ldi	r30, 0x43	; 67
    1ad6:	f2 e0       	ldi	r31, 0x02	; 2
    1ad8:	83 e2       	ldi	r24, 0x23	; 35
    1ada:	01 90       	ld	r0, Z+
    1adc:	0d 92       	st	X+, r0
    1ade:	81 50       	subi	r24, 0x01	; 1
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <test_sha2+0x44>

Sha_Init();
    1ae2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Sha_Init>
Sha_Update(a,strlen((char *)a));
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	01 90       	ld	r0, Z+
    1aea:	00 20       	and	r0, r0
    1aec:	e9 f7       	brne	.-6      	; 0x1ae8 <test_sha2+0x52>
    1aee:	31 97       	sbiw	r30, 0x01	; 1
    1af0:	e0 1b       	sub	r30, r16
    1af2:	f1 0b       	sbc	r31, r17
    1af4:	bf 01       	movw	r22, r30
    1af6:	c8 01       	movw	r24, r16
    1af8:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Update(b,strlen((char *)b));
    1afc:	f7 01       	movw	r30, r14
    1afe:	01 90       	ld	r0, Z+
    1b00:	00 20       	and	r0, r0
    1b02:	e9 f7       	brne	.-6      	; 0x1afe <test_sha2+0x68>
    1b04:	31 97       	sbiw	r30, 0x01	; 1
    1b06:	ee 19       	sub	r30, r14
    1b08:	ff 09       	sbc	r31, r15
    1b0a:	bf 01       	movw	r22, r30
    1b0c:	c7 01       	movw	r24, r14
    1b0e:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>

Sha_Final();
    1b12:	0e 94 1b 1a 	call	0x3436	; 0x3436 <Sha_Final>

return (  Sha_Info.Digest[0]!= 0x84983e44 ||
    1b16:	80 91 ec 03 	lds	r24, 0x03EC
    1b1a:	90 91 ed 03 	lds	r25, 0x03ED
    1b1e:	a0 91 ee 03 	lds	r26, 0x03EE
    1b22:	b0 91 ef 03 	lds	r27, 0x03EF
    1b26:	84 54       	subi	r24, 0x44	; 68
    1b28:	9e 43       	sbci	r25, 0x3E	; 62
    1b2a:	a8 49       	sbci	r26, 0x98	; 152
    1b2c:	b4 48       	sbci	r27, 0x84	; 132
    1b2e:	79 f0       	breq	.+30     	; 0x1b4e <test_sha2+0xb8>
    1b30:	21 e0       	ldi	r18, 0x01	; 1
		  Sha_Info.Digest[1]!= 0x1c3bd26e ||
		  Sha_Info.Digest[2]!= 0xbaae4aa1 ||
		  Sha_Info.Digest[3]!= 0xf95129e5 ||
		  Sha_Info.Digest[4]!= 0xe54670f1 );

}
    1b32:	82 2f       	mov	r24, r18
    1b34:	ea 96       	adiw	r28, 0x3a	; 58
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	08 95       	ret
Sha_Update(a,strlen((char *)a));
Sha_Update(b,strlen((char *)b));

Sha_Final();

return (  Sha_Info.Digest[0]!= 0x84983e44 ||
    1b4e:	80 91 f0 03 	lds	r24, 0x03F0
    1b52:	90 91 f1 03 	lds	r25, 0x03F1
    1b56:	a0 91 f2 03 	lds	r26, 0x03F2
    1b5a:	b0 91 f3 03 	lds	r27, 0x03F3
    1b5e:	8e 56       	subi	r24, 0x6E	; 110
    1b60:	92 4d       	sbci	r25, 0xD2	; 210
    1b62:	ab 43       	sbci	r26, 0x3B	; 59
    1b64:	bc 41       	sbci	r27, 0x1C	; 28
    1b66:	21 f7       	brne	.-56     	; 0x1b30 <test_sha2+0x9a>
    1b68:	80 91 f4 03 	lds	r24, 0x03F4
    1b6c:	90 91 f5 03 	lds	r25, 0x03F5
    1b70:	a0 91 f6 03 	lds	r26, 0x03F6
    1b74:	b0 91 f7 03 	lds	r27, 0x03F7
    1b78:	81 5a       	subi	r24, 0xA1	; 161
    1b7a:	9a 44       	sbci	r25, 0x4A	; 74
    1b7c:	ae 4a       	sbci	r26, 0xAE	; 174
    1b7e:	ba 4b       	sbci	r27, 0xBA	; 186
    1b80:	b9 f6       	brne	.-82     	; 0x1b30 <test_sha2+0x9a>
    1b82:	80 91 f8 03 	lds	r24, 0x03F8
    1b86:	90 91 f9 03 	lds	r25, 0x03F9
    1b8a:	a0 91 fa 03 	lds	r26, 0x03FA
    1b8e:	b0 91 fb 03 	lds	r27, 0x03FB
    1b92:	85 5e       	subi	r24, 0xE5	; 229
    1b94:	99 42       	sbci	r25, 0x29	; 41
    1b96:	a1 45       	sbci	r26, 0x51	; 81
    1b98:	b9 4f       	sbci	r27, 0xF9	; 249
    1b9a:	51 f6       	brne	.-108    	; 0x1b30 <test_sha2+0x9a>
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	80 91 fc 03 	lds	r24, 0x03FC
    1ba2:	90 91 fd 03 	lds	r25, 0x03FD
    1ba6:	a0 91 fe 03 	lds	r26, 0x03FE
    1baa:	b0 91 ff 03 	lds	r27, 0x03FF
    1bae:	81 5f       	subi	r24, 0xF1	; 241
    1bb0:	90 47       	sbci	r25, 0x70	; 112
    1bb2:	a6 44       	sbci	r26, 0x46	; 70
    1bb4:	b5 4e       	sbci	r27, 0xE5	; 229
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <test_sha2+0x124>
    1bb8:	bb cf       	rjmp	.-138    	; 0x1b30 <test_sha2+0x9a>
    1bba:	bb cf       	rjmp	.-138    	; 0x1b32 <test_sha2+0x9c>

00001bbc <test_sha>:
// By Emile van der Laan
// www.emsign.nl
//
/* 5557599a 1083edf6 e848193d dca0024a db696871 */
unsigned char test_sha(void)
{
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	69 97       	sbiw	r28, 0x19	; 25
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61

unsigned char c[]={"000000800000001F00000000"};
    1bd4:	8e 01       	movw	r16, r28
    1bd6:	0f 5f       	subi	r16, 0xFF	; 255
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	d8 01       	movw	r26, r16
    1bdc:	ed eb       	ldi	r30, 0xBD	; 189
    1bde:	f2 e0       	ldi	r31, 0x02	; 2
    1be0:	89 e1       	ldi	r24, 0x19	; 25
    1be2:	01 90       	ld	r0, Z+
    1be4:	0d 92       	st	X+, r0
    1be6:	81 50       	subi	r24, 0x01	; 1
    1be8:	e1 f7       	brne	.-8      	; 0x1be2 <test_sha+0x26>

Sha_Init();
    1bea:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Sha_Init>
Sha_Update(c,strlen((char *)c));
    1bee:	f8 01       	movw	r30, r16
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	00 20       	and	r0, r0
    1bf4:	e9 f7       	brne	.-6      	; 0x1bf0 <test_sha+0x34>
    1bf6:	31 97       	sbiw	r30, 0x01	; 1
    1bf8:	e0 1b       	sub	r30, r16
    1bfa:	f1 0b       	sbc	r31, r17
    1bfc:	bf 01       	movw	r22, r30
    1bfe:	c8 01       	movw	r24, r16
    1c00:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Final();
    1c04:	0e 94 1b 1a 	call	0x3436	; 0x3436 <Sha_Final>
return (  Sha_Info.Digest[0]!= 0x5557599a ||
    1c08:	80 91 ec 03 	lds	r24, 0x03EC
    1c0c:	90 91 ed 03 	lds	r25, 0x03ED
    1c10:	a0 91 ee 03 	lds	r26, 0x03EE
    1c14:	b0 91 ef 03 	lds	r27, 0x03EF
    1c18:	8a 59       	subi	r24, 0x9A	; 154
    1c1a:	99 45       	sbci	r25, 0x59	; 89
    1c1c:	a7 45       	sbci	r26, 0x57	; 87
    1c1e:	b5 45       	sbci	r27, 0x55	; 85
    1c20:	69 f0       	breq	.+26     	; 0x1c3c <test_sha+0x80>
    1c22:	21 e0       	ldi	r18, 0x01	; 1
		  Sha_Info.Digest[1]!= 0x1083edf6 ||
		  Sha_Info.Digest[2]!= 0xe848193d ||
		  Sha_Info.Digest[3]!= 0xdca0024a ||
		  Sha_Info.Digest[4]!= 0xdb696871 );

}
    1c24:	82 2f       	mov	r24, r18
    1c26:	69 96       	adiw	r28, 0x19	; 25
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret
unsigned char c[]={"000000800000001F00000000"};

Sha_Init();
Sha_Update(c,strlen((char *)c));
Sha_Final();
return (  Sha_Info.Digest[0]!= 0x5557599a ||
    1c3c:	80 91 f0 03 	lds	r24, 0x03F0
    1c40:	90 91 f1 03 	lds	r25, 0x03F1
    1c44:	a0 91 f2 03 	lds	r26, 0x03F2
    1c48:	b0 91 f3 03 	lds	r27, 0x03F3
    1c4c:	86 5f       	subi	r24, 0xF6	; 246
    1c4e:	9d 4e       	sbci	r25, 0xED	; 237
    1c50:	a3 48       	sbci	r26, 0x83	; 131
    1c52:	b0 41       	sbci	r27, 0x10	; 16
    1c54:	31 f7       	brne	.-52     	; 0x1c22 <test_sha+0x66>
    1c56:	80 91 f4 03 	lds	r24, 0x03F4
    1c5a:	90 91 f5 03 	lds	r25, 0x03F5
    1c5e:	a0 91 f6 03 	lds	r26, 0x03F6
    1c62:	b0 91 f7 03 	lds	r27, 0x03F7
    1c66:	8d 53       	subi	r24, 0x3D	; 61
    1c68:	99 41       	sbci	r25, 0x19	; 25
    1c6a:	a8 44       	sbci	r26, 0x48	; 72
    1c6c:	b8 4e       	sbci	r27, 0xE8	; 232
    1c6e:	c9 f6       	brne	.-78     	; 0x1c22 <test_sha+0x66>
    1c70:	80 91 f8 03 	lds	r24, 0x03F8
    1c74:	90 91 f9 03 	lds	r25, 0x03F9
    1c78:	a0 91 fa 03 	lds	r26, 0x03FA
    1c7c:	b0 91 fb 03 	lds	r27, 0x03FB
    1c80:	8a 54       	subi	r24, 0x4A	; 74
    1c82:	92 40       	sbci	r25, 0x02	; 2
    1c84:	a0 4a       	sbci	r26, 0xA0	; 160
    1c86:	bc 4d       	sbci	r27, 0xDC	; 220
    1c88:	61 f6       	brne	.-104    	; 0x1c22 <test_sha+0x66>
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	80 91 fc 03 	lds	r24, 0x03FC
    1c90:	90 91 fd 03 	lds	r25, 0x03FD
    1c94:	a0 91 fe 03 	lds	r26, 0x03FE
    1c98:	b0 91 ff 03 	lds	r27, 0x03FF
    1c9c:	81 57       	subi	r24, 0x71	; 113
    1c9e:	98 46       	sbci	r25, 0x68	; 104
    1ca0:	a9 46       	sbci	r26, 0x69	; 105
    1ca2:	bb 4d       	sbci	r27, 0xDB	; 219
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <test_sha+0xec>
    1ca6:	bd cf       	rjmp	.-134    	; 0x1c22 <test_sha+0x66>
    1ca8:	bd cf       	rjmp	.-134    	; 0x1c24 <test_sha+0x68>

00001caa <sha_test>:
		  Sha_Info.Digest[3]!= 0xa27d0e64 ||
		  Sha_Info.Digest[4]!= 0x3f98436d );
}

unsigned char sha_test(void)
{
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	c5 54       	subi	r28, 0x45	; 69
    1cbc:	d0 40       	sbci	r29, 0x00	; 0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
//
/* 5557599a 1083edf6 e848193d dca0024a db696871 */
unsigned char test_sha(void)
{

unsigned char c[]={"000000800000001F00000000"};
    1cc8:	8e 01       	movw	r16, r28
    1cca:	0f 5f       	subi	r16, 0xFF	; 255
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	d8 01       	movw	r26, r16
    1cd0:	ed eb       	ldi	r30, 0xBD	; 189
    1cd2:	f2 e0       	ldi	r31, 0x02	; 2
    1cd4:	89 e1       	ldi	r24, 0x19	; 25
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	0d 92       	st	X+, r0
    1cda:	81 50       	subi	r24, 0x01	; 1
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <sha_test+0x2c>

Sha_Init();
    1cde:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Sha_Init>
Sha_Update(c,strlen((char *)c));
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	01 90       	ld	r0, Z+
    1ce6:	00 20       	and	r0, r0
    1ce8:	e9 f7       	brne	.-6      	; 0x1ce4 <sha_test+0x3a>
    1cea:	31 97       	sbiw	r30, 0x01	; 1
    1cec:	e0 1b       	sub	r30, r16
    1cee:	f1 0b       	sbc	r31, r17
    1cf0:	bf 01       	movw	r22, r30
    1cf2:	c8 01       	movw	r24, r16
    1cf4:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Final();
    1cf8:	0e 94 1b 1a 	call	0x3436	; 0x3436 <Sha_Final>
return (  Sha_Info.Digest[0]!= 0x5557599a ||
    1cfc:	80 91 ec 03 	lds	r24, 0x03EC
    1d00:	90 91 ed 03 	lds	r25, 0x03ED
    1d04:	a0 91 ee 03 	lds	r26, 0x03EE
    1d08:	b0 91 ef 03 	lds	r27, 0x03EF
    1d0c:	8a 59       	subi	r24, 0x9A	; 154
    1d0e:	99 45       	sbci	r25, 0x59	; 89
    1d10:	a7 45       	sbci	r26, 0x57	; 87
    1d12:	b5 45       	sbci	r27, 0x55	; 85
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <sha_test+0x6e>
    1d16:	47 c0       	rjmp	.+142    	; 0x1da6 <sha_test+0xfc>
    1d18:	11 e0       	ldi	r17, 0x01	; 1

unsigned char sha_test(void)
{
unsigned char Ret=0;
if(test_sha()) Ret|=0x01;
if(test_sha2()) Ret|=0x02;
    1d1a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <test_sha2>
    1d1e:	81 11       	cpse	r24, r1
    1d20:	12 60       	ori	r17, 0x02	; 2
if(test_sha3()) Ret|=0x04;
    1d22:	0e 94 83 0c 	call	0x1906	; 0x1906 <test_sha3>
    1d26:	81 11       	cpse	r24, r1
    1d28:	14 60       	ori	r17, 0x04	; 4
}


unsigned char  test_sha4(void)
{
unsigned char a[]={"The quick brown fox jumps over the lazy dog"};
    1d2a:	3a e1       	ldi	r19, 0x1A	; 26
    1d2c:	e3 2e       	mov	r14, r19
    1d2e:	f1 2c       	mov	r15, r1
    1d30:	ec 0e       	add	r14, r28
    1d32:	fd 1e       	adc	r15, r29
    1d34:	d7 01       	movw	r26, r14
    1d36:	e0 e0       	ldi	r30, 0x00	; 0
    1d38:	f2 e0       	ldi	r31, 0x02	; 2
    1d3a:	8c e2       	ldi	r24, 0x2C	; 44
    1d3c:	01 90       	ld	r0, Z+
    1d3e:	0d 92       	st	X+, r0
    1d40:	81 50       	subi	r24, 0x01	; 1
    1d42:	e1 f7       	brne	.-8      	; 0x1d3c <sha_test+0x92>

Sha_Init();
    1d44:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Sha_Init>
Sha_Update(a,strlen((char *)a));
    1d48:	f7 01       	movw	r30, r14
    1d4a:	01 90       	ld	r0, Z+
    1d4c:	00 20       	and	r0, r0
    1d4e:	e9 f7       	brne	.-6      	; 0x1d4a <sha_test+0xa0>
    1d50:	31 97       	sbiw	r30, 0x01	; 1
    1d52:	ee 19       	sub	r30, r14
    1d54:	ff 09       	sbc	r31, r15
    1d56:	bf 01       	movw	r22, r30
    1d58:	c7 01       	movw	r24, r14
    1d5a:	0e 94 1e 1c 	call	0x383c	; 0x383c <Sha_Update>
Sha_Final();
    1d5e:	0e 94 1b 1a 	call	0x3436	; 0x3436 <Sha_Final>
/*  */
return (  Sha_Info.Digest[0]!= 0x2fd4e1c6 ||
    1d62:	80 91 ec 03 	lds	r24, 0x03EC
    1d66:	90 91 ed 03 	lds	r25, 0x03ED
    1d6a:	a0 91 ee 03 	lds	r26, 0x03EE
    1d6e:	b0 91 ef 03 	lds	r27, 0x03EF
    1d72:	86 5c       	subi	r24, 0xC6	; 198
    1d74:	91 4e       	sbci	r25, 0xE1	; 225
    1d76:	a4 4d       	sbci	r26, 0xD4	; 212
    1d78:	bf 42       	sbci	r27, 0x2F	; 47
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <sha_test+0xd4>
    1d7c:	4e c0       	rjmp	.+156    	; 0x1e1a <sha_test+0x170>
{
unsigned char Ret=0;
if(test_sha()) Ret|=0x01;
if(test_sha2()) Ret|=0x02;
if(test_sha3()) Ret|=0x04;
if(test_sha4()) Ret|=0x08;
    1d7e:	18 60       	ori	r17, 0x08	; 8
if(test_sha5()) Ret|=0x10;
    1d80:	0e 94 a3 0b 	call	0x1746	; 0x1746 <test_sha5>
    1d84:	81 11       	cpse	r24, r1
    1d86:	10 61       	ori	r17, 0x10	; 16
return Ret;
}
    1d88:	81 2f       	mov	r24, r17
    1d8a:	cb 5b       	subi	r28, 0xBB	; 187
    1d8c:	df 4f       	sbci	r29, 0xFF	; 255
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	08 95       	ret
unsigned char c[]={"000000800000001F00000000"};

Sha_Init();
Sha_Update(c,strlen((char *)c));
Sha_Final();
return (  Sha_Info.Digest[0]!= 0x5557599a ||
    1da6:	80 91 f0 03 	lds	r24, 0x03F0
    1daa:	90 91 f1 03 	lds	r25, 0x03F1
    1dae:	a0 91 f2 03 	lds	r26, 0x03F2
    1db2:	b0 91 f3 03 	lds	r27, 0x03F3
    1db6:	86 5f       	subi	r24, 0xF6	; 246
    1db8:	9d 4e       	sbci	r25, 0xED	; 237
    1dba:	a3 48       	sbci	r26, 0x83	; 131
    1dbc:	b0 41       	sbci	r27, 0x10	; 16
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <sha_test+0x118>
    1dc0:	ab cf       	rjmp	.-170    	; 0x1d18 <sha_test+0x6e>
    1dc2:	80 91 f4 03 	lds	r24, 0x03F4
    1dc6:	90 91 f5 03 	lds	r25, 0x03F5
    1dca:	a0 91 f6 03 	lds	r26, 0x03F6
    1dce:	b0 91 f7 03 	lds	r27, 0x03F7
    1dd2:	8d 53       	subi	r24, 0x3D	; 61
    1dd4:	99 41       	sbci	r25, 0x19	; 25
    1dd6:	a8 44       	sbci	r26, 0x48	; 72
    1dd8:	b8 4e       	sbci	r27, 0xE8	; 232
    1dda:	09 f0       	breq	.+2      	; 0x1dde <sha_test+0x134>
    1ddc:	9d cf       	rjmp	.-198    	; 0x1d18 <sha_test+0x6e>
    1dde:	80 91 f8 03 	lds	r24, 0x03F8
    1de2:	90 91 f9 03 	lds	r25, 0x03F9
    1de6:	a0 91 fa 03 	lds	r26, 0x03FA
    1dea:	b0 91 fb 03 	lds	r27, 0x03FB
    1dee:	8a 54       	subi	r24, 0x4A	; 74
    1df0:	92 40       	sbci	r25, 0x02	; 2
    1df2:	a0 4a       	sbci	r26, 0xA0	; 160
    1df4:	bc 4d       	sbci	r27, 0xDC	; 220
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <sha_test+0x150>
    1df8:	8f cf       	rjmp	.-226    	; 0x1d18 <sha_test+0x6e>
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
    1dfc:	80 91 fc 03 	lds	r24, 0x03FC
    1e00:	90 91 fd 03 	lds	r25, 0x03FD
    1e04:	a0 91 fe 03 	lds	r26, 0x03FE
    1e08:	b0 91 ff 03 	lds	r27, 0x03FF
    1e0c:	81 57       	subi	r24, 0x71	; 113
    1e0e:	98 46       	sbci	r25, 0x68	; 104
    1e10:	a9 46       	sbci	r26, 0x69	; 105
    1e12:	bb 4d       	sbci	r27, 0xDB	; 219
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <sha_test+0x16e>
    1e16:	80 cf       	rjmp	.-256    	; 0x1d18 <sha_test+0x6e>
    1e18:	80 cf       	rjmp	.-256    	; 0x1d1a <sha_test+0x70>

Sha_Init();
Sha_Update(a,strlen((char *)a));
Sha_Final();
/*  */
return (  Sha_Info.Digest[0]!= 0x2fd4e1c6 ||
    1e1a:	80 91 f0 03 	lds	r24, 0x03F0
    1e1e:	90 91 f1 03 	lds	r25, 0x03F1
    1e22:	a0 91 f2 03 	lds	r26, 0x03F2
    1e26:	b0 91 f3 03 	lds	r27, 0x03F3
    1e2a:	8c 5f       	subi	r24, 0xFC	; 252
    1e2c:	98 42       	sbci	r25, 0x28	; 40
    1e2e:	ad 42       	sbci	r26, 0x2D	; 45
    1e30:	ba 47       	sbci	r27, 0x7A	; 122
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <sha_test+0x18c>
    1e34:	a4 cf       	rjmp	.-184    	; 0x1d7e <sha_test+0xd4>
    1e36:	80 91 f4 03 	lds	r24, 0x03F4
    1e3a:	90 91 f5 03 	lds	r25, 0x03F5
    1e3e:	a0 91 f6 03 	lds	r26, 0x03F6
    1e42:	b0 91 f7 03 	lds	r27, 0x03F7
    1e46:	81 5e       	subi	r24, 0xE1	; 225
    1e48:	9e 49       	sbci	r25, 0x9E	; 158
    1e4a:	a4 48       	sbci	r26, 0x84	; 132
    1e4c:	bd 4e       	sbci	r27, 0xED	; 237
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <sha_test+0x1a8>
    1e50:	96 cf       	rjmp	.-212    	; 0x1d7e <sha_test+0xd4>
    1e52:	80 91 f8 03 	lds	r24, 0x03F8
    1e56:	90 91 f9 03 	lds	r25, 0x03F9
    1e5a:	a0 91 fa 03 	lds	r26, 0x03FA
    1e5e:	b0 91 fb 03 	lds	r27, 0x03FB
    1e62:	89 53       	subi	r24, 0x39	; 57
    1e64:	97 4e       	sbci	r25, 0xE7	; 231
    1e66:	a6 47       	sbci	r26, 0x76	; 118
    1e68:	bb 4b       	sbci	r27, 0xBB	; 187
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <sha_test+0x1c4>
    1e6c:	88 cf       	rjmp	.-240    	; 0x1d7e <sha_test+0xd4>
    1e6e:	80 91 fc 03 	lds	r24, 0x03FC
    1e72:	90 91 fd 03 	lds	r25, 0x03FD
    1e76:	a0 91 fe 03 	lds	r26, 0x03FE
    1e7a:	b0 91 ff 03 	lds	r27, 0x03FF
    1e7e:	82 51       	subi	r24, 0x12	; 18
    1e80:	9b 4e       	sbci	r25, 0xEB	; 235
    1e82:	a3 49       	sbci	r26, 0x93	; 147
    1e84:	bb 41       	sbci	r27, 0x1B	; 27
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <sha_test+0x1e0>
    1e88:	7a cf       	rjmp	.-268    	; 0x1d7e <sha_test+0xd4>
    1e8a:	7a cf       	rjmp	.-268    	; 0x1d80 <sha_test+0xd6>

00001e8c <test_md5_5>:
unsigned char PROGMEM a_md5[]={"abcdbcdecdefdefgefghfg"};
unsigned char PROGMEM b_md5[]={"highijhijkijkljklmklmnlmnomnopnopq"};
unsigned char PROGMEM c_md5[]={"md5TestFectorsJustFortesting:md5TestFectorsJustFortesting:md5TestFectorsJustFortesting"};

unsigned char  test_md5_5(void)
{
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
MD5Init();
    1e94:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <MD5Init>
MD5Update_P(a_md5,sizeof(a_md5)-1);
    1e98:	85 e3       	ldi	r24, 0x35	; 53
    1e9a:	e8 2e       	mov	r14, r24
    1e9c:	89 e0       	ldi	r24, 0x09	; 9
    1e9e:	f8 2e       	mov	r15, r24
    1ea0:	66 e1       	ldi	r22, 0x16	; 22
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	c7 01       	movw	r24, r14
    1ea6:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <MD5Update_P>
MD5Update_P(b_md5,sizeof(b_md5)-1);
    1eaa:	0c e4       	ldi	r16, 0x4C	; 76
    1eac:	19 e0       	ldi	r17, 0x09	; 9
    1eae:	62 e2       	ldi	r22, 0x22	; 34
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <MD5Update_P>
MD5Update_P(a_md5,sizeof(a_md5)-1);
    1eb8:	66 e1       	ldi	r22, 0x16	; 22
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	c7 01       	movw	r24, r14
    1ebe:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <MD5Update_P>
MD5Update_P(b_md5,sizeof(b_md5)-1);
    1ec2:	62 e2       	ldi	r22, 0x22	; 34
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <MD5Update_P>
MD5Update_P(c_md5,sizeof(c_md5)-1);
    1ecc:	66 e5       	ldi	r22, 0x56	; 86
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	8f e6       	ldi	r24, 0x6F	; 111
    1ed2:	99 e0       	ldi	r25, 0x09	; 9
    1ed4:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <MD5Update_P>
MD5Final();
    1ed8:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <MD5Final>
/*  */

return ( (unsigned char)memcmp_P(Md5_Digest,test_md5_5_cmp,sizeof(test_md5_5_cmp) ));
    1edc:	40 e1       	ldi	r20, 0x10	; 16
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	65 e2       	ldi	r22, 0x25	; 37
    1ee2:	79 e0       	ldi	r23, 0x09	; 9
    1ee4:	84 e2       	ldi	r24, 0x24	; 36
    1ee6:	94 e0       	ldi	r25, 0x04	; 4
    1ee8:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
}
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	08 95       	ret

00001ef6 <test_md5_4>:
}

// 9E107D9D372BB6826BD81D3542A419D6
unsigned char PROGMEM test_md5_4_cmp[]={0x9E,0x10,0x7D,0x9D,0x37,0x2B,0xB6,0x82,0x6B,0xD8,0x1D,0x35,0x42,0xA4,0x19,0xD6};
unsigned char  test_md5_4(void)
{
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	ac 97       	sbiw	r28, 0x2c	; 44
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
unsigned char a[]={"The quick brown fox jumps over the lazy dog"};
    1f0e:	8e 01       	movw	r16, r28
    1f10:	0f 5f       	subi	r16, 0xFF	; 255
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	d8 01       	movw	r26, r16
    1f16:	e6 ed       	ldi	r30, 0xD6	; 214
    1f18:	f2 e0       	ldi	r31, 0x02	; 2
    1f1a:	8c e2       	ldi	r24, 0x2C	; 44
    1f1c:	01 90       	ld	r0, Z+
    1f1e:	0d 92       	st	X+, r0
    1f20:	81 50       	subi	r24, 0x01	; 1
    1f22:	e1 f7       	brne	.-8      	; 0x1f1c <test_md5_4+0x26>

MD5Init();
    1f24:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <MD5Init>
MD5Update(a,strlen((char *)a));
    1f28:	f8 01       	movw	r30, r16
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	00 20       	and	r0, r0
    1f2e:	e9 f7       	brne	.-6      	; 0x1f2a <test_md5_4+0x34>
    1f30:	31 97       	sbiw	r30, 0x01	; 1
    1f32:	e0 1b       	sub	r30, r16
    1f34:	f1 0b       	sbc	r31, r17
    1f36:	bf 01       	movw	r22, r30
    1f38:	c8 01       	movw	r24, r16
    1f3a:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Final();
    1f3e:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <MD5Final>
/*  */
return ( (unsigned char)memcmp_P(Md5_Digest,test_md5_4_cmp,sizeof(test_md5_4_cmp) ));
    1f42:	40 e1       	ldi	r20, 0x10	; 16
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	65 e1       	ldi	r22, 0x15	; 21
    1f48:	79 e0       	ldi	r23, 0x09	; 9
    1f4a:	84 e2       	ldi	r24, 0x24	; 36
    1f4c:	94 e0       	ldi	r25, 0x04	; 4
    1f4e:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
}
    1f52:	ac 96       	adiw	r28, 0x2c	; 44
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	08 95       	ret

00001f68 <test_md5_3>:

// adeb47ec979f9f74a06bd1c9283fb840 
// abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopqabcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopqmd5TestFectorsJustFortesting:md5TestFectorsJustFortesting:md5TestFectorsJustFortesting
unsigned char PROGMEM test_md5_3_cmp[]={0xad,0xeb,0x47,0xec,0x97,0x9f,0x9f,0x74,0xa0,0x6b,0xd1,0xc9,0x28,0x3f,0xb8,0x40};
unsigned char  test_md5_3(void)
{
    1f68:	cf 92       	push	r12
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	c1 59       	subi	r28, 0x91	; 145
    1f7e:	d0 40       	sbci	r29, 0x00	; 0
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
unsigned char a[]={"abcdbcdecdefdefgefghfg"};
    1f8a:	8e 01       	movw	r16, r28
    1f8c:	0f 5f       	subi	r16, 0xFF	; 255
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	d8 01       	movw	r26, r16
    1f92:	e2 e0       	ldi	r30, 0x02	; 2
    1f94:	f3 e0       	ldi	r31, 0x03	; 3
    1f96:	87 e1       	ldi	r24, 0x17	; 23
    1f98:	01 90       	ld	r0, Z+
    1f9a:	0d 92       	st	X+, r0
    1f9c:	81 50       	subi	r24, 0x01	; 1
    1f9e:	e1 f7       	brne	.-8      	; 0x1f98 <test_md5_3+0x30>
unsigned char b[]={"highijhijkijkljklmklmnlmnomnopnopq"};
    1fa0:	28 e1       	ldi	r18, 0x18	; 24
    1fa2:	e2 2e       	mov	r14, r18
    1fa4:	f1 2c       	mov	r15, r1
    1fa6:	ec 0e       	add	r14, r28
    1fa8:	fd 1e       	adc	r15, r29
    1faa:	d7 01       	movw	r26, r14
    1fac:	e9 e1       	ldi	r30, 0x19	; 25
    1fae:	f3 e0       	ldi	r31, 0x03	; 3
    1fb0:	83 e2       	ldi	r24, 0x23	; 35
    1fb2:	01 90       	ld	r0, Z+
    1fb4:	0d 92       	st	X+, r0
    1fb6:	81 50       	subi	r24, 0x01	; 1
    1fb8:	e1 f7       	brne	.-8      	; 0x1fb2 <test_md5_3+0x4a>
unsigned char c[]={"md5TestFectorsJustFortesting:md5TestFectorsJustFortesting:md5TestFectorsJustFortesting"};
    1fba:	9b e3       	ldi	r25, 0x3B	; 59
    1fbc:	c9 2e       	mov	r12, r25
    1fbe:	d1 2c       	mov	r13, r1
    1fc0:	cc 0e       	add	r12, r28
    1fc2:	dd 1e       	adc	r13, r29
    1fc4:	d6 01       	movw	r26, r12
    1fc6:	ec e3       	ldi	r30, 0x3C	; 60
    1fc8:	f3 e0       	ldi	r31, 0x03	; 3
    1fca:	87 e5       	ldi	r24, 0x57	; 87
    1fcc:	01 90       	ld	r0, Z+
    1fce:	0d 92       	st	X+, r0
    1fd0:	81 50       	subi	r24, 0x01	; 1
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <test_md5_3+0x64>

MD5Init();
    1fd4:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <MD5Init>
MD5Update(a,strlen((char *)a));
    1fd8:	f8 01       	movw	r30, r16
    1fda:	01 90       	ld	r0, Z+
    1fdc:	00 20       	and	r0, r0
    1fde:	e9 f7       	brne	.-6      	; 0x1fda <test_md5_3+0x72>
    1fe0:	31 97       	sbiw	r30, 0x01	; 1
    1fe2:	e0 1b       	sub	r30, r16
    1fe4:	f1 0b       	sbc	r31, r17
    1fe6:	bf 01       	movw	r22, r30
    1fe8:	c8 01       	movw	r24, r16
    1fea:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Update(b,strlen((char *)b));
    1fee:	f7 01       	movw	r30, r14
    1ff0:	01 90       	ld	r0, Z+
    1ff2:	00 20       	and	r0, r0
    1ff4:	e9 f7       	brne	.-6      	; 0x1ff0 <test_md5_3+0x88>
    1ff6:	31 97       	sbiw	r30, 0x01	; 1
    1ff8:	ee 19       	sub	r30, r14
    1ffa:	ff 09       	sbc	r31, r15
    1ffc:	bf 01       	movw	r22, r30
    1ffe:	c7 01       	movw	r24, r14
    2000:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Update(a,strlen((char *)a));
    2004:	f8 01       	movw	r30, r16
    2006:	01 90       	ld	r0, Z+
    2008:	00 20       	and	r0, r0
    200a:	e9 f7       	brne	.-6      	; 0x2006 <test_md5_3+0x9e>
    200c:	31 97       	sbiw	r30, 0x01	; 1
    200e:	e0 1b       	sub	r30, r16
    2010:	f1 0b       	sbc	r31, r17
    2012:	bf 01       	movw	r22, r30
    2014:	c8 01       	movw	r24, r16
    2016:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Update(b,strlen((char *)b));
    201a:	f7 01       	movw	r30, r14
    201c:	01 90       	ld	r0, Z+
    201e:	00 20       	and	r0, r0
    2020:	e9 f7       	brne	.-6      	; 0x201c <test_md5_3+0xb4>
    2022:	31 97       	sbiw	r30, 0x01	; 1
    2024:	ee 19       	sub	r30, r14
    2026:	ff 09       	sbc	r31, r15
    2028:	bf 01       	movw	r22, r30
    202a:	c7 01       	movw	r24, r14
    202c:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Update(c,strlen((char *)c));
    2030:	f6 01       	movw	r30, r12
    2032:	01 90       	ld	r0, Z+
    2034:	00 20       	and	r0, r0
    2036:	e9 f7       	brne	.-6      	; 0x2032 <test_md5_3+0xca>
    2038:	31 97       	sbiw	r30, 0x01	; 1
    203a:	ec 19       	sub	r30, r12
    203c:	fd 09       	sbc	r31, r13
    203e:	bf 01       	movw	r22, r30
    2040:	c6 01       	movw	r24, r12
    2042:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Final();
    2046:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <MD5Final>
/*  */

return ( (unsigned char)memcmp_P(Md5_Digest,test_md5_3_cmp,sizeof(test_md5_3_cmp)) );
    204a:	40 e1       	ldi	r20, 0x10	; 16
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	65 e0       	ldi	r22, 0x05	; 5
    2050:	79 e0       	ldi	r23, 0x09	; 9
    2052:	84 e2       	ldi	r24, 0x24	; 36
    2054:	94 e0       	ldi	r25, 0x04	; 4
    2056:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
}
    205a:	cf 56       	subi	r28, 0x6F	; 111
    205c:	df 4f       	sbci	r29, 0xFF	; 255
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	08 95       	ret

0000207a <test_md5_2>:


/* 8215EF0796A20BCAAAE116D3876C664A */
unsigned char PROGMEM test_md5_2_cmp[]={0x82,0x15,0xEF,0x07,0x96,0xA2,0x0B,0xCA,0xAA,0xE1,0x16,0xD3,0x87,0x6C,0x66,0x4A };
unsigned char  test_md5_2(void)
{
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	ea 97       	sbiw	r28, 0x3a	; 58
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
unsigned char a[]={"abcdbcdecdefdefgefghfg"};
    2096:	8e 01       	movw	r16, r28
    2098:	0f 5f       	subi	r16, 0xFF	; 255
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	d8 01       	movw	r26, r16
    209e:	e2 e0       	ldi	r30, 0x02	; 2
    20a0:	f3 e0       	ldi	r31, 0x03	; 3
    20a2:	87 e1       	ldi	r24, 0x17	; 23
    20a4:	01 90       	ld	r0, Z+
    20a6:	0d 92       	st	X+, r0
    20a8:	81 50       	subi	r24, 0x01	; 1
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <test_md5_2+0x2a>
unsigned char b[]={"highijhijkijkljklmklmnlmnomnopnopq"};
    20ac:	38 e1       	ldi	r19, 0x18	; 24
    20ae:	e3 2e       	mov	r14, r19
    20b0:	f1 2c       	mov	r15, r1
    20b2:	ec 0e       	add	r14, r28
    20b4:	fd 1e       	adc	r15, r29
    20b6:	d7 01       	movw	r26, r14
    20b8:	e9 e1       	ldi	r30, 0x19	; 25
    20ba:	f3 e0       	ldi	r31, 0x03	; 3
    20bc:	83 e2       	ldi	r24, 0x23	; 35
    20be:	01 90       	ld	r0, Z+
    20c0:	0d 92       	st	X+, r0
    20c2:	81 50       	subi	r24, 0x01	; 1
    20c4:	e1 f7       	brne	.-8      	; 0x20be <test_md5_2+0x44>

MD5Init();
    20c6:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <MD5Init>
MD5Update(a,strlen((char *)a));
    20ca:	f8 01       	movw	r30, r16
    20cc:	01 90       	ld	r0, Z+
    20ce:	00 20       	and	r0, r0
    20d0:	e9 f7       	brne	.-6      	; 0x20cc <test_md5_2+0x52>
    20d2:	31 97       	sbiw	r30, 0x01	; 1
    20d4:	e0 1b       	sub	r30, r16
    20d6:	f1 0b       	sbc	r31, r17
    20d8:	bf 01       	movw	r22, r30
    20da:	c8 01       	movw	r24, r16
    20dc:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Update(b,strlen((char *)b));
    20e0:	f7 01       	movw	r30, r14
    20e2:	01 90       	ld	r0, Z+
    20e4:	00 20       	and	r0, r0
    20e6:	e9 f7       	brne	.-6      	; 0x20e2 <test_md5_2+0x68>
    20e8:	31 97       	sbiw	r30, 0x01	; 1
    20ea:	ee 19       	sub	r30, r14
    20ec:	ff 09       	sbc	r31, r15
    20ee:	bf 01       	movw	r22, r30
    20f0:	c7 01       	movw	r24, r14
    20f2:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>

MD5Final();
    20f6:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <MD5Final>

return ((unsigned char) memcmp_P(Md5_Digest,test_md5_2_cmp,sizeof(test_md5_2_cmp)) );
    20fa:	40 e1       	ldi	r20, 0x10	; 16
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	65 ef       	ldi	r22, 0xF5	; 245
    2100:	78 e0       	ldi	r23, 0x08	; 8
    2102:	84 e2       	ldi	r24, 0x24	; 36
    2104:	94 e0       	ldi	r25, 0x04	; 4
    2106:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>

}
    210a:	ea 96       	adiw	r28, 0x3a	; 58
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	08 95       	ret

00002124 <test_md5_1>:

/* 0383E285 55C6B2D2 AE6F8F7A 6DF9B307 */
unsigned char PROGMEM test_md5_cmp[]={0x03,0x83,0xE2,0x85,0x55,0xC6,0xB2,0xD2,0xAE,0x6F,0x8F,0x7A,0x6D,0xF9,0xB3,0x07} ;

unsigned char test_md5_1(void)
{
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	69 97       	sbiw	r28, 0x19	; 25
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61

unsigned char c[]={"000000800000001F00000000"};
    213c:	8e 01       	movw	r16, r28
    213e:	0f 5f       	subi	r16, 0xFF	; 255
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	d8 01       	movw	r26, r16
    2144:	e3 e9       	ldi	r30, 0x93	; 147
    2146:	f3 e0       	ldi	r31, 0x03	; 3
    2148:	89 e1       	ldi	r24, 0x19	; 25
    214a:	01 90       	ld	r0, Z+
    214c:	0d 92       	st	X+, r0
    214e:	81 50       	subi	r24, 0x01	; 1
    2150:	e1 f7       	brne	.-8      	; 0x214a <test_md5_1+0x26>

MD5Init();
    2152:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <MD5Init>
MD5Update(c,strlen((char *)c));
    2156:	f8 01       	movw	r30, r16
    2158:	01 90       	ld	r0, Z+
    215a:	00 20       	and	r0, r0
    215c:	e9 f7       	brne	.-6      	; 0x2158 <test_md5_1+0x34>
    215e:	31 97       	sbiw	r30, 0x01	; 1
    2160:	e0 1b       	sub	r30, r16
    2162:	f1 0b       	sbc	r31, r17
    2164:	bf 01       	movw	r22, r30
    2166:	c8 01       	movw	r24, r16
    2168:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Final();
    216c:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <MD5Final>
return ( (unsigned char)memcmp_P(Md5_Digest,test_md5_cmp,sizeof(test_md5_cmp)) );
    2170:	40 e1       	ldi	r20, 0x10	; 16
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	65 ee       	ldi	r22, 0xE5	; 229
    2176:	78 e0       	ldi	r23, 0x08	; 8
    2178:	84 e2       	ldi	r24, 0x24	; 36
    217a:	94 e0       	ldi	r25, 0x04	; 4
    217c:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
}
    2180:	69 96       	adiw	r28, 0x19	; 25
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	08 95       	ret

00002196 <md5_test>:

return ( (unsigned char)memcmp_P(Md5_Digest,test_md5_5_cmp,sizeof(test_md5_5_cmp) ));
}

unsigned char md5_test(void)
{
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	c5 54       	subi	r28, 0x45	; 69
    21a8:	d0 40       	sbci	r29, 0x00	; 0
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
unsigned char PROGMEM test_md5_cmp[]={0x03,0x83,0xE2,0x85,0x55,0xC6,0xB2,0xD2,0xAE,0x6F,0x8F,0x7A,0x6D,0xF9,0xB3,0x07} ;

unsigned char test_md5_1(void)
{

unsigned char c[]={"000000800000001F00000000"};
    21b4:	8e 01       	movw	r16, r28
    21b6:	0f 5f       	subi	r16, 0xFF	; 255
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	d8 01       	movw	r26, r16
    21bc:	e3 e9       	ldi	r30, 0x93	; 147
    21be:	f3 e0       	ldi	r31, 0x03	; 3
    21c0:	89 e1       	ldi	r24, 0x19	; 25
    21c2:	01 90       	ld	r0, Z+
    21c4:	0d 92       	st	X+, r0
    21c6:	81 50       	subi	r24, 0x01	; 1
    21c8:	e1 f7       	brne	.-8      	; 0x21c2 <md5_test+0x2c>

MD5Init();
    21ca:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <MD5Init>
MD5Update(c,strlen((char *)c));
    21ce:	f8 01       	movw	r30, r16
    21d0:	01 90       	ld	r0, Z+
    21d2:	00 20       	and	r0, r0
    21d4:	e9 f7       	brne	.-6      	; 0x21d0 <md5_test+0x3a>
    21d6:	31 97       	sbiw	r30, 0x01	; 1
    21d8:	e0 1b       	sub	r30, r16
    21da:	f1 0b       	sbc	r31, r17
    21dc:	bf 01       	movw	r22, r30
    21de:	c8 01       	movw	r24, r16
    21e0:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Final();
    21e4:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <MD5Final>
return ( (unsigned char)memcmp_P(Md5_Digest,test_md5_cmp,sizeof(test_md5_cmp)) );
    21e8:	40 e1       	ldi	r20, 0x10	; 16
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	65 ee       	ldi	r22, 0xE5	; 229
    21ee:	78 e0       	ldi	r23, 0x08	; 8
    21f0:	84 e2       	ldi	r24, 0x24	; 36
    21f2:	94 e0       	ldi	r25, 0x04	; 4
    21f4:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    21f8:	18 2f       	mov	r17, r24
    21fa:	81 11       	cpse	r24, r1
    21fc:	11 e0       	ldi	r17, 0x01	; 1

unsigned char md5_test(void)
{
unsigned char Ret=0;
if(test_md5_1()) Ret|=0x01;
if(test_md5_2()) Ret|=0x02;
    21fe:	0e 94 3d 10 	call	0x207a	; 0x207a <test_md5_2>
    2202:	81 11       	cpse	r24, r1
    2204:	12 60       	ori	r17, 0x02	; 2
if(test_md5_3()) Ret|=0x04;
    2206:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <test_md5_3>
    220a:	81 11       	cpse	r24, r1
    220c:	14 60       	ori	r17, 0x04	; 4

// 9E107D9D372BB6826BD81D3542A419D6
unsigned char PROGMEM test_md5_4_cmp[]={0x9E,0x10,0x7D,0x9D,0x37,0x2B,0xB6,0x82,0x6B,0xD8,0x1D,0x35,0x42,0xA4,0x19,0xD6};
unsigned char  test_md5_4(void)
{
unsigned char a[]={"The quick brown fox jumps over the lazy dog"};
    220e:	4a e1       	ldi	r20, 0x1A	; 26
    2210:	e4 2e       	mov	r14, r20
    2212:	f1 2c       	mov	r15, r1
    2214:	ec 0e       	add	r14, r28
    2216:	fd 1e       	adc	r15, r29
    2218:	d7 01       	movw	r26, r14
    221a:	e6 ed       	ldi	r30, 0xD6	; 214
    221c:	f2 e0       	ldi	r31, 0x02	; 2
    221e:	8c e2       	ldi	r24, 0x2C	; 44
    2220:	01 90       	ld	r0, Z+
    2222:	0d 92       	st	X+, r0
    2224:	81 50       	subi	r24, 0x01	; 1
    2226:	e1 f7       	brne	.-8      	; 0x2220 <__stack+0x21>

MD5Init();
    2228:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <MD5Init>
MD5Update(a,strlen((char *)a));
    222c:	f7 01       	movw	r30, r14
    222e:	01 90       	ld	r0, Z+
    2230:	00 20       	and	r0, r0
    2232:	e9 f7       	brne	.-6      	; 0x222e <__stack+0x2f>
    2234:	31 97       	sbiw	r30, 0x01	; 1
    2236:	ee 19       	sub	r30, r14
    2238:	ff 09       	sbc	r31, r15
    223a:	bf 01       	movw	r22, r30
    223c:	c7 01       	movw	r24, r14
    223e:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <MD5Update>
MD5Final();
    2242:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <MD5Final>
/*  */
return ( (unsigned char)memcmp_P(Md5_Digest,test_md5_4_cmp,sizeof(test_md5_4_cmp) ));
    2246:	40 e1       	ldi	r20, 0x10	; 16
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	65 e1       	ldi	r22, 0x15	; 21
    224c:	79 e0       	ldi	r23, 0x09	; 9
    224e:	84 e2       	ldi	r24, 0x24	; 36
    2250:	94 e0       	ldi	r25, 0x04	; 4
    2252:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
{
unsigned char Ret=0;
if(test_md5_1()) Ret|=0x01;
if(test_md5_2()) Ret|=0x02;
if(test_md5_3()) Ret|=0x04;
if(test_md5_4()) Ret|=0x08;
    2256:	81 11       	cpse	r24, r1
    2258:	18 60       	ori	r17, 0x08	; 8
if(test_md5_5()) Ret|=0x10;
    225a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <test_md5_5>
    225e:	81 11       	cpse	r24, r1
    2260:	10 61       	ori	r17, 0x10	; 16
return Ret;
}
    2262:	81 2f       	mov	r24, r17
    2264:	cb 5b       	subi	r28, 0xBB	; 187
    2266:	df 4f       	sbci	r29, 0xFF	; 255
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	ff 90       	pop	r15
    227c:	ef 90       	pop	r14
    227e:	08 95       	ret

00002280 <SkipJack_test>:

// 11223344556677889900   AABBCCDD00112233   00D3127AE2CA8725


unsigned char SkipJack_test(void)
{
    2280:	1f 93       	push	r17
unsigned char ret=0;

	memcpy_P(SkipJack_Test_Key,SkipJack_Test1_Key,sizeof(SkipJack_Test1_Key));
    2282:	4a e0       	ldi	r20, 0x0A	; 10
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	66 ec       	ldi	r22, 0xC6	; 198
    2288:	79 e0       	ldi	r23, 0x09	; 9
    228a:	80 e5       	ldi	r24, 0x50	; 80
    228c:	9b e0       	ldi	r25, 0x0B	; 11
    228e:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(SkipJack_Test_Plain,SkipJack_Test1_Plain,sizeof(SkipJack_Test1_Plain));
    2292:	48 e0       	ldi	r20, 0x08	; 8
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	60 ed       	ldi	r22, 0xD0	; 208
    2298:	79 e0       	ldi	r23, 0x09	; 9
    229a:	82 e6       	ldi	r24, 0x62	; 98
    229c:	9b e0       	ldi	r25, 0x0B	; 11
    229e:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	SkipJack_Enc(SkipJack_Test_Plain, SkipJack_Test_Key);
    22a2:	60 e5       	ldi	r22, 0x50	; 80
    22a4:	7b e0       	ldi	r23, 0x0B	; 11
    22a6:	82 e6       	ldi	r24, 0x62	; 98
    22a8:	9b e0       	ldi	r25, 0x0B	; 11
    22aa:	0e 94 3a 21 	call	0x4274	; 0x4274 <SkipJack_Enc>
	if(memcmp_P(SkipJack_Test_Plain,SkipJack_Test1_Cipher,sizeof(SkipJack_Test1_Cipher)))
    22ae:	48 e0       	ldi	r20, 0x08	; 8
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	68 ed       	ldi	r22, 0xD8	; 216
    22b4:	79 e0       	ldi	r23, 0x09	; 9
    22b6:	82 e6       	ldi	r24, 0x62	; 98
    22b8:	9b e0       	ldi	r25, 0x0B	; 11
    22ba:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    22be:	10 e0       	ldi	r17, 0x00	; 0
    22c0:	89 2b       	or	r24, r25
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <SkipJack_test+0x46>
    22c4:	11 e0       	ldi	r17, 0x01	; 1
	{
		ret|=1;
	}

	memcpy_P(SkipJack_Test_Key,SkipJack_Test1_Key,sizeof(SkipJack_Test1_Key));
    22c6:	4a e0       	ldi	r20, 0x0A	; 10
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	66 ec       	ldi	r22, 0xC6	; 198
    22cc:	79 e0       	ldi	r23, 0x09	; 9
    22ce:	80 e5       	ldi	r24, 0x50	; 80
    22d0:	9b e0       	ldi	r25, 0x0B	; 11
    22d2:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(SkipJack_Test_Plain,SkipJack_Test1_Cipher,sizeof(SkipJack_Test1_Cipher));
    22d6:	48 e0       	ldi	r20, 0x08	; 8
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	68 ed       	ldi	r22, 0xD8	; 216
    22dc:	79 e0       	ldi	r23, 0x09	; 9
    22de:	82 e6       	ldi	r24, 0x62	; 98
    22e0:	9b e0       	ldi	r25, 0x0B	; 11
    22e2:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	SkipJack_Dec(SkipJack_Test_Plain, SkipJack_Test_Key);
    22e6:	60 e5       	ldi	r22, 0x50	; 80
    22e8:	7b e0       	ldi	r23, 0x0B	; 11
    22ea:	82 e6       	ldi	r24, 0x62	; 98
    22ec:	9b e0       	ldi	r25, 0x0B	; 11
    22ee:	0e 94 c3 21 	call	0x4386	; 0x4386 <SkipJack_Dec>
	if(memcmp_P(SkipJack_Test_Plain,SkipJack_Test1_Plain,sizeof(SkipJack_Test1_Plain)))
    22f2:	48 e0       	ldi	r20, 0x08	; 8
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	60 ed       	ldi	r22, 0xD0	; 208
    22f8:	79 e0       	ldi	r23, 0x09	; 9
    22fa:	82 e6       	ldi	r24, 0x62	; 98
    22fc:	9b e0       	ldi	r25, 0x0B	; 11
    22fe:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2302:	89 2b       	or	r24, r25
    2304:	09 f0       	breq	.+2      	; 0x2308 <SkipJack_test+0x88>
	{
		ret|=2;
    2306:	12 60       	ori	r17, 0x02	; 2
	}

	memcpy_P(SkipJack_Test_Key,SkipJack_Test2_Key,sizeof(SkipJack_Test2_Key));
    2308:	4a e0       	ldi	r20, 0x0A	; 10
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	60 ee       	ldi	r22, 0xE0	; 224
    230e:	79 e0       	ldi	r23, 0x09	; 9
    2310:	80 e5       	ldi	r24, 0x50	; 80
    2312:	9b e0       	ldi	r25, 0x0B	; 11
    2314:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(SkipJack_Test_Plain,SkipJack_Test2_Plain,sizeof(SkipJack_Test2_Plain));
    2318:	48 e0       	ldi	r20, 0x08	; 8
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	6a ee       	ldi	r22, 0xEA	; 234
    231e:	79 e0       	ldi	r23, 0x09	; 9
    2320:	82 e6       	ldi	r24, 0x62	; 98
    2322:	9b e0       	ldi	r25, 0x0B	; 11
    2324:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	SkipJack_Enc(SkipJack_Test_Plain, SkipJack_Test_Key);
    2328:	60 e5       	ldi	r22, 0x50	; 80
    232a:	7b e0       	ldi	r23, 0x0B	; 11
    232c:	82 e6       	ldi	r24, 0x62	; 98
    232e:	9b e0       	ldi	r25, 0x0B	; 11
    2330:	0e 94 3a 21 	call	0x4274	; 0x4274 <SkipJack_Enc>
	if(memcmp_P(SkipJack_Test_Plain,SkipJack_Test2_Cipher,sizeof(SkipJack_Test2_Cipher)))
    2334:	48 e0       	ldi	r20, 0x08	; 8
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	62 ef       	ldi	r22, 0xF2	; 242
    233a:	79 e0       	ldi	r23, 0x09	; 9
    233c:	82 e6       	ldi	r24, 0x62	; 98
    233e:	9b e0       	ldi	r25, 0x0B	; 11
    2340:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2344:	89 2b       	or	r24, r25
    2346:	09 f0       	breq	.+2      	; 0x234a <SkipJack_test+0xca>
	{
		ret|=4;
    2348:	14 60       	ori	r17, 0x04	; 4
	}

	memcpy_P(SkipJack_Test_Key,SkipJack_Test2_Key,sizeof(SkipJack_Test2_Key));
    234a:	4a e0       	ldi	r20, 0x0A	; 10
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	60 ee       	ldi	r22, 0xE0	; 224
    2350:	79 e0       	ldi	r23, 0x09	; 9
    2352:	80 e5       	ldi	r24, 0x50	; 80
    2354:	9b e0       	ldi	r25, 0x0B	; 11
    2356:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(SkipJack_Test_Plain,SkipJack_Test2_Cipher,sizeof(SkipJack_Test2_Cipher));
    235a:	48 e0       	ldi	r20, 0x08	; 8
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	62 ef       	ldi	r22, 0xF2	; 242
    2360:	79 e0       	ldi	r23, 0x09	; 9
    2362:	82 e6       	ldi	r24, 0x62	; 98
    2364:	9b e0       	ldi	r25, 0x0B	; 11
    2366:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	SkipJack_Dec(SkipJack_Test_Plain, SkipJack_Test_Key);
    236a:	60 e5       	ldi	r22, 0x50	; 80
    236c:	7b e0       	ldi	r23, 0x0B	; 11
    236e:	82 e6       	ldi	r24, 0x62	; 98
    2370:	9b e0       	ldi	r25, 0x0B	; 11
    2372:	0e 94 c3 21 	call	0x4386	; 0x4386 <SkipJack_Dec>
	if(memcmp_P(SkipJack_Test_Plain,SkipJack_Test2_Plain,sizeof(SkipJack_Test2_Plain)))
    2376:	48 e0       	ldi	r20, 0x08	; 8
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	6a ee       	ldi	r22, 0xEA	; 234
    237c:	79 e0       	ldi	r23, 0x09	; 9
    237e:	82 e6       	ldi	r24, 0x62	; 98
    2380:	9b e0       	ldi	r25, 0x0B	; 11
    2382:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2386:	89 2b       	or	r24, r25
    2388:	09 f0       	breq	.+2      	; 0x238c <SkipJack_test+0x10c>
	{
		ret|=8;
    238a:	18 60       	ori	r17, 0x08	; 8
	}


return ret;
}
    238c:	81 2f       	mov	r24, r17
    238e:	1f 91       	pop	r17
    2390:	08 95       	ret

00002392 <AES_SR_test>:
	if(memcmp_P(AES_Data,AES_Test_Data_2,Plain_len))	ret|=1;
	return ret;
}

unsigned char AES_SR_test(void)
{
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
	unsigned char Key_len = 0;
	unsigned char Plain_len = 0;

	Key_len=16;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
    2396:	40 e1       	ldi	r20, 0x10	; 16
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	6a e1       	ldi	r22, 0x1A	; 26
    239c:	7a e0       	ldi	r23, 0x0A	; 10
    239e:	8a e8       	ldi	r24, 0x8A	; 138
    23a0:	9e e0       	ldi	r25, 0x0E	; 14
    23a2:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
    23a6:	40 e1       	ldi	r20, 0x10	; 16
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	6a ef       	ldi	r22, 0xFA	; 250
    23ac:	79 e0       	ldi	r23, 0x09	; 9
    23ae:	8a e6       	ldi	r24, 0x6A	; 106
    23b0:	9d e0       	ldi	r25, 0x0D	; 13
    23b2:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SR_Init( tempbuf ,AES_Key );
    23b6:	6a e8       	ldi	r22, 0x8A	; 138
    23b8:	7e e0       	ldi	r23, 0x0E	; 14
    23ba:	8a e8       	ldi	r24, 0x8A	; 138
    23bc:	9d e0       	ldi	r25, 0x0D	; 13
    23be:	0e 94 72 24 	call	0x48e4	; 0x48e4 <AES_128_SR_Init>
	AES_128_SR_Encrypt(AES_Data);
    23c2:	8a e6       	ldi	r24, 0x6A	; 106
    23c4:	9d e0       	ldi	r25, 0x0D	; 13
    23c6:	0e 94 d5 27 	call	0x4faa	; 0x4faa <AES_128_SR_Encrypt>
	AES_128_SR_Decrypt(AES_Data);
    23ca:	8a e6       	ldi	r24, 0x6A	; 106
    23cc:	9d e0       	ldi	r25, 0x0D	; 13
    23ce:	0e 94 88 27 	call	0x4f10	; 0x4f10 <AES_128_SR_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=0x10;
    23d2:	40 e1       	ldi	r20, 0x10	; 16
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	6a ef       	ldi	r22, 0xFA	; 250
    23d8:	79 e0       	ldi	r23, 0x09	; 9
    23da:	8a e6       	ldi	r24, 0x6A	; 106
    23dc:	9d e0       	ldi	r25, 0x0D	; 13
    23de:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    23e2:	89 2b       	or	r24, r25
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <AES_SR_test+0x56>
    23e6:	46 c1       	rjmp	.+652    	; 0x2674 <AES_SR_test+0x2e2>
    23e8:	00 e1       	ldi	r16, 0x10	; 16
    23ea:	11 e1       	ldi	r17, 0x11	; 17
// key     = 2b7e151628aed2a6abf7158809cf4f3c
// input   = 3243f6a8885a308d313198a2e0370734
// encrypt = 3925841d02dc09fbdc118597196a0b32
	Key_len=16;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
    23ec:	40 e1       	ldi	r20, 0x10	; 16
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	6a e1       	ldi	r22, 0x1A	; 26
    23f2:	7a e0       	ldi	r23, 0x0A	; 10
    23f4:	8a e8       	ldi	r24, 0x8A	; 138
    23f6:	9e e0       	ldi	r25, 0x0E	; 14
    23f8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SR_Init( tempbuf ,AES_Key );
    23fc:	6a e8       	ldi	r22, 0x8A	; 138
    23fe:	7e e0       	ldi	r23, 0x0E	; 14
    2400:	8a e8       	ldi	r24, 0x8A	; 138
    2402:	9d e0       	ldi	r25, 0x0D	; 13
    2404:	0e 94 72 24 	call	0x48e4	; 0x48e4 <AES_128_SR_Init>
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
    2408:	40 e1       	ldi	r20, 0x10	; 16
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	6a ef       	ldi	r22, 0xFA	; 250
    240e:	79 e0       	ldi	r23, 0x09	; 9
    2410:	8a e6       	ldi	r24, 0x6A	; 106
    2412:	9d e0       	ldi	r25, 0x0D	; 13
    2414:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SR_Encrypt(AES_Data);
    2418:	8a e6       	ldi	r24, 0x6A	; 106
    241a:	9d e0       	ldi	r25, 0x0D	; 13
    241c:	0e 94 d5 27 	call	0x4faa	; 0x4faa <AES_128_SR_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_128_1,Plain_len))	ret|=1;
    2420:	40 e1       	ldi	r20, 0x10	; 16
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	6a e3       	ldi	r22, 0x3A	; 58
    2426:	7a e0       	ldi	r23, 0x0A	; 10
    2428:	8a e6       	ldi	r24, 0x6A	; 106
    242a:	9d e0       	ldi	r25, 0x0D	; 13
    242c:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2430:	89 2b       	or	r24, r25
    2432:	09 f4       	brne	.+2      	; 0x2436 <AES_SR_test+0xa4>
    2434:	10 2f       	mov	r17, r16


	memcpy_P(AES_Data,AES_Test_Result_128_1,Plain_len);
    2436:	40 e1       	ldi	r20, 0x10	; 16
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	6a e3       	ldi	r22, 0x3A	; 58
    243c:	7a e0       	ldi	r23, 0x0A	; 10
    243e:	8a e6       	ldi	r24, 0x6A	; 106
    2440:	9d e0       	ldi	r25, 0x0D	; 13
    2442:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SR_Decrypt(AES_Data);
    2446:	8a e6       	ldi	r24, 0x6A	; 106
    2448:	9d e0       	ldi	r25, 0x0D	; 13
    244a:	0e 94 88 27 	call	0x4f10	; 0x4f10 <AES_128_SR_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=1;
    244e:	40 e1       	ldi	r20, 0x10	; 16
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	6a ef       	ldi	r22, 0xFA	; 250
    2454:	79 e0       	ldi	r23, 0x09	; 9
    2456:	8a e6       	ldi	r24, 0x6A	; 106
    2458:	9d e0       	ldi	r25, 0x0D	; 13
    245a:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    245e:	89 2b       	or	r24, r25
    2460:	09 f0       	breq	.+2      	; 0x2464 <AES_SR_test+0xd2>
    2462:	11 60       	ori	r17, 0x01	; 1
// key     = 2b7e151628aed2a6abf7158809cf4f3c762e7160f38b4da5
// input   = 3243f6a8885a308d313198a2e0370734
// encrypt = f9fb29aefc384a250340d833b87ebc00
	Key_len=24;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
    2464:	48 e1       	ldi	r20, 0x18	; 24
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	6a e1       	ldi	r22, 0x1A	; 26
    246a:	7a e0       	ldi	r23, 0x0A	; 10
    246c:	8a e8       	ldi	r24, 0x8A	; 138
    246e:	9e e0       	ldi	r25, 0x0E	; 14
    2470:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_192_SR_Init( tempbuf ,AES_Key );
    2474:	6a e8       	ldi	r22, 0x8A	; 138
    2476:	7e e0       	ldi	r23, 0x0E	; 14
    2478:	8a e8       	ldi	r24, 0x8A	; 138
    247a:	9d e0       	ldi	r25, 0x0D	; 13
    247c:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <AES_192_SR_Init>
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
    2480:	40 e1       	ldi	r20, 0x10	; 16
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	6a ef       	ldi	r22, 0xFA	; 250
    2486:	79 e0       	ldi	r23, 0x09	; 9
    2488:	8a e6       	ldi	r24, 0x6A	; 106
    248a:	9d e0       	ldi	r25, 0x0D	; 13
    248c:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_192_SR_Encrypt(AES_Data);
    2490:	8a e6       	ldi	r24, 0x6A	; 106
    2492:	9d e0       	ldi	r25, 0x0D	; 13
    2494:	0e 94 74 28 	call	0x50e8	; 0x50e8 <AES_192_SR_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_192_1,Plain_len))	ret|=1;
    2498:	40 e1       	ldi	r20, 0x10	; 16
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	6a e4       	ldi	r22, 0x4A	; 74
    249e:	7a e0       	ldi	r23, 0x0A	; 10
    24a0:	8a e6       	ldi	r24, 0x6A	; 106
    24a2:	9d e0       	ldi	r25, 0x0D	; 13
    24a4:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    24a8:	89 2b       	or	r24, r25
    24aa:	09 f0       	breq	.+2      	; 0x24ae <AES_SR_test+0x11c>
    24ac:	11 60       	ori	r17, 0x01	; 1
	AES_192_SR_Decrypt(AES_Data);
    24ae:	8a e6       	ldi	r24, 0x6A	; 106
    24b0:	9d e0       	ldi	r25, 0x0D	; 13
    24b2:	0e 94 27 28 	call	0x504e	; 0x504e <AES_192_SR_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=1;
    24b6:	40 e1       	ldi	r20, 0x10	; 16
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	6a ef       	ldi	r22, 0xFA	; 250
    24bc:	79 e0       	ldi	r23, 0x09	; 9
    24be:	8a e6       	ldi	r24, 0x6A	; 106
    24c0:	9d e0       	ldi	r25, 0x0D	; 13
    24c2:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    24c6:	89 2b       	or	r24, r25
    24c8:	09 f0       	breq	.+2      	; 0x24cc <AES_SR_test+0x13a>
    24ca:	11 60       	ori	r17, 0x01	; 1
// input   = 3243f6a8885a308d313198a2e0370734
// encrypt = 1a6e6c2c662e7da6501ffb62bc9e93f3

	Key_len=32;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	50 e0       	ldi	r21, 0x00	; 0
    24d0:	6a e1       	ldi	r22, 0x1A	; 26
    24d2:	7a e0       	ldi	r23, 0x0A	; 10
    24d4:	8a e8       	ldi	r24, 0x8A	; 138
    24d6:	9e e0       	ldi	r25, 0x0E	; 14
    24d8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_256_SR_Init( tempbuf ,AES_Key );
    24dc:	6a e8       	ldi	r22, 0x8A	; 138
    24de:	7e e0       	ldi	r23, 0x0E	; 14
    24e0:	8a e8       	ldi	r24, 0x8A	; 138
    24e2:	9d e0       	ldi	r25, 0x0D	; 13
    24e4:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <AES_256_SR_Init>
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
    24e8:	40 e1       	ldi	r20, 0x10	; 16
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	6a ef       	ldi	r22, 0xFA	; 250
    24ee:	79 e0       	ldi	r23, 0x09	; 9
    24f0:	8a e6       	ldi	r24, 0x6A	; 106
    24f2:	9d e0       	ldi	r25, 0x0D	; 13
    24f4:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_256_SR_Encrypt(AES_Data);
    24f8:	8a e6       	ldi	r24, 0x6A	; 106
    24fa:	9d e0       	ldi	r25, 0x0D	; 13
    24fc:	0e 94 13 29 	call	0x5226	; 0x5226 <AES_256_SR_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_256_1,Plain_len))	ret|=1;
    2500:	40 e1       	ldi	r20, 0x10	; 16
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	6a e5       	ldi	r22, 0x5A	; 90
    2506:	7a e0       	ldi	r23, 0x0A	; 10
    2508:	8a e6       	ldi	r24, 0x6A	; 106
    250a:	9d e0       	ldi	r25, 0x0D	; 13
    250c:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2510:	89 2b       	or	r24, r25
    2512:	09 f0       	breq	.+2      	; 0x2516 <AES_SR_test+0x184>
    2514:	11 60       	ori	r17, 0x01	; 1
	AES_256_SR_Decrypt(AES_Data);
    2516:	8a e6       	ldi	r24, 0x6A	; 106
    2518:	9d e0       	ldi	r25, 0x0D	; 13
    251a:	0e 94 c6 28 	call	0x518c	; 0x518c <AES_256_SR_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=1;
    251e:	40 e1       	ldi	r20, 0x10	; 16
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	6a ef       	ldi	r22, 0xFA	; 250
    2524:	79 e0       	ldi	r23, 0x09	; 9
    2526:	8a e6       	ldi	r24, 0x6A	; 106
    2528:	9d e0       	ldi	r25, 0x0D	; 13
    252a:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    252e:	89 2b       	or	r24, r25
    2530:	09 f0       	breq	.+2      	; 0x2534 <AES_SR_test+0x1a2>
    2532:	11 60       	ori	r17, 0x01	; 1
// input   = 00112233445566778899aabbccddeeff
// encrypt = 69c4e0d86a7b0430d8cdb78070b4c55a

	Key_len=16;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_2,Key_len);
    2534:	40 e1       	ldi	r20, 0x10	; 16
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	6a e6       	ldi	r22, 0x6A	; 106
    253a:	7a e0       	ldi	r23, 0x0A	; 10
    253c:	8a e8       	ldi	r24, 0x8A	; 138
    253e:	9e e0       	ldi	r25, 0x0E	; 14
    2540:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SR_Init( tempbuf ,AES_Key );
    2544:	6a e8       	ldi	r22, 0x8A	; 138
    2546:	7e e0       	ldi	r23, 0x0E	; 14
    2548:	8a e8       	ldi	r24, 0x8A	; 138
    254a:	9d e0       	ldi	r25, 0x0D	; 13
    254c:	0e 94 72 24 	call	0x48e4	; 0x48e4 <AES_128_SR_Init>
	memcpy_P(AES_Data,AES_Test_Data_2,Plain_len);
    2550:	40 e1       	ldi	r20, 0x10	; 16
    2552:	50 e0       	ldi	r21, 0x00	; 0
    2554:	6a e8       	ldi	r22, 0x8A	; 138
    2556:	7a e0       	ldi	r23, 0x0A	; 10
    2558:	8a e6       	ldi	r24, 0x6A	; 106
    255a:	9d e0       	ldi	r25, 0x0D	; 13
    255c:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SR_Encrypt(AES_Data);
    2560:	8a e6       	ldi	r24, 0x6A	; 106
    2562:	9d e0       	ldi	r25, 0x0D	; 13
    2564:	0e 94 d5 27 	call	0x4faa	; 0x4faa <AES_128_SR_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_128_2,Plain_len))	ret|=1;
    2568:	40 e1       	ldi	r20, 0x10	; 16
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	6a e9       	ldi	r22, 0x9A	; 154
    256e:	7a e0       	ldi	r23, 0x0A	; 10
    2570:	8a e6       	ldi	r24, 0x6A	; 106
    2572:	9d e0       	ldi	r25, 0x0D	; 13
    2574:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2578:	89 2b       	or	r24, r25
    257a:	09 f0       	breq	.+2      	; 0x257e <AES_SR_test+0x1ec>
    257c:	11 60       	ori	r17, 0x01	; 1
	AES_128_SR_Decrypt(AES_Data);
    257e:	8a e6       	ldi	r24, 0x6A	; 106
    2580:	9d e0       	ldi	r25, 0x0D	; 13
    2582:	0e 94 88 27 	call	0x4f10	; 0x4f10 <AES_128_SR_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_2,Plain_len))	ret|=1;
    2586:	40 e1       	ldi	r20, 0x10	; 16
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	6a e8       	ldi	r22, 0x8A	; 138
    258c:	7a e0       	ldi	r23, 0x0A	; 10
    258e:	8a e6       	ldi	r24, 0x6A	; 106
    2590:	9d e0       	ldi	r25, 0x0D	; 13
    2592:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2596:	89 2b       	or	r24, r25
    2598:	09 f0       	breq	.+2      	; 0x259c <AES_SR_test+0x20a>
    259a:	11 60       	ori	r17, 0x01	; 1
// key     = 000102030405060708090a0b0c0d0e0f1011121314151617
// input   = 00112233445566778899aabbccddeeff
// encrypt = dda97ca4864cdfe06eaf70a0ec0d7191
	Key_len=24;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_2,Key_len);
    259c:	48 e1       	ldi	r20, 0x18	; 24
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	6a e6       	ldi	r22, 0x6A	; 106
    25a2:	7a e0       	ldi	r23, 0x0A	; 10
    25a4:	8a e8       	ldi	r24, 0x8A	; 138
    25a6:	9e e0       	ldi	r25, 0x0E	; 14
    25a8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_192_SR_Init( tempbuf ,AES_Key );
    25ac:	6a e8       	ldi	r22, 0x8A	; 138
    25ae:	7e e0       	ldi	r23, 0x0E	; 14
    25b0:	8a e8       	ldi	r24, 0x8A	; 138
    25b2:	9d e0       	ldi	r25, 0x0D	; 13
    25b4:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <AES_192_SR_Init>
	memcpy_P(AES_Data,AES_Test_Data_2,Plain_len);
    25b8:	40 e1       	ldi	r20, 0x10	; 16
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	6a e8       	ldi	r22, 0x8A	; 138
    25be:	7a e0       	ldi	r23, 0x0A	; 10
    25c0:	8a e6       	ldi	r24, 0x6A	; 106
    25c2:	9d e0       	ldi	r25, 0x0D	; 13
    25c4:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_192_SR_Encrypt(AES_Data);
    25c8:	8a e6       	ldi	r24, 0x6A	; 106
    25ca:	9d e0       	ldi	r25, 0x0D	; 13
    25cc:	0e 94 74 28 	call	0x50e8	; 0x50e8 <AES_192_SR_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_192_2,Plain_len))	ret|=1;
    25d0:	40 e1       	ldi	r20, 0x10	; 16
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	6a ea       	ldi	r22, 0xAA	; 170
    25d6:	7a e0       	ldi	r23, 0x0A	; 10
    25d8:	8a e6       	ldi	r24, 0x6A	; 106
    25da:	9d e0       	ldi	r25, 0x0D	; 13
    25dc:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    25e0:	89 2b       	or	r24, r25
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <AES_SR_test+0x254>
    25e4:	11 60       	ori	r17, 0x01	; 1
	AES_192_SR_Decrypt(AES_Data);
    25e6:	8a e6       	ldi	r24, 0x6A	; 106
    25e8:	9d e0       	ldi	r25, 0x0D	; 13
    25ea:	0e 94 27 28 	call	0x504e	; 0x504e <AES_192_SR_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_2,Plain_len))	ret|=1;
    25ee:	40 e1       	ldi	r20, 0x10	; 16
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	6a e8       	ldi	r22, 0x8A	; 138
    25f4:	7a e0       	ldi	r23, 0x0A	; 10
    25f6:	8a e6       	ldi	r24, 0x6A	; 106
    25f8:	9d e0       	ldi	r25, 0x0D	; 13
    25fa:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    25fe:	89 2b       	or	r24, r25
    2600:	09 f0       	breq	.+2      	; 0x2604 <AES_SR_test+0x272>
    2602:	11 60       	ori	r17, 0x01	; 1
// input   = 00112233445566778899aabbccddeeff
// encrypt = 8ea2b7ca516745bfeafc49904b496089

	Key_len=32;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_2,Key_len);
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	50 e0       	ldi	r21, 0x00	; 0
    2608:	6a e6       	ldi	r22, 0x6A	; 106
    260a:	7a e0       	ldi	r23, 0x0A	; 10
    260c:	8a e8       	ldi	r24, 0x8A	; 138
    260e:	9e e0       	ldi	r25, 0x0E	; 14
    2610:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_256_SR_Init( tempbuf ,AES_Key );
    2614:	6a e8       	ldi	r22, 0x8A	; 138
    2616:	7e e0       	ldi	r23, 0x0E	; 14
    2618:	8a e8       	ldi	r24, 0x8A	; 138
    261a:	9d e0       	ldi	r25, 0x0D	; 13
    261c:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <AES_256_SR_Init>
	memcpy_P(AES_Data,AES_Test_Data_2,Plain_len);
    2620:	40 e1       	ldi	r20, 0x10	; 16
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	6a e8       	ldi	r22, 0x8A	; 138
    2626:	7a e0       	ldi	r23, 0x0A	; 10
    2628:	8a e6       	ldi	r24, 0x6A	; 106
    262a:	9d e0       	ldi	r25, 0x0D	; 13
    262c:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_256_SR_Encrypt(AES_Data);
    2630:	8a e6       	ldi	r24, 0x6A	; 106
    2632:	9d e0       	ldi	r25, 0x0D	; 13
    2634:	0e 94 13 29 	call	0x5226	; 0x5226 <AES_256_SR_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_256_2,Plain_len))	ret|=1;
    2638:	40 e1       	ldi	r20, 0x10	; 16
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	6a eb       	ldi	r22, 0xBA	; 186
    263e:	7a e0       	ldi	r23, 0x0A	; 10
    2640:	8a e6       	ldi	r24, 0x6A	; 106
    2642:	9d e0       	ldi	r25, 0x0D	; 13
    2644:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2648:	89 2b       	or	r24, r25
    264a:	09 f0       	breq	.+2      	; 0x264e <AES_SR_test+0x2bc>
    264c:	11 60       	ori	r17, 0x01	; 1
	AES_256_SR_Decrypt(AES_Data);
    264e:	8a e6       	ldi	r24, 0x6A	; 106
    2650:	9d e0       	ldi	r25, 0x0D	; 13
    2652:	0e 94 c6 28 	call	0x518c	; 0x518c <AES_256_SR_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_2,Plain_len))	ret|=1;
    2656:	40 e1       	ldi	r20, 0x10	; 16
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	6a e8       	ldi	r22, 0x8A	; 138
    265c:	7a e0       	ldi	r23, 0x0A	; 10
    265e:	8a e6       	ldi	r24, 0x6A	; 106
    2660:	9d e0       	ldi	r25, 0x0D	; 13
    2662:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2666:	89 2b       	or	r24, r25
    2668:	09 f0       	breq	.+2      	; 0x266c <AES_SR_test+0x2da>
    266a:	11 60       	ori	r17, 0x01	; 1
	return ret;
}
    266c:	81 2f       	mov	r24, r17
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	08 95       	ret
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
	AES_128_SR_Init( tempbuf ,AES_Key );
	AES_128_SR_Encrypt(AES_Data);
	AES_128_SR_Decrypt(AES_Data);
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=0x10;
    2674:	00 e0       	ldi	r16, 0x00	; 0
    2676:	11 e0       	ldi	r17, 0x01	; 1
    2678:	b9 ce       	rjmp	.-654    	; 0x23ec <AES_SR_test+0x5a>

0000267a <AES_SF_test>:

unsigned char AES_Key[256/8];
unsigned char AES_Data[256/8];

unsigned char AES_SF_test(void)
{
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
// key     = 2b7e151628aed2a6abf7158809cf4f3c
// input   = 3243f6a8885a308d313198a2e0370734
// encrypt = 3925841d02dc09fbdc118597196a0b32
	Key_len=16;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
    267e:	40 e1       	ldi	r20, 0x10	; 16
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	6a e1       	ldi	r22, 0x1A	; 26
    2684:	7a e0       	ldi	r23, 0x0A	; 10
    2686:	8a e8       	ldi	r24, 0x8A	; 138
    2688:	9e e0       	ldi	r25, 0x0E	; 14
    268a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
    268e:	40 e1       	ldi	r20, 0x10	; 16
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	6a ef       	ldi	r22, 0xFA	; 250
    2694:	79 e0       	ldi	r23, 0x09	; 9
    2696:	8a e6       	ldi	r24, 0x6A	; 106
    2698:	9d e0       	ldi	r25, 0x0D	; 13
    269a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SF_Init( tempbuf,tempbuf1,tempbuf2 ,AES_Key );	
    269e:	2a e8       	ldi	r18, 0x8A	; 138
    26a0:	3e e0       	ldi	r19, 0x0E	; 14
    26a2:	4a e6       	ldi	r20, 0x6A	; 106
    26a4:	5c e0       	ldi	r21, 0x0C	; 12
    26a6:	6a e6       	ldi	r22, 0x6A	; 106
    26a8:	7b e0       	ldi	r23, 0x0B	; 11
    26aa:	8a e8       	ldi	r24, 0x8A	; 138
    26ac:	9d e0       	ldi	r25, 0x0D	; 13
    26ae:	0e 94 3e 22 	call	0x447c	; 0x447c <AES_128_SF_Init>
	AES_128_SF_Encrypt(AES_Data);
    26b2:	8a e6       	ldi	r24, 0x6A	; 106
    26b4:	9d e0       	ldi	r25, 0x0D	; 13
    26b6:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <AES_128_SF_Encrypt>
	AES_128_SF_Decrypt(AES_Data);
    26ba:	8a e6       	ldi	r24, 0x6A	; 106
    26bc:	9d e0       	ldi	r25, 0x0D	; 13
    26be:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <AES_128_SF_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=0x10;
    26c2:	40 e1       	ldi	r20, 0x10	; 16
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	6a ef       	ldi	r22, 0xFA	; 250
    26c8:	79 e0       	ldi	r23, 0x09	; 9
    26ca:	8a e6       	ldi	r24, 0x6A	; 106
    26cc:	9d e0       	ldi	r25, 0x0D	; 13
    26ce:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    26d2:	89 2b       	or	r24, r25
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <AES_SF_test+0x5e>
    26d6:	56 c1       	rjmp	.+684    	; 0x2984 <AES_SF_test+0x30a>
    26d8:	00 e1       	ldi	r16, 0x10	; 16
    26da:	11 e1       	ldi	r17, 0x11	; 17

	Key_len=16;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
    26dc:	40 e1       	ldi	r20, 0x10	; 16
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	6a e1       	ldi	r22, 0x1A	; 26
    26e2:	7a e0       	ldi	r23, 0x0A	; 10
    26e4:	8a e8       	ldi	r24, 0x8A	; 138
    26e6:	9e e0       	ldi	r25, 0x0E	; 14
    26e8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SF_Init( tempbuf,tempbuf1,tempbuf2 ,AES_Key );
    26ec:	2a e8       	ldi	r18, 0x8A	; 138
    26ee:	3e e0       	ldi	r19, 0x0E	; 14
    26f0:	4a e6       	ldi	r20, 0x6A	; 106
    26f2:	5c e0       	ldi	r21, 0x0C	; 12
    26f4:	6a e6       	ldi	r22, 0x6A	; 106
    26f6:	7b e0       	ldi	r23, 0x0B	; 11
    26f8:	8a e8       	ldi	r24, 0x8A	; 138
    26fa:	9d e0       	ldi	r25, 0x0D	; 13
    26fc:	0e 94 3e 22 	call	0x447c	; 0x447c <AES_128_SF_Init>
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
    2700:	40 e1       	ldi	r20, 0x10	; 16
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	6a ef       	ldi	r22, 0xFA	; 250
    2706:	79 e0       	ldi	r23, 0x09	; 9
    2708:	8a e6       	ldi	r24, 0x6A	; 106
    270a:	9d e0       	ldi	r25, 0x0D	; 13
    270c:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SF_Encrypt(AES_Data);
    2710:	8a e6       	ldi	r24, 0x6A	; 106
    2712:	9d e0       	ldi	r25, 0x0D	; 13
    2714:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <AES_128_SF_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_128_1,Plain_len))	ret|=1;
    2718:	40 e1       	ldi	r20, 0x10	; 16
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	6a e3       	ldi	r22, 0x3A	; 58
    271e:	7a e0       	ldi	r23, 0x0A	; 10
    2720:	8a e6       	ldi	r24, 0x6A	; 106
    2722:	9d e0       	ldi	r25, 0x0D	; 13
    2724:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2728:	89 2b       	or	r24, r25
    272a:	09 f4       	brne	.+2      	; 0x272e <AES_SF_test+0xb4>
    272c:	10 2f       	mov	r17, r16
	AES_128_SF_Decrypt(AES_Data);
    272e:	8a e6       	ldi	r24, 0x6A	; 106
    2730:	9d e0       	ldi	r25, 0x0D	; 13
    2732:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <AES_128_SF_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=1;
    2736:	40 e1       	ldi	r20, 0x10	; 16
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	6a ef       	ldi	r22, 0xFA	; 250
    273c:	79 e0       	ldi	r23, 0x09	; 9
    273e:	8a e6       	ldi	r24, 0x6A	; 106
    2740:	9d e0       	ldi	r25, 0x0D	; 13
    2742:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2746:	89 2b       	or	r24, r25
    2748:	09 f0       	breq	.+2      	; 0x274c <AES_SF_test+0xd2>
    274a:	11 60       	ori	r17, 0x01	; 1
// key     = 2b7e151628aed2a6abf7158809cf4f3c762e7160f38b4da5
// input   = 3243f6a8885a308d313198a2e0370734
// encrypt = f9fb29aefc384a250340d833b87ebc00
	Key_len=24;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
    274c:	48 e1       	ldi	r20, 0x18	; 24
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	6a e1       	ldi	r22, 0x1A	; 26
    2752:	7a e0       	ldi	r23, 0x0A	; 10
    2754:	8a e8       	ldi	r24, 0x8A	; 138
    2756:	9e e0       	ldi	r25, 0x0E	; 14
    2758:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_192_SF_Init( tempbuf,tempbuf1,tempbuf2 ,AES_Key );
    275c:	2a e8       	ldi	r18, 0x8A	; 138
    275e:	3e e0       	ldi	r19, 0x0E	; 14
    2760:	4a e6       	ldi	r20, 0x6A	; 106
    2762:	5c e0       	ldi	r21, 0x0C	; 12
    2764:	6a e6       	ldi	r22, 0x6A	; 106
    2766:	7b e0       	ldi	r23, 0x0B	; 11
    2768:	8a e8       	ldi	r24, 0x8A	; 138
    276a:	9d e0       	ldi	r25, 0x0D	; 13
    276c:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <AES_192_SF_Init>
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
    2770:	40 e1       	ldi	r20, 0x10	; 16
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	6a ef       	ldi	r22, 0xFA	; 250
    2776:	79 e0       	ldi	r23, 0x09	; 9
    2778:	8a e6       	ldi	r24, 0x6A	; 106
    277a:	9d e0       	ldi	r25, 0x0D	; 13
    277c:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_192_SF_Encrypt(AES_Data);
    2780:	8a e6       	ldi	r24, 0x6A	; 106
    2782:	9d e0       	ldi	r25, 0x0D	; 13
    2784:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <AES_192_SF_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_192_1,Plain_len))	ret|=1;
    2788:	40 e1       	ldi	r20, 0x10	; 16
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	6a e4       	ldi	r22, 0x4A	; 74
    278e:	7a e0       	ldi	r23, 0x0A	; 10
    2790:	8a e6       	ldi	r24, 0x6A	; 106
    2792:	9d e0       	ldi	r25, 0x0D	; 13
    2794:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2798:	89 2b       	or	r24, r25
    279a:	09 f0       	breq	.+2      	; 0x279e <AES_SF_test+0x124>
    279c:	11 60       	ori	r17, 0x01	; 1
	AES_192_SF_Decrypt(AES_Data);
    279e:	8a e6       	ldi	r24, 0x6A	; 106
    27a0:	9d e0       	ldi	r25, 0x0D	; 13
    27a2:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <AES_192_SF_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=1;
    27a6:	40 e1       	ldi	r20, 0x10	; 16
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	6a ef       	ldi	r22, 0xFA	; 250
    27ac:	79 e0       	ldi	r23, 0x09	; 9
    27ae:	8a e6       	ldi	r24, 0x6A	; 106
    27b0:	9d e0       	ldi	r25, 0x0D	; 13
    27b2:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    27b6:	89 2b       	or	r24, r25
    27b8:	09 f0       	breq	.+2      	; 0x27bc <AES_SF_test+0x142>
    27ba:	11 60       	ori	r17, 0x01	; 1
// input   = 3243f6a8885a308d313198a2e0370734
// encrypt = 1a6e6c2c662e7da6501ffb62bc9e93f3

	Key_len=32;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	6a e1       	ldi	r22, 0x1A	; 26
    27c2:	7a e0       	ldi	r23, 0x0A	; 10
    27c4:	8a e8       	ldi	r24, 0x8A	; 138
    27c6:	9e e0       	ldi	r25, 0x0E	; 14
    27c8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_256_SF_Init( tempbuf,tempbuf1,tempbuf2 ,AES_Key );
    27cc:	2a e8       	ldi	r18, 0x8A	; 138
    27ce:	3e e0       	ldi	r19, 0x0E	; 14
    27d0:	4a e6       	ldi	r20, 0x6A	; 106
    27d2:	5c e0       	ldi	r21, 0x0C	; 12
    27d4:	6a e6       	ldi	r22, 0x6A	; 106
    27d6:	7b e0       	ldi	r23, 0x0B	; 11
    27d8:	8a e8       	ldi	r24, 0x8A	; 138
    27da:	9d e0       	ldi	r25, 0x0D	; 13
    27dc:	0e 94 ba 23 	call	0x4774	; 0x4774 <AES_256_SF_Init>
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
    27e0:	40 e1       	ldi	r20, 0x10	; 16
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	6a ef       	ldi	r22, 0xFA	; 250
    27e6:	79 e0       	ldi	r23, 0x09	; 9
    27e8:	8a e6       	ldi	r24, 0x6A	; 106
    27ea:	9d e0       	ldi	r25, 0x0D	; 13
    27ec:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_256_SF_Encrypt(AES_Data);
    27f0:	8a e6       	ldi	r24, 0x6A	; 106
    27f2:	9d e0       	ldi	r25, 0x0D	; 13
    27f4:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <AES_256_SF_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_256_1,Plain_len))	ret|=1;
    27f8:	40 e1       	ldi	r20, 0x10	; 16
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	6a e5       	ldi	r22, 0x5A	; 90
    27fe:	7a e0       	ldi	r23, 0x0A	; 10
    2800:	8a e6       	ldi	r24, 0x6A	; 106
    2802:	9d e0       	ldi	r25, 0x0D	; 13
    2804:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2808:	89 2b       	or	r24, r25
    280a:	09 f0       	breq	.+2      	; 0x280e <AES_SF_test+0x194>
    280c:	11 60       	ori	r17, 0x01	; 1
	AES_256_SF_Decrypt(AES_Data);
    280e:	8a e6       	ldi	r24, 0x6A	; 106
    2810:	9d e0       	ldi	r25, 0x0D	; 13
    2812:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <AES_256_SF_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=1;
    2816:	40 e1       	ldi	r20, 0x10	; 16
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	6a ef       	ldi	r22, 0xFA	; 250
    281c:	79 e0       	ldi	r23, 0x09	; 9
    281e:	8a e6       	ldi	r24, 0x6A	; 106
    2820:	9d e0       	ldi	r25, 0x0D	; 13
    2822:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2826:	89 2b       	or	r24, r25
    2828:	09 f0       	breq	.+2      	; 0x282c <AES_SF_test+0x1b2>
    282a:	11 60       	ori	r17, 0x01	; 1
// input   = 00112233445566778899aabbccddeeff
// encrypt = 69c4e0d86a7b0430d8cdb78070b4c55a

	Key_len=16;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_2,Key_len);
    282c:	40 e1       	ldi	r20, 0x10	; 16
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	6a e6       	ldi	r22, 0x6A	; 106
    2832:	7a e0       	ldi	r23, 0x0A	; 10
    2834:	8a e8       	ldi	r24, 0x8A	; 138
    2836:	9e e0       	ldi	r25, 0x0E	; 14
    2838:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SF_Init( tempbuf,tempbuf1,tempbuf2 ,AES_Key );
    283c:	2a e8       	ldi	r18, 0x8A	; 138
    283e:	3e e0       	ldi	r19, 0x0E	; 14
    2840:	4a e6       	ldi	r20, 0x6A	; 106
    2842:	5c e0       	ldi	r21, 0x0C	; 12
    2844:	6a e6       	ldi	r22, 0x6A	; 106
    2846:	7b e0       	ldi	r23, 0x0B	; 11
    2848:	8a e8       	ldi	r24, 0x8A	; 138
    284a:	9d e0       	ldi	r25, 0x0D	; 13
    284c:	0e 94 3e 22 	call	0x447c	; 0x447c <AES_128_SF_Init>
	memcpy_P(AES_Data,AES_Test_Data_2,Plain_len);
    2850:	40 e1       	ldi	r20, 0x10	; 16
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	6a e8       	ldi	r22, 0x8A	; 138
    2856:	7a e0       	ldi	r23, 0x0A	; 10
    2858:	8a e6       	ldi	r24, 0x6A	; 106
    285a:	9d e0       	ldi	r25, 0x0D	; 13
    285c:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_128_SF_Encrypt(AES_Data);
    2860:	8a e6       	ldi	r24, 0x6A	; 106
    2862:	9d e0       	ldi	r25, 0x0D	; 13
    2864:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <AES_128_SF_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_128_2,Plain_len))	ret|=1;
    2868:	40 e1       	ldi	r20, 0x10	; 16
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	6a e9       	ldi	r22, 0x9A	; 154
    286e:	7a e0       	ldi	r23, 0x0A	; 10
    2870:	8a e6       	ldi	r24, 0x6A	; 106
    2872:	9d e0       	ldi	r25, 0x0D	; 13
    2874:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2878:	89 2b       	or	r24, r25
    287a:	09 f0       	breq	.+2      	; 0x287e <AES_SF_test+0x204>
    287c:	11 60       	ori	r17, 0x01	; 1
	AES_128_SF_Decrypt(AES_Data);
    287e:	8a e6       	ldi	r24, 0x6A	; 106
    2880:	9d e0       	ldi	r25, 0x0D	; 13
    2882:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <AES_128_SF_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_2,Plain_len))	ret|=1;
    2886:	40 e1       	ldi	r20, 0x10	; 16
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	6a e8       	ldi	r22, 0x8A	; 138
    288c:	7a e0       	ldi	r23, 0x0A	; 10
    288e:	8a e6       	ldi	r24, 0x6A	; 106
    2890:	9d e0       	ldi	r25, 0x0D	; 13
    2892:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2896:	89 2b       	or	r24, r25
    2898:	09 f0       	breq	.+2      	; 0x289c <AES_SF_test+0x222>
    289a:	11 60       	ori	r17, 0x01	; 1
// key     = 000102030405060708090a0b0c0d0e0f1011121314151617
// input   = 00112233445566778899aabbccddeeff
// encrypt = dda97ca4864cdfe06eaf70a0ec0d7191
	Key_len=24;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_2,Key_len);
    289c:	48 e1       	ldi	r20, 0x18	; 24
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	6a e6       	ldi	r22, 0x6A	; 106
    28a2:	7a e0       	ldi	r23, 0x0A	; 10
    28a4:	8a e8       	ldi	r24, 0x8A	; 138
    28a6:	9e e0       	ldi	r25, 0x0E	; 14
    28a8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_192_SF_Init( tempbuf,tempbuf1,tempbuf2 ,AES_Key );
    28ac:	2a e8       	ldi	r18, 0x8A	; 138
    28ae:	3e e0       	ldi	r19, 0x0E	; 14
    28b0:	4a e6       	ldi	r20, 0x6A	; 106
    28b2:	5c e0       	ldi	r21, 0x0C	; 12
    28b4:	6a e6       	ldi	r22, 0x6A	; 106
    28b6:	7b e0       	ldi	r23, 0x0B	; 11
    28b8:	8a e8       	ldi	r24, 0x8A	; 138
    28ba:	9d e0       	ldi	r25, 0x0D	; 13
    28bc:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <AES_192_SF_Init>
	memcpy_P(AES_Data,AES_Test_Data_2,Plain_len);
    28c0:	40 e1       	ldi	r20, 0x10	; 16
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	6a e8       	ldi	r22, 0x8A	; 138
    28c6:	7a e0       	ldi	r23, 0x0A	; 10
    28c8:	8a e6       	ldi	r24, 0x6A	; 106
    28ca:	9d e0       	ldi	r25, 0x0D	; 13
    28cc:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_192_SF_Encrypt(AES_Data);
    28d0:	8a e6       	ldi	r24, 0x6A	; 106
    28d2:	9d e0       	ldi	r25, 0x0D	; 13
    28d4:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <AES_192_SF_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_192_2,Plain_len))	ret|=1;
    28d8:	40 e1       	ldi	r20, 0x10	; 16
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	6a ea       	ldi	r22, 0xAA	; 170
    28de:	7a e0       	ldi	r23, 0x0A	; 10
    28e0:	8a e6       	ldi	r24, 0x6A	; 106
    28e2:	9d e0       	ldi	r25, 0x0D	; 13
    28e4:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    28e8:	89 2b       	or	r24, r25
    28ea:	09 f0       	breq	.+2      	; 0x28ee <AES_SF_test+0x274>
    28ec:	11 60       	ori	r17, 0x01	; 1
	AES_192_SF_Decrypt(AES_Data);
    28ee:	8a e6       	ldi	r24, 0x6A	; 106
    28f0:	9d e0       	ldi	r25, 0x0D	; 13
    28f2:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <AES_192_SF_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_2,Plain_len))	ret|=1;
    28f6:	40 e1       	ldi	r20, 0x10	; 16
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	6a e8       	ldi	r22, 0x8A	; 138
    28fc:	7a e0       	ldi	r23, 0x0A	; 10
    28fe:	8a e6       	ldi	r24, 0x6A	; 106
    2900:	9d e0       	ldi	r25, 0x0D	; 13
    2902:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2906:	89 2b       	or	r24, r25
    2908:	09 f0       	breq	.+2      	; 0x290c <AES_SF_test+0x292>
    290a:	11 60       	ori	r17, 0x01	; 1
// input   = 00112233445566778899aabbccddeeff
// encrypt = 8ea2b7ca516745bfeafc49904b496089

	Key_len=32;
	Plain_len=16;
	memcpy_P(AES_Key,AES_Test_Key_2,Key_len);
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	6a e6       	ldi	r22, 0x6A	; 106
    2912:	7a e0       	ldi	r23, 0x0A	; 10
    2914:	8a e8       	ldi	r24, 0x8A	; 138
    2916:	9e e0       	ldi	r25, 0x0E	; 14
    2918:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_256_SF_Init( tempbuf,tempbuf1,tempbuf2 ,AES_Key );
    291c:	2a e8       	ldi	r18, 0x8A	; 138
    291e:	3e e0       	ldi	r19, 0x0E	; 14
    2920:	4a e6       	ldi	r20, 0x6A	; 106
    2922:	5c e0       	ldi	r21, 0x0C	; 12
    2924:	6a e6       	ldi	r22, 0x6A	; 106
    2926:	7b e0       	ldi	r23, 0x0B	; 11
    2928:	8a e8       	ldi	r24, 0x8A	; 138
    292a:	9d e0       	ldi	r25, 0x0D	; 13
    292c:	0e 94 ba 23 	call	0x4774	; 0x4774 <AES_256_SF_Init>
	memcpy_P(AES_Data,AES_Test_Data_2,Plain_len);
    2930:	40 e1       	ldi	r20, 0x10	; 16
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	6a e8       	ldi	r22, 0x8A	; 138
    2936:	7a e0       	ldi	r23, 0x0A	; 10
    2938:	8a e6       	ldi	r24, 0x6A	; 106
    293a:	9d e0       	ldi	r25, 0x0D	; 13
    293c:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
	AES_256_SF_Encrypt(AES_Data);
    2940:	8a e6       	ldi	r24, 0x6A	; 106
    2942:	9d e0       	ldi	r25, 0x0D	; 13
    2944:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <AES_256_SF_Encrypt>
	if(memcmp_P(AES_Data,AES_Test_Result_256_2,Plain_len))	ret|=1;
    2948:	40 e1       	ldi	r20, 0x10	; 16
    294a:	50 e0       	ldi	r21, 0x00	; 0
    294c:	6a eb       	ldi	r22, 0xBA	; 186
    294e:	7a e0       	ldi	r23, 0x0A	; 10
    2950:	8a e6       	ldi	r24, 0x6A	; 106
    2952:	9d e0       	ldi	r25, 0x0D	; 13
    2954:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2958:	89 2b       	or	r24, r25
    295a:	09 f0       	breq	.+2      	; 0x295e <AES_SF_test+0x2e4>
    295c:	11 60       	ori	r17, 0x01	; 1
	AES_256_SF_Decrypt(AES_Data);
    295e:	8a e6       	ldi	r24, 0x6A	; 106
    2960:	9d e0       	ldi	r25, 0x0D	; 13
    2962:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <AES_256_SF_Decrypt>
	if(memcmp_P(AES_Data,AES_Test_Data_2,Plain_len))	ret|=1;
    2966:	40 e1       	ldi	r20, 0x10	; 16
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	6a e8       	ldi	r22, 0x8A	; 138
    296c:	7a e0       	ldi	r23, 0x0A	; 10
    296e:	8a e6       	ldi	r24, 0x6A	; 106
    2970:	9d e0       	ldi	r25, 0x0D	; 13
    2972:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <memcmp_P>
    2976:	89 2b       	or	r24, r25
    2978:	09 f0       	breq	.+2      	; 0x297c <AES_SF_test+0x302>
    297a:	11 60       	ori	r17, 0x01	; 1
	return ret;
}
    297c:	81 2f       	mov	r24, r17
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	08 95       	ret
	memcpy_P(AES_Key,AES_Test_Key_1,Key_len);
	memcpy_P(AES_Data,AES_Test_Data_1,Plain_len);
	AES_128_SF_Init( tempbuf,tempbuf1,tempbuf2 ,AES_Key );	
	AES_128_SF_Encrypt(AES_Data);
	AES_128_SF_Decrypt(AES_Data);
	if(memcmp_P(AES_Data,AES_Test_Data_1,Plain_len))	ret|=0x10;
    2984:	00 e0       	ldi	r16, 0x00	; 0
    2986:	11 e0       	ldi	r17, 0x01	; 1
    2988:	a9 ce       	rjmp	.-686    	; 0x26dc <AES_SF_test+0x62>

0000298a <AES_test>:
	if(memcmp_P(AES_Data,AES_Test_Data_2,Plain_len))	ret|=1;
	return ret;
}

unsigned char AES_test(void)
{
    298a:	1f 93       	push	r17
unsigned char ret = 0;

	if(AES_SF_test())ret|=1; // This will test the Small Flash version of the AES 
    298c:	0e 94 3d 13 	call	0x267a	; 0x267a <AES_SF_test>
    2990:	81 11       	cpse	r24, r1
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	18 2f       	mov	r17, r24
	if(AES_SR_test())ret|=2; // This will test the Small Ram  version of the AES 
    2996:	0e 94 c9 11 	call	0x2392	; 0x2392 <AES_SR_test>
    299a:	81 11       	cpse	r24, r1
    299c:	12 60       	ori	r17, 0x02	; 2

return ret;
}
    299e:	81 2f       	mov	r24, r17
    29a0:	1f 91       	pop	r17
    29a2:	08 95       	ret

000029a4 <rsa_encrypt>:
#include "AVRCrytolib.h"
#include "rsa_asm.h"


void rsa_encrypt(unsigned int uiKeySize,unsigned char *pucRsa_data ,unsigned char *pucExponent,unsigned char  *pucModulo,unsigned char *pucRsa_s,unsigned char *pucRsa_tmp)
{
    29a4:	4f 92       	push	r4
    29a6:	5f 92       	push	r5
    29a8:	7f 92       	push	r7
    29aa:	8f 92       	push	r8
    29ac:	9f 92       	push	r9
    29ae:	af 92       	push	r10
    29b0:	bf 92       	push	r11
    29b2:	cf 92       	push	r12
    29b4:	df 92       	push	r13
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	ec 01       	movw	r28, r24
    29bc:	a6 2e       	mov	r10, r22
    29be:	97 2e       	mov	r9, r23
    29c0:	6a 01       	movw	r12, r20
    29c2:	29 01       	movw	r4, r18
    29c4:	80 2e       	mov	r8, r16
    29c6:	71 2e       	mov	r7, r17
    29c8:	bb 24       	eor	r11, r11
    29ca:	b3 94       	inc	r11
	{
	/* a=(a*a)%d   */
	  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
	  rsa_modulo(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
	}
	if((unsigned char) (pucExponent[uiKeySize-1] & 1))
    29cc:	8a 01       	movw	r16, r20
    29ce:	08 0f       	add	r16, r24
    29d0:	19 1f       	adc	r17, r25
    29d2:	01 50       	subi	r16, 0x01	; 1
    29d4:	10 40       	sbci	r17, 0x00	; 0
    29d6:	12 c0       	rjmp	.+36     	; 0x29fc <rsa_encrypt+0x58>
    29d8:	f8 01       	movw	r30, r16
    29da:	80 81       	ld	r24, Z
    29dc:	80 ff       	sbrs	r24, 0
    29de:	0a c0       	rjmp	.+20     	; 0x29f4 <rsa_encrypt+0x50>
	  {/*   s=(s*a)%d; */
	   if(flag)
    29e0:	bb 20       	and	r11, r11
    29e2:	21 f1       	breq	.+72     	; 0x2a2c <rsa_encrypt+0x88>
		  { flag=0;
		  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
    29e4:	ae 01       	movw	r20, r28
    29e6:	6a 2d       	mov	r22, r10
    29e8:	79 2d       	mov	r23, r9
    29ea:	88 2d       	mov	r24, r8
    29ec:	97 2d       	mov	r25, r7
    29ee:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    29f2:	bb 24       	eor	r11, r11
		  {
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
		  rsa_modulo(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
		  }
	  }
	rsa_ror(uiKeySize,pucExponent);
    29f4:	b6 01       	movw	r22, r12
    29f6:	ce 01       	movw	r24, r28
    29f8:	0e 94 ed 18 	call	0x31da	; 0x31da <rsa_ror>
void rsa_encrypt(unsigned int uiKeySize,unsigned char *pucRsa_data ,unsigned char *pucExponent,unsigned char  *pucModulo,unsigned char *pucRsa_s,unsigned char *pucRsa_tmp)
{
unsigned char flag=1;
/* s = 1 */
/* a = a^e%d */
while(rsa_memtst(uiKeySize,pucExponent))
    29fc:	b6 01       	movw	r22, r12
    29fe:	ce 01       	movw	r24, r28
    2a00:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <rsa_memtst>
    2a04:	88 23       	and	r24, r24
    2a06:	11 f1       	breq	.+68     	; 0x2a4c <rsa_encrypt+0xa8>
  {
	if(!flag)
    2a08:	bb 20       	and	r11, r11
    2a0a:	31 f7       	brne	.-52     	; 0x29d8 <rsa_encrypt+0x34>
	{
	/* a=(a*a)%d   */
	  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2a0c:	97 01       	movw	r18, r14
    2a0e:	4a 2d       	mov	r20, r10
    2a10:	59 2d       	mov	r21, r9
    2a12:	6a 2d       	mov	r22, r10
    2a14:	79 2d       	mov	r23, r9
    2a16:	ce 01       	movw	r24, r28
    2a18:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
	  rsa_modulo(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2a1c:	2a 2d       	mov	r18, r10
    2a1e:	39 2d       	mov	r19, r9
    2a20:	a2 01       	movw	r20, r4
    2a22:	b7 01       	movw	r22, r14
    2a24:	ce 01       	movw	r24, r28
    2a26:	0e 94 04 18 	call	0x3008	; 0x3008 <rsa_modulo>
    2a2a:	d6 cf       	rjmp	.-84     	; 0x29d8 <rsa_encrypt+0x34>
		  { flag=0;
		  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
		  }
		else
		  {
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2a2c:	97 01       	movw	r18, r14
    2a2e:	48 2d       	mov	r20, r8
    2a30:	57 2d       	mov	r21, r7
    2a32:	6a 2d       	mov	r22, r10
    2a34:	79 2d       	mov	r23, r9
    2a36:	ce 01       	movw	r24, r28
    2a38:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2a3c:	28 2d       	mov	r18, r8
    2a3e:	37 2d       	mov	r19, r7
    2a40:	a2 01       	movw	r20, r4
    2a42:	b7 01       	movw	r22, r14
    2a44:	ce 01       	movw	r24, r28
    2a46:	0e 94 04 18 	call	0x3008	; 0x3008 <rsa_modulo>
    2a4a:	d4 cf       	rjmp	.-88     	; 0x29f4 <rsa_encrypt+0x50>
		  }
	  }
	rsa_ror(uiKeySize,pucExponent);
  }
memcpy(pucRsa_data,pucRsa_s,uiKeySize);
    2a4c:	ae 01       	movw	r20, r28
    2a4e:	68 2d       	mov	r22, r8
    2a50:	77 2d       	mov	r23, r7
    2a52:	8a 2d       	mov	r24, r10
    2a54:	99 2d       	mov	r25, r9
    2a56:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
}
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	df 90       	pop	r13
    2a60:	cf 90       	pop	r12
    2a62:	bf 90       	pop	r11
    2a64:	af 90       	pop	r10
    2a66:	9f 90       	pop	r9
    2a68:	8f 90       	pop	r8
    2a6a:	7f 90       	pop	r7
    2a6c:	5f 90       	pop	r5
    2a6e:	4f 90       	pop	r4
    2a70:	08 95       	ret

00002a72 <rsa_decrypt>:

#include "AVRCrytolib.h"
#include "rsa_asm.h"

void rsa_decrypt(unsigned int uiKeySize,unsigned char *pucRsa_data ,unsigned int uiExponent,unsigned char   *pucModulo,unsigned char *pucRsa_s,unsigned char *pucRsa_tmp)
{
    2a72:	7f 92       	push	r7
    2a74:	8f 92       	push	r8
    2a76:	9f 92       	push	r9
    2a78:	af 92       	push	r10
    2a7a:	bf 92       	push	r11
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	b8 2e       	mov	r11, r24
    2a86:	a9 2e       	mov	r10, r25
    2a88:	d6 2e       	mov	r13, r22
    2a8a:	c7 2e       	mov	r12, r23
    2a8c:	ea 01       	movw	r28, r20
    2a8e:	49 01       	movw	r8, r18
unsigned char flag;
flag=1;
/* s = 1 */
/* a = a^e%d */
while(uiExponent)
    2a90:	41 15       	cp	r20, r1
    2a92:	51 05       	cpc	r21, r1
    2a94:	91 f0       	breq	.+36     	; 0x2aba <rsa_decrypt+0x48>
    2a96:	77 24       	eor	r7, r7
    2a98:	73 94       	inc	r7
  {
	if(uiExponent&1)
    2a9a:	c0 ff       	sbrs	r28, 0
    2a9c:	0a c0       	rjmp	.+20     	; 0x2ab2 <rsa_decrypt+0x40>
	  {/*   s=(s*a)%d; */
	   if(flag)
    2a9e:	77 20       	and	r7, r7
    2aa0:	79 f1       	breq	.+94     	; 0x2b00 <rsa_decrypt+0x8e>
		  { 
	  		flag=0;
			memcpy(pucRsa_s,pucRsa_data,uiKeySize);
    2aa2:	4b 2d       	mov	r20, r11
    2aa4:	5a 2d       	mov	r21, r10
    2aa6:	6d 2d       	mov	r22, r13
    2aa8:	7c 2d       	mov	r23, r12
    2aaa:	c8 01       	movw	r24, r16
    2aac:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2ab0:	77 24       	eor	r7, r7
		  {
		  	rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */                  
		  	rsa_modulo(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
		  }
	  }
	uiExponent>>=1;
    2ab2:	d6 95       	lsr	r29
    2ab4:	c7 95       	ror	r28
	/* a=(a*a)%d   */
	if(uiExponent) /* A is not used is e == 0 */
    2ab6:	20 97       	sbiw	r28, 0x00	; 0
    2ab8:	89 f4       	brne	.+34     	; 0x2adc <rsa_decrypt+0x6a>
	{
	  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
	  rsa_modulo(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    }
  }
memcpy(pucRsa_data,pucRsa_s,uiKeySize);
    2aba:	4b 2d       	mov	r20, r11
    2abc:	5a 2d       	mov	r21, r10
    2abe:	b8 01       	movw	r22, r16
    2ac0:	8d 2d       	mov	r24, r13
    2ac2:	9c 2d       	mov	r25, r12
    2ac4:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
}
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	df 90       	pop	r13
    2ace:	cf 90       	pop	r12
    2ad0:	bf 90       	pop	r11
    2ad2:	af 90       	pop	r10
    2ad4:	9f 90       	pop	r9
    2ad6:	8f 90       	pop	r8
    2ad8:	7f 90       	pop	r7
    2ada:	08 95       	ret
	  }
	uiExponent>>=1;
	/* a=(a*a)%d   */
	if(uiExponent) /* A is not used is e == 0 */
	{
	  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2adc:	97 01       	movw	r18, r14
    2ade:	4d 2d       	mov	r20, r13
    2ae0:	5c 2d       	mov	r21, r12
    2ae2:	6d 2d       	mov	r22, r13
    2ae4:	7c 2d       	mov	r23, r12
    2ae6:	8b 2d       	mov	r24, r11
    2ae8:	9a 2d       	mov	r25, r10
    2aea:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
	  rsa_modulo(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2aee:	2d 2d       	mov	r18, r13
    2af0:	3c 2d       	mov	r19, r12
    2af2:	a4 01       	movw	r20, r8
    2af4:	b7 01       	movw	r22, r14
    2af6:	8b 2d       	mov	r24, r11
    2af8:	9a 2d       	mov	r25, r10
    2afa:	0e 94 04 18 	call	0x3008	; 0x3008 <rsa_modulo>
    2afe:	cd cf       	rjmp	.-102    	; 0x2a9a <rsa_decrypt+0x28>
			memcpy(pucRsa_s,pucRsa_data,uiKeySize);
             /*  modulo(tmp,d,s,A_LEN,D_LEN,S_LEN);*/ /* S = A % D */
		  }
		else
		  {
		  	rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */                  
    2b00:	97 01       	movw	r18, r14
    2b02:	a8 01       	movw	r20, r16
    2b04:	6d 2d       	mov	r22, r13
    2b06:	7c 2d       	mov	r23, r12
    2b08:	8b 2d       	mov	r24, r11
    2b0a:	9a 2d       	mov	r25, r10
    2b0c:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  	rsa_modulo(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2b10:	98 01       	movw	r18, r16
    2b12:	a4 01       	movw	r20, r8
    2b14:	b7 01       	movw	r22, r14
    2b16:	8b 2d       	mov	r24, r11
    2b18:	9a 2d       	mov	r25, r10
    2b1a:	0e 94 04 18 	call	0x3008	; 0x3008 <rsa_modulo>
    2b1e:	c9 cf       	rjmp	.-110    	; 0x2ab2 <rsa_decrypt+0x40>

00002b20 <rsa_encrypt_P>:

#include "AVRCrytolib.h"
#include "rsa_asm.h"

void rsa_encrypt_P(unsigned int uiKeySize,unsigned char *pucRsa_data ,UPGM_P pucExponent,UPGM_P pucModulo,unsigned char *pucRsa_s,unsigned char *pucRsa_tmp)
{
    2b20:	4f 92       	push	r4
    2b22:	5f 92       	push	r5
    2b24:	6f 92       	push	r6
    2b26:	7f 92       	push	r7
    2b28:	8f 92       	push	r8
    2b2a:	9f 92       	push	r9
    2b2c:	af 92       	push	r10
    2b2e:	bf 92       	push	r11
    2b30:	cf 92       	push	r12
    2b32:	df 92       	push	r13
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	ec 01       	movw	r28, r24
    2b3a:	d6 2e       	mov	r13, r22
    2b3c:	c7 2e       	mov	r12, r23
    2b3e:	3a 01       	movw	r6, r20
    2b40:	59 01       	movw	r10, r18
    2b42:	90 2e       	mov	r9, r16
    2b44:	81 2e       	mov	r8, r17
    2b46:	21 97       	sbiw	r28, 0x01	; 1
    2b48:	6c 0e       	add	r6, r28
    2b4a:	7d 1e       	adc	r7, r29
    2b4c:	21 96       	adiw	r28, 0x01	; 1
    2b4e:	2e 01       	movw	r4, r28
    2b50:	11 e0       	ldi	r17, 0x01	; 1
    2b52:	11 c1       	rjmp	.+546    	; 0x2d76 <rsa_encrypt_P+0x256>
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
		}
		if((unsigned char) (ucExponent & 1))
		  {/*   s=(s*a)%d; */
		   if(flag)
    2b54:	11 23       	and	r17, r17
    2b56:	09 f0       	breq	.+2      	; 0x2b5a <rsa_encrypt_P+0x3a>
    2b58:	84 c1       	rjmp	.+776    	; 0x2e62 <rsa_encrypt_P+0x342>
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2b5a:	97 01       	movw	r18, r14
    2b5c:	49 2d       	mov	r20, r9
    2b5e:	58 2d       	mov	r21, r8
    2b60:	6d 2d       	mov	r22, r13
    2b62:	7c 2d       	mov	r23, r12
    2b64:	ce 01       	movw	r24, r28
    2b66:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2b6a:	29 2d       	mov	r18, r9
    2b6c:	38 2d       	mov	r19, r8
    2b6e:	a5 01       	movw	r20, r10
    2b70:	b7 01       	movw	r22, r14
    2b72:	ce 01       	movw	r24, r28
    2b74:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
			  }
		  }
		ucExponent>>=1;
    2b78:	06 95       	lsr	r16
    2b7a:	10 e0       	ldi	r17, 0x00	; 0
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2b7c:	97 01       	movw	r18, r14
    2b7e:	4d 2d       	mov	r20, r13
    2b80:	5c 2d       	mov	r21, r12
    2b82:	6d 2d       	mov	r22, r13
    2b84:	7c 2d       	mov	r23, r12
    2b86:	ce 01       	movw	r24, r28
    2b88:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2b8c:	2d 2d       	mov	r18, r13
    2b8e:	3c 2d       	mov	r19, r12
    2b90:	a5 01       	movw	r20, r10
    2b92:	b7 01       	movw	r22, r14
    2b94:	ce 01       	movw	r24, r28
    2b96:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
		}
		if((unsigned char) (ucExponent & 1))
    2b9a:	00 ff       	sbrs	r16, 0
    2b9c:	ff c0       	rjmp	.+510    	; 0x2d9c <rsa_encrypt_P+0x27c>
		  {/*   s=(s*a)%d; */
		   if(flag)
    2b9e:	11 23       	and	r17, r17
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <rsa_encrypt_P+0x84>
    2ba2:	57 c1       	rjmp	.+686    	; 0x2e52 <rsa_encrypt_P+0x332>
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2ba4:	97 01       	movw	r18, r14
    2ba6:	49 2d       	mov	r20, r9
    2ba8:	58 2d       	mov	r21, r8
    2baa:	6d 2d       	mov	r22, r13
    2bac:	7c 2d       	mov	r23, r12
    2bae:	ce 01       	movw	r24, r28
    2bb0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2bb4:	29 2d       	mov	r18, r9
    2bb6:	38 2d       	mov	r19, r8
    2bb8:	a5 01       	movw	r20, r10
    2bba:	b7 01       	movw	r22, r14
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
			  }
		  }
		ucExponent>>=1;
    2bc2:	06 95       	lsr	r16
    2bc4:	10 e0       	ldi	r17, 0x00	; 0
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2bc6:	97 01       	movw	r18, r14
    2bc8:	4d 2d       	mov	r20, r13
    2bca:	5c 2d       	mov	r21, r12
    2bcc:	6d 2d       	mov	r22, r13
    2bce:	7c 2d       	mov	r23, r12
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2bd6:	2d 2d       	mov	r18, r13
    2bd8:	3c 2d       	mov	r19, r12
    2bda:	a5 01       	movw	r20, r10
    2bdc:	b7 01       	movw	r22, r14
    2bde:	ce 01       	movw	r24, r28
    2be0:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
		}
		if((unsigned char) (ucExponent & 1))
    2be4:	00 ff       	sbrs	r16, 0
    2be6:	e0 c0       	rjmp	.+448    	; 0x2da8 <rsa_encrypt_P+0x288>
		  {/*   s=(s*a)%d; */
		   if(flag)
    2be8:	11 23       	and	r17, r17
    2bea:	09 f0       	breq	.+2      	; 0x2bee <rsa_encrypt_P+0xce>
    2bec:	1a c1       	rjmp	.+564    	; 0x2e22 <rsa_encrypt_P+0x302>
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2bee:	97 01       	movw	r18, r14
    2bf0:	49 2d       	mov	r20, r9
    2bf2:	58 2d       	mov	r21, r8
    2bf4:	6d 2d       	mov	r22, r13
    2bf6:	7c 2d       	mov	r23, r12
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2bfe:	29 2d       	mov	r18, r9
    2c00:	38 2d       	mov	r19, r8
    2c02:	a5 01       	movw	r20, r10
    2c04:	b7 01       	movw	r22, r14
    2c06:	ce 01       	movw	r24, r28
    2c08:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
			  }
		  }
		ucExponent>>=1;
    2c0c:	06 95       	lsr	r16
    2c0e:	10 e0       	ldi	r17, 0x00	; 0
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2c10:	97 01       	movw	r18, r14
    2c12:	4d 2d       	mov	r20, r13
    2c14:	5c 2d       	mov	r21, r12
    2c16:	6d 2d       	mov	r22, r13
    2c18:	7c 2d       	mov	r23, r12
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2c20:	2d 2d       	mov	r18, r13
    2c22:	3c 2d       	mov	r19, r12
    2c24:	a5 01       	movw	r20, r10
    2c26:	b7 01       	movw	r22, r14
    2c28:	ce 01       	movw	r24, r28
    2c2a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
		}
		if((unsigned char) (ucExponent & 1))
    2c2e:	00 ff       	sbrs	r16, 0
    2c30:	c1 c0       	rjmp	.+386    	; 0x2db4 <rsa_encrypt_P+0x294>
		  {/*   s=(s*a)%d; */
		   if(flag)
    2c32:	11 23       	and	r17, r17
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <rsa_encrypt_P+0x118>
    2c36:	ed c0       	rjmp	.+474    	; 0x2e12 <rsa_encrypt_P+0x2f2>
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2c38:	97 01       	movw	r18, r14
    2c3a:	49 2d       	mov	r20, r9
    2c3c:	58 2d       	mov	r21, r8
    2c3e:	6d 2d       	mov	r22, r13
    2c40:	7c 2d       	mov	r23, r12
    2c42:	ce 01       	movw	r24, r28
    2c44:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2c48:	29 2d       	mov	r18, r9
    2c4a:	38 2d       	mov	r19, r8
    2c4c:	a5 01       	movw	r20, r10
    2c4e:	b7 01       	movw	r22, r14
    2c50:	ce 01       	movw	r24, r28
    2c52:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
			  }
		  }
		ucExponent>>=1;
    2c56:	06 95       	lsr	r16
    2c58:	10 e0       	ldi	r17, 0x00	; 0
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2c5a:	97 01       	movw	r18, r14
    2c5c:	4d 2d       	mov	r20, r13
    2c5e:	5c 2d       	mov	r21, r12
    2c60:	6d 2d       	mov	r22, r13
    2c62:	7c 2d       	mov	r23, r12
    2c64:	ce 01       	movw	r24, r28
    2c66:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2c6a:	2d 2d       	mov	r18, r13
    2c6c:	3c 2d       	mov	r19, r12
    2c6e:	a5 01       	movw	r20, r10
    2c70:	b7 01       	movw	r22, r14
    2c72:	ce 01       	movw	r24, r28
    2c74:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
		}
		if((unsigned char) (ucExponent & 1))
    2c78:	00 ff       	sbrs	r16, 0
    2c7a:	a2 c0       	rjmp	.+324    	; 0x2dc0 <rsa_encrypt_P+0x2a0>
		  {/*   s=(s*a)%d; */
		   if(flag)
    2c7c:	11 23       	and	r17, r17
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <rsa_encrypt_P+0x162>
    2c80:	00 c1       	rjmp	.+512    	; 0x2e82 <rsa_encrypt_P+0x362>
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2c82:	97 01       	movw	r18, r14
    2c84:	49 2d       	mov	r20, r9
    2c86:	58 2d       	mov	r21, r8
    2c88:	6d 2d       	mov	r22, r13
    2c8a:	7c 2d       	mov	r23, r12
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2c92:	29 2d       	mov	r18, r9
    2c94:	38 2d       	mov	r19, r8
    2c96:	a5 01       	movw	r20, r10
    2c98:	b7 01       	movw	r22, r14
    2c9a:	ce 01       	movw	r24, r28
    2c9c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
			  }
		  }
		ucExponent>>=1;
    2ca0:	06 95       	lsr	r16
    2ca2:	10 e0       	ldi	r17, 0x00	; 0
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2ca4:	97 01       	movw	r18, r14
    2ca6:	4d 2d       	mov	r20, r13
    2ca8:	5c 2d       	mov	r21, r12
    2caa:	6d 2d       	mov	r22, r13
    2cac:	7c 2d       	mov	r23, r12
    2cae:	ce 01       	movw	r24, r28
    2cb0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2cb4:	2d 2d       	mov	r18, r13
    2cb6:	3c 2d       	mov	r19, r12
    2cb8:	a5 01       	movw	r20, r10
    2cba:	b7 01       	movw	r22, r14
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
		}
		if((unsigned char) (ucExponent & 1))
    2cc2:	00 ff       	sbrs	r16, 0
    2cc4:	83 c0       	rjmp	.+262    	; 0x2dcc <rsa_encrypt_P+0x2ac>
		  {/*   s=(s*a)%d; */
		   if(flag)
    2cc6:	11 23       	and	r17, r17
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <rsa_encrypt_P+0x1ac>
    2cca:	d3 c0       	rjmp	.+422    	; 0x2e72 <rsa_encrypt_P+0x352>
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2ccc:	97 01       	movw	r18, r14
    2cce:	49 2d       	mov	r20, r9
    2cd0:	58 2d       	mov	r21, r8
    2cd2:	6d 2d       	mov	r22, r13
    2cd4:	7c 2d       	mov	r23, r12
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2cdc:	29 2d       	mov	r18, r9
    2cde:	38 2d       	mov	r19, r8
    2ce0:	a5 01       	movw	r20, r10
    2ce2:	b7 01       	movw	r22, r14
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
			  }
		  }
		ucExponent>>=1;
    2cea:	06 95       	lsr	r16
    2cec:	10 e0       	ldi	r17, 0x00	; 0
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2cee:	97 01       	movw	r18, r14
    2cf0:	4d 2d       	mov	r20, r13
    2cf2:	5c 2d       	mov	r21, r12
    2cf4:	6d 2d       	mov	r22, r13
    2cf6:	7c 2d       	mov	r23, r12
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2cfe:	2d 2d       	mov	r18, r13
    2d00:	3c 2d       	mov	r19, r12
    2d02:	a5 01       	movw	r20, r10
    2d04:	b7 01       	movw	r22, r14
    2d06:	ce 01       	movw	r24, r28
    2d08:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
		}
		if((unsigned char) (ucExponent & 1))
    2d0c:	00 ff       	sbrs	r16, 0
    2d0e:	64 c0       	rjmp	.+200    	; 0x2dd8 <rsa_encrypt_P+0x2b8>
		  {/*   s=(s*a)%d; */
		   if(flag)
    2d10:	11 23       	and	r17, r17
    2d12:	09 f0       	breq	.+2      	; 0x2d16 <rsa_encrypt_P+0x1f6>
    2d14:	76 c0       	rjmp	.+236    	; 0x2e02 <rsa_encrypt_P+0x2e2>
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2d16:	97 01       	movw	r18, r14
    2d18:	49 2d       	mov	r20, r9
    2d1a:	58 2d       	mov	r21, r8
    2d1c:	6d 2d       	mov	r22, r13
    2d1e:	7c 2d       	mov	r23, r12
    2d20:	ce 01       	movw	r24, r28
    2d22:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2d26:	29 2d       	mov	r18, r9
    2d28:	38 2d       	mov	r19, r8
    2d2a:	a5 01       	movw	r20, r10
    2d2c:	b7 01       	movw	r22, r14
    2d2e:	ce 01       	movw	r24, r28
    2d30:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
			  }
		  }
		ucExponent>>=1;
    2d34:	06 95       	lsr	r16
    2d36:	10 e0       	ldi	r17, 0x00	; 0
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2d38:	97 01       	movw	r18, r14
    2d3a:	4d 2d       	mov	r20, r13
    2d3c:	5c 2d       	mov	r21, r12
    2d3e:	6d 2d       	mov	r22, r13
    2d40:	7c 2d       	mov	r23, r12
    2d42:	ce 01       	movw	r24, r28
    2d44:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2d48:	2d 2d       	mov	r18, r13
    2d4a:	3c 2d       	mov	r19, r12
    2d4c:	a5 01       	movw	r20, r10
    2d4e:	b7 01       	movw	r22, r14
    2d50:	ce 01       	movw	r24, r28
    2d52:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
		}
		if((unsigned char) (ucExponent & 1))
    2d56:	00 ff       	sbrs	r16, 0
    2d58:	0b c0       	rjmp	.+22     	; 0x2d70 <rsa_encrypt_P+0x250>
		  {/*   s=(s*a)%d; */
		   if(flag)
    2d5a:	11 23       	and	r17, r17
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <rsa_encrypt_P+0x240>
    2d5e:	69 c0       	rjmp	.+210    	; 0x2e32 <rsa_encrypt_P+0x312>
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
    2d60:	ae 01       	movw	r20, r28
    2d62:	6d 2d       	mov	r22, r13
    2d64:	7c 2d       	mov	r23, r12
    2d66:	89 2d       	mov	r24, r9
    2d68:	98 2d       	mov	r25, r8
    2d6a:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2d6e:	10 e0       	ldi	r17, 0x00	; 0
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2d70:	08 94       	sec
    2d72:	61 08       	sbc	r6, r1
    2d74:	71 08       	sbc	r7, r1
unsigned int uiExponent;
unsigned char ucKeyBit;
unsigned char ucExponent;
uiExponent=uiKeySize;

while(uiExponent-->0)
    2d76:	41 14       	cp	r4, r1
    2d78:	51 04       	cpc	r5, r1
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <rsa_encrypt_P+0x25e>
    2d7c:	8a c0       	rjmp	.+276    	; 0x2e92 <rsa_encrypt_P+0x372>
    2d7e:	08 94       	sec
    2d80:	41 08       	sbc	r4, r1
    2d82:	51 08       	sbc	r5, r1
  {
  	ucExponent = pgm_read_byte_near(pucExponent+uiExponent);
    2d84:	f3 01       	movw	r30, r6
    2d86:	04 91       	lpm	r16, Z+
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
    2d88:	11 23       	and	r17, r17
    2d8a:	59 f1       	breq	.+86     	; 0x2de2 <rsa_encrypt_P+0x2c2>
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
		}
		if((unsigned char) (ucExponent & 1))
    2d8c:	00 fd       	sbrc	r16, 0
    2d8e:	e2 ce       	rjmp	.-572    	; 0x2b54 <rsa_encrypt_P+0x34>
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
			  }
		  }
		ucExponent>>=1;
    2d90:	06 95       	lsr	r16
while(uiExponent-->0)
  {
  	ucExponent = pgm_read_byte_near(pucExponent+uiExponent);
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
    2d92:	11 23       	and	r17, r17
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <rsa_encrypt_P+0x278>
    2d96:	f2 ce       	rjmp	.-540    	; 0x2b7c <rsa_encrypt_P+0x5c>
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
		}
		if((unsigned char) (ucExponent & 1))
    2d98:	00 fd       	sbrc	r16, 0
    2d9a:	01 cf       	rjmp	.-510    	; 0x2b9e <rsa_encrypt_P+0x7e>
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
			  }
		  }
		ucExponent>>=1;
    2d9c:	06 95       	lsr	r16
while(uiExponent-->0)
  {
  	ucExponent = pgm_read_byte_near(pucExponent+uiExponent);
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
    2d9e:	11 23       	and	r17, r17
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <rsa_encrypt_P+0x284>
    2da2:	11 cf       	rjmp	.-478    	; 0x2bc6 <rsa_encrypt_P+0xa6>
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
		}
		if((unsigned char) (ucExponent & 1))
    2da4:	00 fd       	sbrc	r16, 0
    2da6:	20 cf       	rjmp	.-448    	; 0x2be8 <rsa_encrypt_P+0xc8>
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
			  }
		  }
		ucExponent>>=1;
    2da8:	06 95       	lsr	r16
while(uiExponent-->0)
  {
  	ucExponent = pgm_read_byte_near(pucExponent+uiExponent);
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
    2daa:	11 23       	and	r17, r17
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <rsa_encrypt_P+0x290>
    2dae:	30 cf       	rjmp	.-416    	; 0x2c10 <rsa_encrypt_P+0xf0>
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
		}
		if((unsigned char) (ucExponent & 1))
    2db0:	00 fd       	sbrc	r16, 0
    2db2:	3f cf       	rjmp	.-386    	; 0x2c32 <rsa_encrypt_P+0x112>
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
			  }
		  }
		ucExponent>>=1;
    2db4:	06 95       	lsr	r16
while(uiExponent-->0)
  {
  	ucExponent = pgm_read_byte_near(pucExponent+uiExponent);
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
    2db6:	11 23       	and	r17, r17
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <rsa_encrypt_P+0x29c>
    2dba:	4f cf       	rjmp	.-354    	; 0x2c5a <rsa_encrypt_P+0x13a>
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
		}
		if((unsigned char) (ucExponent & 1))
    2dbc:	00 fd       	sbrc	r16, 0
    2dbe:	5e cf       	rjmp	.-324    	; 0x2c7c <rsa_encrypt_P+0x15c>
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
			  }
		  }
		ucExponent>>=1;
    2dc0:	06 95       	lsr	r16
while(uiExponent-->0)
  {
  	ucExponent = pgm_read_byte_near(pucExponent+uiExponent);
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
    2dc2:	11 23       	and	r17, r17
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <rsa_encrypt_P+0x2a8>
    2dc6:	6e cf       	rjmp	.-292    	; 0x2ca4 <rsa_encrypt_P+0x184>
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
		}
		if((unsigned char) (ucExponent & 1))
    2dc8:	00 fd       	sbrc	r16, 0
    2dca:	7d cf       	rjmp	.-262    	; 0x2cc6 <rsa_encrypt_P+0x1a6>
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
			  }
		  }
		ucExponent>>=1;
    2dcc:	06 95       	lsr	r16
while(uiExponent-->0)
  {
  	ucExponent = pgm_read_byte_near(pucExponent+uiExponent);
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
    2dce:	11 23       	and	r17, r17
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <rsa_encrypt_P+0x2b4>
    2dd2:	8d cf       	rjmp	.-230    	; 0x2cee <rsa_encrypt_P+0x1ce>
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
		}
		if((unsigned char) (ucExponent & 1))
    2dd4:	00 fd       	sbrc	r16, 0
    2dd6:	9c cf       	rjmp	.-200    	; 0x2d10 <rsa_encrypt_P+0x1f0>
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
			  }
		  }
		ucExponent>>=1;
    2dd8:	06 95       	lsr	r16
while(uiExponent-->0)
  {
  	ucExponent = pgm_read_byte_near(pucExponent+uiExponent);
	for(ucKeyBit=0;ucKeyBit<8;ucKeyBit++)
	{
		if(!flag)
    2dda:	11 23       	and	r17, r17
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <rsa_encrypt_P+0x2c0>
    2dde:	bb cf       	rjmp	.-138    	; 0x2d56 <rsa_encrypt_P+0x236>
    2de0:	ab cf       	rjmp	.-170    	; 0x2d38 <rsa_encrypt_P+0x218>
		{
		/* a=(a*a)%d   */
		  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2de2:	97 01       	movw	r18, r14
    2de4:	4d 2d       	mov	r20, r13
    2de6:	5c 2d       	mov	r21, r12
    2de8:	6d 2d       	mov	r22, r13
    2dea:	7c 2d       	mov	r23, r12
    2dec:	ce 01       	movw	r24, r28
    2dee:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2df2:	2d 2d       	mov	r18, r13
    2df4:	3c 2d       	mov	r19, r12
    2df6:	a5 01       	movw	r20, r10
    2df8:	b7 01       	movw	r22, r14
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
    2e00:	c5 cf       	rjmp	.-118    	; 0x2d8c <rsa_encrypt_P+0x26c>
		}
		if((unsigned char) (ucExponent & 1))
		  {/*   s=(s*a)%d; */
		   if(flag)
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
    2e02:	ae 01       	movw	r20, r28
    2e04:	6d 2d       	mov	r22, r13
    2e06:	7c 2d       	mov	r23, r12
    2e08:	89 2d       	mov	r24, r9
    2e0a:	98 2d       	mov	r25, r8
    2e0c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2e10:	91 cf       	rjmp	.-222    	; 0x2d34 <rsa_encrypt_P+0x214>
    2e12:	ae 01       	movw	r20, r28
    2e14:	6d 2d       	mov	r22, r13
    2e16:	7c 2d       	mov	r23, r12
    2e18:	89 2d       	mov	r24, r9
    2e1a:	98 2d       	mov	r25, r8
    2e1c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2e20:	1a cf       	rjmp	.-460    	; 0x2c56 <rsa_encrypt_P+0x136>
    2e22:	ae 01       	movw	r20, r28
    2e24:	6d 2d       	mov	r22, r13
    2e26:	7c 2d       	mov	r23, r12
    2e28:	89 2d       	mov	r24, r9
    2e2a:	98 2d       	mov	r25, r8
    2e2c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2e30:	ed ce       	rjmp	.-550    	; 0x2c0c <rsa_encrypt_P+0xec>
			  }
			else
			  {
			  rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */
    2e32:	97 01       	movw	r18, r14
    2e34:	49 2d       	mov	r20, r9
    2e36:	58 2d       	mov	r21, r8
    2e38:	6d 2d       	mov	r22, r13
    2e3a:	7c 2d       	mov	r23, r12
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
			  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2e42:	29 2d       	mov	r18, r9
    2e44:	38 2d       	mov	r19, r8
    2e46:	a5 01       	movw	r20, r10
    2e48:	b7 01       	movw	r22, r14
    2e4a:	ce 01       	movw	r24, r28
    2e4c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
    2e50:	8f cf       	rjmp	.-226    	; 0x2d70 <rsa_encrypt_P+0x250>
		}
		if((unsigned char) (ucExponent & 1))
		  {/*   s=(s*a)%d; */
		   if(flag)
			  { flag=0;
			  memcpy(pucRsa_s,pucRsa_data,uiKeySize);
    2e52:	ae 01       	movw	r20, r28
    2e54:	6d 2d       	mov	r22, r13
    2e56:	7c 2d       	mov	r23, r12
    2e58:	89 2d       	mov	r24, r9
    2e5a:	98 2d       	mov	r25, r8
    2e5c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2e60:	b0 ce       	rjmp	.-672    	; 0x2bc2 <rsa_encrypt_P+0xa2>
    2e62:	ae 01       	movw	r20, r28
    2e64:	6d 2d       	mov	r22, r13
    2e66:	7c 2d       	mov	r23, r12
    2e68:	89 2d       	mov	r24, r9
    2e6a:	98 2d       	mov	r25, r8
    2e6c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2e70:	83 ce       	rjmp	.-762    	; 0x2b78 <rsa_encrypt_P+0x58>
    2e72:	ae 01       	movw	r20, r28
    2e74:	6d 2d       	mov	r22, r13
    2e76:	7c 2d       	mov	r23, r12
    2e78:	89 2d       	mov	r24, r9
    2e7a:	98 2d       	mov	r25, r8
    2e7c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2e80:	34 cf       	rjmp	.-408    	; 0x2cea <rsa_encrypt_P+0x1ca>
    2e82:	ae 01       	movw	r20, r28
    2e84:	6d 2d       	mov	r22, r13
    2e86:	7c 2d       	mov	r23, r12
    2e88:	89 2d       	mov	r24, r9
    2e8a:	98 2d       	mov	r25, r8
    2e8c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2e90:	07 cf       	rjmp	.-498    	; 0x2ca0 <rsa_encrypt_P+0x180>
			  }
		  }
		ucExponent>>=1;
	}
  }
memcpy(pucRsa_data,pucRsa_s,uiKeySize);
    2e92:	ae 01       	movw	r20, r28
    2e94:	69 2d       	mov	r22, r9
    2e96:	78 2d       	mov	r23, r8
    2e98:	8d 2d       	mov	r24, r13
    2e9a:	9c 2d       	mov	r25, r12
    2e9c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
}
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
    2ea8:	bf 90       	pop	r11
    2eaa:	af 90       	pop	r10
    2eac:	9f 90       	pop	r9
    2eae:	8f 90       	pop	r8
    2eb0:	7f 90       	pop	r7
    2eb2:	6f 90       	pop	r6
    2eb4:	5f 90       	pop	r5
    2eb6:	4f 90       	pop	r4
    2eb8:	08 95       	ret

00002eba <rsa_decrypt_P>:

#include "AVRCrytolib.h"
#include "rsa_asm.h"

void rsa_decrypt_P(unsigned int uiKeySize,unsigned char *pucRsa_data ,unsigned int uiExponent,UPGM_P pucModulo,unsigned char *pucRsa_s,unsigned char *pucRsa_tmp)
{
    2eba:	7f 92       	push	r7
    2ebc:	8f 92       	push	r8
    2ebe:	9f 92       	push	r9
    2ec0:	af 92       	push	r10
    2ec2:	bf 92       	push	r11
    2ec4:	cf 92       	push	r12
    2ec6:	df 92       	push	r13
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	b8 2e       	mov	r11, r24
    2ece:	a9 2e       	mov	r10, r25
    2ed0:	d6 2e       	mov	r13, r22
    2ed2:	c7 2e       	mov	r12, r23
    2ed4:	ea 01       	movw	r28, r20
    2ed6:	49 01       	movw	r8, r18
unsigned char flag;
flag=1;
/* s = 1 */
/* a = a^e%d */
while(uiExponent)
    2ed8:	41 15       	cp	r20, r1
    2eda:	51 05       	cpc	r21, r1
    2edc:	91 f0       	breq	.+36     	; 0x2f02 <rsa_decrypt_P+0x48>
    2ede:	77 24       	eor	r7, r7
    2ee0:	73 94       	inc	r7
  {
	if(uiExponent&1)
    2ee2:	c0 ff       	sbrs	r28, 0
    2ee4:	0a c0       	rjmp	.+20     	; 0x2efa <rsa_decrypt_P+0x40>
	  {/*   s=(s*a)%d; */
	   if(flag)
    2ee6:	77 20       	and	r7, r7
    2ee8:	79 f1       	breq	.+94     	; 0x2f48 <rsa_decrypt_P+0x8e>
		  { 
	  		flag=0;
			memcpy(pucRsa_s,pucRsa_data,uiKeySize);
    2eea:	4b 2d       	mov	r20, r11
    2eec:	5a 2d       	mov	r21, r10
    2eee:	6d 2d       	mov	r22, r13
    2ef0:	7c 2d       	mov	r23, r12
    2ef2:	c8 01       	movw	r24, r16
    2ef4:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    2ef8:	77 24       	eor	r7, r7
		  {
		  	rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */                  
		  	rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
		  }
	  }
	uiExponent>>=1;
    2efa:	d6 95       	lsr	r29
    2efc:	c7 95       	ror	r28
	/* a=(a*a)%d   */
	if(uiExponent) /* A is not used is e == 0 */
    2efe:	20 97       	sbiw	r28, 0x00	; 0
    2f00:	89 f4       	brne	.+34     	; 0x2f24 <rsa_decrypt_P+0x6a>
	{
	  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
	  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    }
  }
memcpy(pucRsa_data,pucRsa_s,uiKeySize);
    2f02:	4b 2d       	mov	r20, r11
    2f04:	5a 2d       	mov	r21, r10
    2f06:	b8 01       	movw	r22, r16
    2f08:	8d 2d       	mov	r24, r13
    2f0a:	9c 2d       	mov	r25, r12
    2f0c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
}
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	df 90       	pop	r13
    2f16:	cf 90       	pop	r12
    2f18:	bf 90       	pop	r11
    2f1a:	af 90       	pop	r10
    2f1c:	9f 90       	pop	r9
    2f1e:	8f 90       	pop	r8
    2f20:	7f 90       	pop	r7
    2f22:	08 95       	ret
	  }
	uiExponent>>=1;
	/* a=(a*a)%d   */
	if(uiExponent) /* A is not used is e == 0 */
	{
	  rsa_mull(uiKeySize,pucRsa_data,pucRsa_data,pucRsa_tmp); /* TMP = A * A    */
    2f24:	97 01       	movw	r18, r14
    2f26:	4d 2d       	mov	r20, r13
    2f28:	5c 2d       	mov	r21, r12
    2f2a:	6d 2d       	mov	r22, r13
    2f2c:	7c 2d       	mov	r23, r12
    2f2e:	8b 2d       	mov	r24, r11
    2f30:	9a 2d       	mov	r25, r10
    2f32:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
	  rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_data); /* A   = TMP % D  */
    2f36:	2d 2d       	mov	r18, r13
    2f38:	3c 2d       	mov	r19, r12
    2f3a:	a4 01       	movw	r20, r8
    2f3c:	b7 01       	movw	r22, r14
    2f3e:	8b 2d       	mov	r24, r11
    2f40:	9a 2d       	mov	r25, r10
    2f42:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
    2f46:	cd cf       	rjmp	.-102    	; 0x2ee2 <rsa_decrypt_P+0x28>
			memcpy(pucRsa_s,pucRsa_data,uiKeySize);
             /*  modulo(tmp,d,s,A_LEN,D_LEN,S_LEN);*/ /* S = A % D */
		  }
		else
		  {
		  	rsa_mull(uiKeySize,pucRsa_data,pucRsa_s,pucRsa_tmp); /* TMP = A*S   */                  
    2f48:	97 01       	movw	r18, r14
    2f4a:	a8 01       	movw	r20, r16
    2f4c:	6d 2d       	mov	r22, r13
    2f4e:	7c 2d       	mov	r23, r12
    2f50:	8b 2d       	mov	r24, r11
    2f52:	9a 2d       	mov	r25, r10
    2f54:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <rsa_mull>
		  	rsa_modulo_P(uiKeySize,pucRsa_tmp,pucModulo,pucRsa_s); /* S = TMP % D */
    2f58:	98 01       	movw	r18, r16
    2f5a:	a4 01       	movw	r20, r8
    2f5c:	b7 01       	movw	r22, r14
    2f5e:	8b 2d       	mov	r24, r11
    2f60:	9a 2d       	mov	r25, r10
    2f62:	0e 94 78 18 	call	0x30f0	; 0x30f0 <rsa_modulo_P>
    2f66:	c9 cf       	rjmp	.-110    	; 0x2efa <rsa_decrypt_P+0x40>

00002f68 <rsa_mull>:
    2f68:	0f 92       	push	r0
    2f6a:	1f 92       	push	r1
    2f6c:	2f 92       	push	r2
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	f9 01       	movw	r30, r18
    2f7e:	eb 01       	movw	r28, r22
    2f80:	bc 01       	movw	r22, r24

00002f82 <mul_Clr_1>:
    2f82:	11 92       	st	Z+, r1
    2f84:	11 92       	st	Z+, r1
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	e1 f7       	brne	.-8      	; 0x2f82 <mul_Clr_1>
    2f8a:	ee 24       	eor	r14, r14
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	61 50       	subi	r22, 0x01	; 1
    2f90:	7e 09       	sbc	r23, r14
    2f92:	c8 0f       	add	r28, r24
    2f94:	d9 1f       	adc	r29, r25
    2f96:	48 0f       	add	r20, r24
    2f98:	59 1f       	adc	r21, r25

00002f9a <rsamulloop2>:
    2f9a:	0a 91       	ld	r16, -Y
    2f9c:	da 01       	movw	r26, r20
    2f9e:	ff 93       	push	r31
    2fa0:	ef 93       	push	r30
    2fa2:	9f 93       	push	r25
    2fa4:	8f 93       	push	r24
    2fa6:	22 24       	eor	r2, r2
    2fa8:	11 24       	eor	r1, r1

00002faa <rsamulloop1>:
    2faa:	f1 2c       	mov	r15, r1
    2fac:	d2 2c       	mov	r13, r2
    2fae:	0e 90       	ld	r0, -X
    2fb0:	00 9e       	mul	r0, r16
    2fb2:	12 91       	ld	r17, -Z
    2fb4:	01 0e       	add	r0, r17
    2fb6:	1e 1c       	adc	r1, r14
    2fb8:	22 24       	eor	r2, r2
    2fba:	2e 1c       	adc	r2, r14
    2fbc:	0f 0c       	add	r0, r15
    2fbe:	1d 1c       	adc	r1, r13
    2fc0:	2e 1c       	adc	r2, r14
    2fc2:	00 82       	st	Z, r0
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	89 f7       	brne	.-30     	; 0x2faa <rsamulloop1>
    2fc8:	11 20       	and	r1, r1
    2fca:	29 f0       	breq	.+10     	; 0x2fd6 <rsamul_noaddr1>
    2fcc:	12 91       	ld	r17, -Z
    2fce:	11 0e       	add	r1, r17
    2fd0:	2e 1c       	adc	r2, r14
    2fd2:	10 82       	st	Z, r1
    2fd4:	01 c0       	rjmp	.+2      	; 0x2fd8 <rsamul_noaddr2>

00002fd6 <rsamul_noaddr1>:
    2fd6:	31 97       	sbiw	r30, 0x01	; 1

00002fd8 <rsamul_noaddr2>:
    2fd8:	22 20       	and	r2, r2
    2fda:	19 f0       	breq	.+6      	; 0x2fe2 <rsamul_noaddr3>
    2fdc:	12 91       	ld	r17, -Z
    2fde:	21 0e       	add	r2, r17
    2fe0:	20 82       	st	Z, r2

00002fe2 <rsamul_noaddr3>:
    2fe2:	8f 91       	pop	r24
    2fe4:	9f 91       	pop	r25
    2fe6:	ef 91       	pop	r30
    2fe8:	ff 91       	pop	r31
    2fea:	31 97       	sbiw	r30, 0x01	; 1
    2fec:	61 50       	subi	r22, 0x01	; 1
    2fee:	7e 09       	sbc	r23, r14
    2ff0:	a0 f6       	brcc	.-88     	; 0x2f9a <rsamulloop2>
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	2f 90       	pop	r2
    3002:	1f 90       	pop	r1
    3004:	0f 90       	pop	r0
    3006:	08 95       	ret

00003008 <rsa_modulo>:
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	6f 92       	push	r6
    300e:	7f 92       	push	r7
    3010:	8f 92       	push	r8
    3012:	9f 92       	push	r9
    3014:	af 92       	push	r10
    3016:	bf 92       	push	r11
    3018:	cf 92       	push	r12
    301a:	df 92       	push	r13
    301c:	ef 92       	push	r14
    301e:	ff 92       	push	r15
    3020:	0f 93       	push	r16
    3022:	1f 93       	push	r17
    3024:	2f 93       	push	r18
    3026:	3f 93       	push	r19
    3028:	4b 01       	movw	r8, r22
    302a:	09 e0       	ldi	r16, 0x09	; 9
    302c:	70 2e       	mov	r7, r16
    302e:	68 0f       	add	r22, r24
    3030:	79 1f       	adc	r23, r25
    3032:	eb 01       	movw	r28, r22
    3034:	69 90       	ld	r6, Y+
    3036:	6c 01       	movw	r12, r24
    3038:	8c 01       	movw	r16, r24
    303a:	00 0f       	add	r16, r16
    303c:	11 1f       	adc	r17, r17
    303e:	00 0f       	add	r16, r16
    3040:	11 1f       	adc	r17, r17
    3042:	00 0f       	add	r16, r16
    3044:	11 1f       	adc	r17, r17
    3046:	01 50       	subi	r16, 0x01	; 1
    3048:	11 09       	sbc	r17, r1

0000304a <rsa_modulo1>:
    304a:	39 d0       	rcall	.+114    	; 0x30be <rsa_modulosub>
    304c:	7a 94       	dec	r7
    304e:	19 f4       	brne	.+6      	; 0x3056 <rol_start>
    3050:	e8 e0       	ldi	r30, 0x08	; 8
    3052:	7e 2e       	mov	r7, r30
    3054:	69 90       	ld	r6, Y+

00003056 <rol_start>:
    3056:	c6 01       	movw	r24, r12
    3058:	96 95       	lsr	r25
    305a:	87 95       	ror	r24
    305c:	96 95       	lsr	r25
    305e:	87 95       	ror	r24
    3060:	fb 01       	movw	r30, r22
    3062:	66 0c       	add	r6, r6
    3064:	ee 1c       	adc	r14, r14

00003066 <rol_a>:
    3066:	e7 94       	ror	r14
    3068:	f2 90       	ld	r15, -Z
    306a:	ff 1c       	adc	r15, r15
    306c:	f0 82       	st	Z, r15
    306e:	f2 90       	ld	r15, -Z
    3070:	ff 1c       	adc	r15, r15
    3072:	f0 82       	st	Z, r15
    3074:	f2 90       	ld	r15, -Z
    3076:	ff 1c       	adc	r15, r15
    3078:	f0 82       	st	Z, r15
    307a:	f2 90       	ld	r15, -Z
    307c:	ff 1c       	adc	r15, r15
    307e:	f0 82       	st	Z, r15
    3080:	ee 1c       	adc	r14, r14
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	81 f7       	brne	.-32     	; 0x3066 <rol_a>
    3086:	e7 94       	ror	r14
    3088:	08 f4       	brcc	.+2      	; 0x308c <noCarrySoNoSub>
    308a:	23 d0       	rcall	.+70     	; 0x30d2 <sub_it>

0000308c <noCarrySoNoSub>:
    308c:	01 50       	subi	r16, 0x01	; 1
    308e:	11 09       	sbc	r17, r1
    3090:	e0 f6       	brcc	.-72     	; 0x304a <rsa_modulo1>
    3092:	15 d0       	rcall	.+42     	; 0x30be <rsa_modulosub>
    3094:	a6 01       	movw	r20, r12
    3096:	c9 01       	movw	r24, r18
    3098:	b4 01       	movw	r22, r8
    309a:	3f 91       	pop	r19
    309c:	2f 91       	pop	r18
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	ff 90       	pop	r15
    30a4:	ef 90       	pop	r14
    30a6:	df 90       	pop	r13
    30a8:	cf 90       	pop	r12
    30aa:	bf 90       	pop	r11
    30ac:	af 90       	pop	r10
    30ae:	9f 90       	pop	r9
    30b0:	8f 90       	pop	r8
    30b2:	7f 90       	pop	r7
    30b4:	6f 90       	pop	r6
    30b6:	df 91       	pop	r29
    30b8:	cf 91       	pop	r28
    30ba:	0c 94 81 2c 	jmp	0x5902	; 0x5902 <memcpy>

000030be <rsa_modulosub>:
    30be:	c6 01       	movw	r24, r12
    30c0:	fa 01       	movw	r30, r20
    30c2:	d4 01       	movw	r26, r8

000030c4 <cmp_a>:
    30c4:	f1 90       	ld	r15, Z+
    30c6:	ed 90       	ld	r14, X+
    30c8:	ef 14       	cp	r14, r15
    30ca:	88 f0       	brcs	.+34     	; 0x30ee <sub_not>
    30cc:	11 f4       	brne	.+4      	; 0x30d2 <sub_it>
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	c9 f7       	brne	.-14     	; 0x30c4 <cmp_a>

000030d2 <sub_it>:
    30d2:	c6 01       	movw	r24, r12
    30d4:	fa 01       	movw	r30, r20
    30d6:	db 01       	movw	r26, r22
    30d8:	e8 0f       	add	r30, r24
    30da:	f9 1f       	adc	r31, r25
    30dc:	ee 24       	eor	r14, r14

000030de <sub_a>:
    30de:	e7 94       	ror	r14
    30e0:	f2 90       	ld	r15, -Z
    30e2:	ee 90       	ld	r14, -X
    30e4:	ef 08       	sbc	r14, r15
    30e6:	ec 92       	st	X, r14
    30e8:	ee 1c       	adc	r14, r14
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	c1 f7       	brne	.-16     	; 0x30de <sub_a>

000030ee <sub_not>:
    30ee:	08 95       	ret

000030f0 <rsa_modulo_P>:
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	6f 92       	push	r6
    30f6:	7f 92       	push	r7
    30f8:	8f 92       	push	r8
    30fa:	9f 92       	push	r9
    30fc:	af 92       	push	r10
    30fe:	bf 92       	push	r11
    3100:	cf 92       	push	r12
    3102:	df 92       	push	r13
    3104:	ef 92       	push	r14
    3106:	ff 92       	push	r15
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	2f 93       	push	r18
    310e:	3f 93       	push	r19
    3110:	4b 01       	movw	r8, r22
    3112:	09 e0       	ldi	r16, 0x09	; 9
    3114:	70 2e       	mov	r7, r16
    3116:	68 0f       	add	r22, r24
    3118:	79 1f       	adc	r23, r25
    311a:	eb 01       	movw	r28, r22
    311c:	69 90       	ld	r6, Y+
    311e:	6c 01       	movw	r12, r24
    3120:	8c 01       	movw	r16, r24
    3122:	00 0f       	add	r16, r16
    3124:	11 1f       	adc	r17, r17
    3126:	00 0f       	add	r16, r16
    3128:	11 1f       	adc	r17, r17
    312a:	00 0f       	add	r16, r16
    312c:	11 1f       	adc	r17, r17
    312e:	01 50       	subi	r16, 0x01	; 1
    3130:	11 09       	sbc	r17, r1

00003132 <rsa_modulo1>:
    3132:	39 d0       	rcall	.+114    	; 0x31a6 <rsa_modulosub>
    3134:	7a 94       	dec	r7
    3136:	19 f4       	brne	.+6      	; 0x313e <rol_start>
    3138:	e8 e0       	ldi	r30, 0x08	; 8
    313a:	7e 2e       	mov	r7, r30
    313c:	69 90       	ld	r6, Y+

0000313e <rol_start>:
    313e:	c6 01       	movw	r24, r12
    3140:	96 95       	lsr	r25
    3142:	87 95       	ror	r24
    3144:	96 95       	lsr	r25
    3146:	87 95       	ror	r24
    3148:	fb 01       	movw	r30, r22
    314a:	66 0c       	add	r6, r6
    314c:	ee 1c       	adc	r14, r14

0000314e <rol_a>:
    314e:	e7 94       	ror	r14
    3150:	f2 90       	ld	r15, -Z
    3152:	ff 1c       	adc	r15, r15
    3154:	f0 82       	st	Z, r15
    3156:	f2 90       	ld	r15, -Z
    3158:	ff 1c       	adc	r15, r15
    315a:	f0 82       	st	Z, r15
    315c:	f2 90       	ld	r15, -Z
    315e:	ff 1c       	adc	r15, r15
    3160:	f0 82       	st	Z, r15
    3162:	f2 90       	ld	r15, -Z
    3164:	ff 1c       	adc	r15, r15
    3166:	f0 82       	st	Z, r15
    3168:	ee 1c       	adc	r14, r14
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	81 f7       	brne	.-32     	; 0x314e <rol_a>
    316e:	e7 94       	ror	r14
    3170:	08 f4       	brcc	.+2      	; 0x3174 <noCarrySoNoSub>
    3172:	23 d0       	rcall	.+70     	; 0x31ba <sub_it>

00003174 <noCarrySoNoSub>:
    3174:	01 50       	subi	r16, 0x01	; 1
    3176:	11 09       	sbc	r17, r1
    3178:	e0 f6       	brcc	.-72     	; 0x3132 <rsa_modulo1>
    317a:	15 d0       	rcall	.+42     	; 0x31a6 <rsa_modulosub>
    317c:	a6 01       	movw	r20, r12
    317e:	c9 01       	movw	r24, r18
    3180:	b4 01       	movw	r22, r8
    3182:	3f 91       	pop	r19
    3184:	2f 91       	pop	r18
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	ff 90       	pop	r15
    318c:	ef 90       	pop	r14
    318e:	df 90       	pop	r13
    3190:	cf 90       	pop	r12
    3192:	bf 90       	pop	r11
    3194:	af 90       	pop	r10
    3196:	9f 90       	pop	r9
    3198:	8f 90       	pop	r8
    319a:	7f 90       	pop	r7
    319c:	6f 90       	pop	r6
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	0c 94 81 2c 	jmp	0x5902	; 0x5902 <memcpy>

000031a6 <rsa_modulosub>:
    31a6:	c6 01       	movw	r24, r12
    31a8:	fa 01       	movw	r30, r20
    31aa:	d4 01       	movw	r26, r8

000031ac <cmp_a>:
    31ac:	f5 90       	lpm	r15, Z+
    31ae:	ed 90       	ld	r14, X+
    31b0:	ef 14       	cp	r14, r15
    31b2:	90 f0       	brcs	.+36     	; 0x31d8 <sub_not>
    31b4:	11 f4       	brne	.+4      	; 0x31ba <sub_it>
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	c9 f7       	brne	.-14     	; 0x31ac <cmp_a>

000031ba <sub_it>:
    31ba:	c6 01       	movw	r24, r12
    31bc:	fa 01       	movw	r30, r20
    31be:	db 01       	movw	r26, r22
    31c0:	e8 0f       	add	r30, r24
    31c2:	f9 1f       	adc	r31, r25
    31c4:	ee 24       	eor	r14, r14

000031c6 <sub_a>:
    31c6:	31 97       	sbiw	r30, 0x01	; 1
    31c8:	f4 90       	lpm	r15, Z+
    31ca:	e7 94       	ror	r14
    31cc:	ee 90       	ld	r14, -X
    31ce:	ef 08       	sbc	r14, r15
    31d0:	ec 92       	st	X, r14
    31d2:	ee 1c       	adc	r14, r14
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	b9 f7       	brne	.-18     	; 0x31c6 <sub_a>

000031d8 <sub_not>:
    31d8:	08 95       	ret

000031da <rsa_ror>:
    31da:	fb 01       	movw	r30, r22
    31dc:	88 94       	clc
    31de:	77 95       	ror	r23

000031e0 <RSAROR1>:
    31e0:	77 1f       	adc	r23, r23
    31e2:	60 81       	ld	r22, Z
    31e4:	67 95       	ror	r22
    31e6:	61 93       	st	Z+, r22
    31e8:	77 95       	ror	r23
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	c9 f7       	brne	.-14     	; 0x31e0 <RSAROR1>
    31ee:	08 95       	ret

000031f0 <rsa_memtst>:
    31f0:	fb 01       	movw	r30, r22
    31f2:	e8 0f       	add	r30, r24
    31f4:	f9 1f       	adc	r31, r25

000031f6 <memtst_L1>:
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	29 f0       	breq	.+10     	; 0x3204 <memtst_end>
    31fa:	62 91       	ld	r22, -Z
    31fc:	66 23       	and	r22, r22
    31fe:	d9 f3       	breq	.-10     	; 0x31f6 <memtst_L1>
    3200:	99 27       	eor	r25, r25
    3202:	81 e0       	ldi	r24, 0x01	; 1

00003204 <memtst_end>:
    3204:	08 95       	ret

00003206 <Des_Decrypt>:
  D E S ANSI X3.92-1981  
  By Emile van der Laan
-----------------------------------------------------------------*/

void Des_Decrypt(unsigned char *binput, unsigned char *boutput, unsigned char *bkey)
{     
    3206:	ef 92       	push	r14
    3208:	ff 92       	push	r15
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	18 2f       	mov	r17, r24
    3210:	09 2f       	mov	r16, r25
    3212:	f6 2e       	mov	r15, r22
    3214:	e7 2e       	mov	r14, r23
 	memcpy(Des_Key,bkey,8);
    3216:	af ef       	ldi	r26, 0xFF	; 255
    3218:	b4 e0       	ldi	r27, 0x04	; 4
    321a:	fa 01       	movw	r30, r20
    321c:	88 e0       	ldi	r24, 0x08	; 8
    321e:	01 90       	ld	r0, Z+
    3220:	0d 92       	st	X+, r0
    3222:	81 50       	subi	r24, 0x01	; 1
    3224:	e1 f7       	brne	.-8      	; 0x321e <Des_Decrypt+0x18>
	memcpy(Des_Input,binput,8);
    3226:	a7 ef       	ldi	r26, 0xF7	; 247
    3228:	b4 e0       	ldi	r27, 0x04	; 4
    322a:	81 2f       	mov	r24, r17
    322c:	90 2f       	mov	r25, r16
    322e:	9c 01       	movw	r18, r24
    3230:	f9 01       	movw	r30, r18
    3232:	88 e0       	ldi	r24, 0x08	; 8
    3234:	01 90       	ld	r0, Z+
    3236:	0d 92       	st	X+, r0
    3238:	81 50       	subi	r24, 0x01	; 1
    323a:	e1 f7       	brne	.-8      	; 0x3234 <Des_Decrypt+0x2e>

	DesKeyScheduleCalculation();
    323c:	0e 94 8b 2a 	call	0x5516	; 0x5516 <DesKeyScheduleCalculation>
	Des_Dec();
    3240:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <Des_Dec>

	memcpy(boutput,Des_Input,8);
    3244:	8f 2d       	mov	r24, r15
    3246:	9e 2d       	mov	r25, r14
    3248:	9c 01       	movw	r18, r24
    324a:	d9 01       	movw	r26, r18
    324c:	e7 ef       	ldi	r30, 0xF7	; 247
    324e:	f4 e0       	ldi	r31, 0x04	; 4
    3250:	88 e0       	ldi	r24, 0x08	; 8
    3252:	01 90       	ld	r0, Z+
    3254:	0d 92       	st	X+, r0
    3256:	81 50       	subi	r24, 0x01	; 1
    3258:	e1 f7       	brne	.-8      	; 0x3252 <Des_Decrypt+0x4c>
}
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	08 95       	ret

00003264 <Des_Encrypt>:
  D E S ANSI X3.92-1981  
  By Emile van der Laan
-----------------------------------------------------------------*/

void Des_Encrypt(unsigned char *binput, unsigned char *boutput, unsigned char *bkey)
{
    3264:	ef 92       	push	r14
    3266:	ff 92       	push	r15
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	18 2f       	mov	r17, r24
    326e:	09 2f       	mov	r16, r25
    3270:	f6 2e       	mov	r15, r22
    3272:	e7 2e       	mov	r14, r23
	memcpy(Des_Key,bkey,8);
    3274:	af ef       	ldi	r26, 0xFF	; 255
    3276:	b4 e0       	ldi	r27, 0x04	; 4
    3278:	fa 01       	movw	r30, r20
    327a:	88 e0       	ldi	r24, 0x08	; 8
    327c:	01 90       	ld	r0, Z+
    327e:	0d 92       	st	X+, r0
    3280:	81 50       	subi	r24, 0x01	; 1
    3282:	e1 f7       	brne	.-8      	; 0x327c <Des_Encrypt+0x18>
	memcpy(Des_Input,binput,8);
    3284:	a7 ef       	ldi	r26, 0xF7	; 247
    3286:	b4 e0       	ldi	r27, 0x04	; 4
    3288:	81 2f       	mov	r24, r17
    328a:	90 2f       	mov	r25, r16
    328c:	9c 01       	movw	r18, r24
    328e:	f9 01       	movw	r30, r18
    3290:	88 e0       	ldi	r24, 0x08	; 8
    3292:	01 90       	ld	r0, Z+
    3294:	0d 92       	st	X+, r0
    3296:	81 50       	subi	r24, 0x01	; 1
    3298:	e1 f7       	brne	.-8      	; 0x3292 <Des_Encrypt+0x2e>

	DesKeyScheduleCalculation();
    329a:	0e 94 8b 2a 	call	0x5516	; 0x5516 <DesKeyScheduleCalculation>
	Des_Enc();
    329e:	0e 94 07 2b 	call	0x560e	; 0x560e <Des_Enc>

	memcpy(boutput,Des_Input,8);
    32a2:	8f 2d       	mov	r24, r15
    32a4:	9e 2d       	mov	r25, r14
    32a6:	9c 01       	movw	r18, r24
    32a8:	d9 01       	movw	r26, r18
    32aa:	e7 ef       	ldi	r30, 0xF7	; 247
    32ac:	f4 e0       	ldi	r31, 0x04	; 4
    32ae:	88 e0       	ldi	r24, 0x08	; 8
    32b0:	01 90       	ld	r0, Z+
    32b2:	0d 92       	st	X+, r0
    32b4:	81 50       	subi	r24, 0x01	; 1
    32b6:	e1 f7       	brne	.-8      	; 0x32b0 <Des_Encrypt+0x4c>

}
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	08 95       	ret

000032c2 <Triple_Des_Decrypt>:
/*----------------------------------------------------------------
  Triple D E S 
  By Emile van der Laan
-----------------------------------------------------------------*/
void Triple_Des_Decrypt(unsigned char *binput, unsigned char *boutput, unsigned char *bkey)
{
    32c2:	ef 92       	push	r14
    32c4:	ff 92       	push	r15
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	18 2f       	mov	r17, r24
    32d0:	09 2f       	mov	r16, r25
    32d2:	f6 2e       	mov	r15, r22
    32d4:	e7 2e       	mov	r14, r23
    32d6:	ea 01       	movw	r28, r20
 	memcpy(Des_Key,&bkey[0],8);
    32d8:	af ef       	ldi	r26, 0xFF	; 255
    32da:	b4 e0       	ldi	r27, 0x04	; 4
    32dc:	fa 01       	movw	r30, r20
    32de:	88 e0       	ldi	r24, 0x08	; 8
    32e0:	01 90       	ld	r0, Z+
    32e2:	0d 92       	st	X+, r0
    32e4:	81 50       	subi	r24, 0x01	; 1
    32e6:	e1 f7       	brne	.-8      	; 0x32e0 <Triple_Des_Decrypt+0x1e>
	DesKeyScheduleCalculation();
    32e8:	0e 94 8b 2a 	call	0x5516	; 0x5516 <DesKeyScheduleCalculation>
	memcpy(Des_Input,binput,8);
    32ec:	a7 ef       	ldi	r26, 0xF7	; 247
    32ee:	b4 e0       	ldi	r27, 0x04	; 4
    32f0:	81 2f       	mov	r24, r17
    32f2:	90 2f       	mov	r25, r16
    32f4:	9c 01       	movw	r18, r24
    32f6:	f9 01       	movw	r30, r18
    32f8:	88 e0       	ldi	r24, 0x08	; 8
    32fa:	01 90       	ld	r0, Z+
    32fc:	0d 92       	st	X+, r0
    32fe:	81 50       	subi	r24, 0x01	; 1
    3300:	e1 f7       	brne	.-8      	; 0x32fa <Triple_Des_Decrypt+0x38>
	Des_Dec();
    3302:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <Des_Dec>
 	memcpy(Des_Key,&bkey[8],8);
    3306:	af ef       	ldi	r26, 0xFF	; 255
    3308:	b4 e0       	ldi	r27, 0x04	; 4
    330a:	fe 01       	movw	r30, r28
    330c:	38 96       	adiw	r30, 0x08	; 8
    330e:	88 e0       	ldi	r24, 0x08	; 8
    3310:	01 90       	ld	r0, Z+
    3312:	0d 92       	st	X+, r0
    3314:	81 50       	subi	r24, 0x01	; 1
    3316:	e1 f7       	brne	.-8      	; 0x3310 <Triple_Des_Decrypt+0x4e>
	DesKeyScheduleCalculation();
    3318:	0e 94 8b 2a 	call	0x5516	; 0x5516 <DesKeyScheduleCalculation>
	Des_Enc();
    331c:	0e 94 07 2b 	call	0x560e	; 0x560e <Des_Enc>
 	memcpy(Des_Key,&bkey[0],8);
    3320:	af ef       	ldi	r26, 0xFF	; 255
    3322:	b4 e0       	ldi	r27, 0x04	; 4
    3324:	fe 01       	movw	r30, r28
    3326:	88 e0       	ldi	r24, 0x08	; 8
    3328:	01 90       	ld	r0, Z+
    332a:	0d 92       	st	X+, r0
    332c:	81 50       	subi	r24, 0x01	; 1
    332e:	e1 f7       	brne	.-8      	; 0x3328 <Triple_Des_Decrypt+0x66>
	DesKeyScheduleCalculation();
    3330:	0e 94 8b 2a 	call	0x5516	; 0x5516 <DesKeyScheduleCalculation>
	Des_Dec();
    3334:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <Des_Dec>
	memcpy(boutput,Des_Input,8);
    3338:	8f 2d       	mov	r24, r15
    333a:	9e 2d       	mov	r25, r14
    333c:	9c 01       	movw	r18, r24
    333e:	d9 01       	movw	r26, r18
    3340:	e7 ef       	ldi	r30, 0xF7	; 247
    3342:	f4 e0       	ldi	r31, 0x04	; 4
    3344:	88 e0       	ldi	r24, 0x08	; 8
    3346:	01 90       	ld	r0, Z+
    3348:	0d 92       	st	X+, r0
    334a:	81 50       	subi	r24, 0x01	; 1
    334c:	e1 f7       	brne	.-8      	; 0x3346 <Triple_Des_Decrypt+0x84>

//unsigned char temp[8];
//des_decrypt (binput,temp,&bkey[0]);
//des_encrypt (temp,temp,&bkey[8]);
//des_decrypt (temp,boutput,&bkey[0]);
}
    334e:	df 91       	pop	r29
    3350:	cf 91       	pop	r28
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	ff 90       	pop	r15
    3358:	ef 90       	pop	r14
    335a:	08 95       	ret

0000335c <Triple_Des_Encrypt>:
/*----------------------------------------------------------------
  Triple D E S 
  By Emile van der Laan
-----------------------------------------------------------------*/
void Triple_Des_Encrypt(unsigned char *binput, unsigned char *boutput, unsigned char *bkey)
{
    335c:	ef 92       	push	r14
    335e:	ff 92       	push	r15
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	18 2f       	mov	r17, r24
    336a:	09 2f       	mov	r16, r25
    336c:	f6 2e       	mov	r15, r22
    336e:	e7 2e       	mov	r14, r23
    3370:	ea 01       	movw	r28, r20
 	memcpy(Des_Key,&bkey[0],8);
    3372:	af ef       	ldi	r26, 0xFF	; 255
    3374:	b4 e0       	ldi	r27, 0x04	; 4
    3376:	fa 01       	movw	r30, r20
    3378:	88 e0       	ldi	r24, 0x08	; 8
    337a:	01 90       	ld	r0, Z+
    337c:	0d 92       	st	X+, r0
    337e:	81 50       	subi	r24, 0x01	; 1
    3380:	e1 f7       	brne	.-8      	; 0x337a <Triple_Des_Encrypt+0x1e>
	DesKeyScheduleCalculation();
    3382:	0e 94 8b 2a 	call	0x5516	; 0x5516 <DesKeyScheduleCalculation>
	memcpy(Des_Input,binput,8);
    3386:	a7 ef       	ldi	r26, 0xF7	; 247
    3388:	b4 e0       	ldi	r27, 0x04	; 4
    338a:	81 2f       	mov	r24, r17
    338c:	90 2f       	mov	r25, r16
    338e:	9c 01       	movw	r18, r24
    3390:	f9 01       	movw	r30, r18
    3392:	88 e0       	ldi	r24, 0x08	; 8
    3394:	01 90       	ld	r0, Z+
    3396:	0d 92       	st	X+, r0
    3398:	81 50       	subi	r24, 0x01	; 1
    339a:	e1 f7       	brne	.-8      	; 0x3394 <Triple_Des_Encrypt+0x38>
	Des_Enc();
    339c:	0e 94 07 2b 	call	0x560e	; 0x560e <Des_Enc>
 	memcpy(Des_Key,&bkey[8],8);
    33a0:	af ef       	ldi	r26, 0xFF	; 255
    33a2:	b4 e0       	ldi	r27, 0x04	; 4
    33a4:	fe 01       	movw	r30, r28
    33a6:	38 96       	adiw	r30, 0x08	; 8
    33a8:	88 e0       	ldi	r24, 0x08	; 8
    33aa:	01 90       	ld	r0, Z+
    33ac:	0d 92       	st	X+, r0
    33ae:	81 50       	subi	r24, 0x01	; 1
    33b0:	e1 f7       	brne	.-8      	; 0x33aa <Triple_Des_Encrypt+0x4e>
	DesKeyScheduleCalculation();
    33b2:	0e 94 8b 2a 	call	0x5516	; 0x5516 <DesKeyScheduleCalculation>
	Des_Dec();
    33b6:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <Des_Dec>
 	memcpy(Des_Key,&bkey[0],8);
    33ba:	af ef       	ldi	r26, 0xFF	; 255
    33bc:	b4 e0       	ldi	r27, 0x04	; 4
    33be:	fe 01       	movw	r30, r28
    33c0:	88 e0       	ldi	r24, 0x08	; 8
    33c2:	01 90       	ld	r0, Z+
    33c4:	0d 92       	st	X+, r0
    33c6:	81 50       	subi	r24, 0x01	; 1
    33c8:	e1 f7       	brne	.-8      	; 0x33c2 <Triple_Des_Encrypt+0x66>
	DesKeyScheduleCalculation();
    33ca:	0e 94 8b 2a 	call	0x5516	; 0x5516 <DesKeyScheduleCalculation>
	Des_Enc();
    33ce:	0e 94 07 2b 	call	0x560e	; 0x560e <Des_Enc>
	memcpy(boutput,Des_Input,8);
    33d2:	8f 2d       	mov	r24, r15
    33d4:	9e 2d       	mov	r25, r14
    33d6:	9c 01       	movw	r18, r24
    33d8:	d9 01       	movw	r26, r18
    33da:	e7 ef       	ldi	r30, 0xF7	; 247
    33dc:	f4 e0       	ldi	r31, 0x04	; 4
    33de:	88 e0       	ldi	r24, 0x08	; 8
    33e0:	01 90       	ld	r0, Z+
    33e2:	0d 92       	st	X+, r0
    33e4:	81 50       	subi	r24, 0x01	; 1
    33e6:	e1 f7       	brne	.-8      	; 0x33e0 <Triple_Des_Encrypt+0x84>

//unsigned char temp[8];
//des_encrypt	(binput,temp,&bkey[0]);
//des_decrypt	(temp,temp,&bkey[8]);
//des_encrypt	(temp,boutput,&bkey[0]);
}
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	ff 90       	pop	r15
    33f2:	ef 90       	pop	r14
    33f4:	08 95       	ret

000033f6 <SHA_Reverse_Bytes>:
    33f6:	ec ea       	ldi	r30, 0xAC	; 172
    33f8:	f3 e0       	ldi	r31, 0x03	; 3
    33fa:	80 e1       	ldi	r24, 0x10	; 16

000033fc <Reverse_Next_Bytes>:
    33fc:	90 81       	ld	r25, Z
    33fe:	a3 81       	ldd	r26, Z+3	; 0x03
    3400:	a0 83       	st	Z, r26
    3402:	93 83       	std	Z+3, r25	; 0x03
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	a2 81       	ldd	r26, Z+2	; 0x02
    3408:	a1 83       	std	Z+1, r26	; 0x01
    340a:	92 83       	std	Z+2, r25	; 0x02
    340c:	34 96       	adiw	r30, 0x04	; 4
    340e:	8a 95       	dec	r24
    3410:	a9 f7       	brne	.-22     	; 0x33fc <Reverse_Next_Bytes>
    3412:	08 95       	ret

00003414 <Sha_Init>:
    3414:	44 e1       	ldi	r20, 0x14	; 20
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	6a ec       	ldi	r22, 0xCA	; 202
    341a:	7a e0       	ldi	r23, 0x0A	; 10
    341c:	8c ee       	ldi	r24, 0xEC	; 236
    341e:	93 e0       	ldi	r25, 0x03	; 3
    3420:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
    3424:	4a e0       	ldi	r20, 0x0A	; 10
    3426:	50 e0       	ldi	r21, 0x00	; 0
    3428:	60 e0       	ldi	r22, 0x00	; 0
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	94 e0       	ldi	r25, 0x04	; 4
    3430:	0e 94 8a 2c 	call	0x5914	; 0x5914 <memset>
    3434:	08 95       	ret

00003436 <Sha_Final>:
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	2a 97       	sbiw	r28, 0x0a	; 10
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	e0 e0       	ldi	r30, 0x00	; 0
    344c:	f4 e0       	ldi	r31, 0x04	; 4
    344e:	84 81       	ldd	r24, Z+4	; 0x04
    3450:	95 81       	ldd	r25, Z+5	; 0x05
    3452:	a6 81       	ldd	r26, Z+6	; 0x06
    3454:	b7 81       	ldd	r27, Z+7	; 0x07
    3456:	8f 83       	std	Y+7, r24	; 0x07
    3458:	98 87       	std	Y+8, r25	; 0x08
    345a:	a9 87       	std	Y+9, r26	; 0x09
    345c:	ba 87       	std	Y+10, r27	; 0x0a
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	a2 81       	ldd	r26, Z+2	; 0x02
    3464:	b3 81       	ldd	r27, Z+3	; 0x03
    3466:	8b 83       	std	Y+3, r24	; 0x03
    3468:	9c 83       	std	Y+4, r25	; 0x04
    346a:	ad 83       	std	Y+5, r26	; 0x05
    346c:	be 83       	std	Y+6, r27	; 0x06
    346e:	96 95       	lsr	r25
    3470:	87 95       	ror	r24
    3472:	86 95       	lsr	r24
    3474:	86 95       	lsr	r24
    3476:	8f 73       	andi	r24, 0x3F	; 63
    3478:	1a 82       	std	Y+2, r1	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	29 81       	ldd	r18, Y+1	; 0x01
    347e:	3a 81       	ldd	r19, Y+2	; 0x02
    3480:	d9 01       	movw	r26, r18
    3482:	2f 5f       	subi	r18, 0xFF	; 255
    3484:	3f 4f       	sbci	r19, 0xFF	; 255
    3486:	3a 83       	std	Y+2, r19	; 0x02
    3488:	29 83       	std	Y+1, r18	; 0x01
    348a:	a4 55       	subi	r26, 0x54	; 84
    348c:	bc 4f       	sbci	r27, 0xFC	; 252
    348e:	80 e8       	ldi	r24, 0x80	; 128
    3490:	8c 93       	st	X, r24
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	9a 81       	ldd	r25, Y+2	; 0x02
    3496:	89 33       	cpi	r24, 0x39	; 57
    3498:	91 05       	cpc	r25, r1
    349a:	e4 f0       	brlt	.+56     	; 0x34d4 <Sha_Final2>
    349c:	20 e4       	ldi	r18, 0x40	; 64
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	9a 81       	ldd	r25, Y+2	; 0x02
    34a4:	28 1b       	sub	r18, r24
    34a6:	39 0b       	sbc	r19, r25
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	9a 81       	ldd	r25, Y+2	; 0x02
    34ac:	84 55       	subi	r24, 0x54	; 84
    34ae:	9c 4f       	sbci	r25, 0xFC	; 252
    34b0:	a9 01       	movw	r20, r18
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	0e 94 8a 2c 	call	0x5914	; 0x5914 <memset>
    34ba:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <SHA_Reverse_Bytes>
    34be:	0e 94 0a 1b 	call	0x3614	; 0x3614 <Sha_Transform>
    34c2:	48 e3       	ldi	r20, 0x38	; 56
    34c4:	50 e0       	ldi	r21, 0x00	; 0
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	8c ea       	ldi	r24, 0xAC	; 172
    34cc:	93 e0       	ldi	r25, 0x03	; 3
    34ce:	0e 94 8a 2c 	call	0x5914	; 0x5914 <memset>
    34d2:	0f c0       	rjmp	.+30     	; 0x34f2 <Sha_Final3>

000034d4 <Sha_Final2>:
    34d4:	28 e3       	ldi	r18, 0x38	; 56
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	28 1b       	sub	r18, r24
    34de:	39 0b       	sbc	r19, r25
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	9a 81       	ldd	r25, Y+2	; 0x02
    34e4:	84 55       	subi	r24, 0x54	; 84
    34e6:	9c 4f       	sbci	r25, 0xFC	; 252
    34e8:	a9 01       	movw	r20, r18
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	70 e0       	ldi	r23, 0x00	; 0
    34ee:	0e 94 8a 2c 	call	0x5914	; 0x5914 <memset>

000034f2 <Sha_Final3>:
    34f2:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <SHA_Reverse_Bytes>
    34f6:	e4 ee       	ldi	r30, 0xE4	; 228
    34f8:	f3 e0       	ldi	r31, 0x03	; 3
    34fa:	8f 81       	ldd	r24, Y+7	; 0x07
    34fc:	98 85       	ldd	r25, Y+8	; 0x08
    34fe:	a9 85       	ldd	r26, Y+9	; 0x09
    3500:	ba 85       	ldd	r27, Y+10	; 0x0a
    3502:	80 83       	st	Z, r24
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	a2 83       	std	Z+2, r26	; 0x02
    3508:	b3 83       	std	Z+3, r27	; 0x03
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	ad 81       	ldd	r26, Y+5	; 0x05
    3510:	be 81       	ldd	r27, Y+6	; 0x06
    3512:	84 83       	std	Z+4, r24	; 0x04
    3514:	95 83       	std	Z+5, r25	; 0x05
    3516:	a6 83       	std	Z+6, r26	; 0x06
    3518:	b7 83       	std	Z+7, r27	; 0x07
    351a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <Sha_Transform>
    351e:	2a 96       	adiw	r28, 0x0a	; 10
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	de bf       	out	0x3e, r29	; 62
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	cd bf       	out	0x3d, r28	; 61
    352a:	df 91       	pop	r29
    352c:	cf 91       	pop	r28
    352e:	08 95       	ret

00003530 <Sha_Function>:
    3530:	0f 93       	push	r16
    3532:	1f 93       	push	r17
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	cc e0       	ldi	r28, 0x0C	; 12
    353a:	d4 e0       	ldi	r29, 0x04	; 4
    353c:	28 81       	ld	r18, Y
    353e:	39 81       	ldd	r19, Y+1	; 0x01
    3540:	4a 81       	ldd	r20, Y+2	; 0x02
    3542:	5b 81       	ldd	r21, Y+3	; 0x03
    3544:	65 e0       	ldi	r22, 0x05	; 5

00003546 <Sha_Function1>:
    3546:	22 0f       	add	r18, r18
    3548:	33 1f       	adc	r19, r19
    354a:	44 1f       	adc	r20, r20
    354c:	55 1f       	adc	r21, r21
    354e:	21 1d       	adc	r18, r1
    3550:	6a 95       	dec	r22
    3552:	c9 f7       	brne	.-14     	; 0x3546 <Sha_Function1>
    3554:	88 89       	ldd	r24, Y+16	; 0x10
    3556:	99 89       	ldd	r25, Y+17	; 0x11
    3558:	aa 89       	ldd	r26, Y+18	; 0x12
    355a:	bb 89       	ldd	r27, Y+19	; 0x13
    355c:	28 0f       	add	r18, r24
    355e:	39 1f       	adc	r19, r25
    3560:	4a 1f       	adc	r20, r26
    3562:	5b 1f       	adc	r21, r27
    3564:	0a e0       	ldi	r16, 0x0A	; 10
    3566:	14 e0       	ldi	r17, 0x04	; 4
    3568:	f8 01       	movw	r30, r16
    356a:	61 91       	ld	r22, Z+
    356c:	71 91       	ld	r23, Z+
    356e:	fb 01       	movw	r30, r22
    3570:	81 91       	ld	r24, Z+
    3572:	91 91       	ld	r25, Z+
    3574:	a1 91       	ld	r26, Z+
    3576:	b1 91       	ld	r27, Z+
    3578:	28 0f       	add	r18, r24
    357a:	39 1f       	adc	r19, r25
    357c:	4a 1f       	adc	r20, r26
    357e:	5b 1f       	adc	r21, r27
    3580:	8c 89       	ldd	r24, Y+20	; 0x14
    3582:	9d 89       	ldd	r25, Y+21	; 0x15
    3584:	ae 89       	ldd	r26, Y+22	; 0x16
    3586:	bf 89       	ldd	r27, Y+23	; 0x17
    3588:	82 0f       	add	r24, r18
    358a:	93 1f       	adc	r25, r19
    358c:	a4 1f       	adc	r26, r20
    358e:	b5 1f       	adc	r27, r21
    3590:	6c 5f       	subi	r22, 0xFC	; 252
    3592:	7f 4f       	sbci	r23, 0xFF	; 255
    3594:	f8 01       	movw	r30, r16
    3596:	61 93       	st	Z+, r22
    3598:	71 93       	st	Z+, r23
    359a:	8c 8b       	std	Y+20, r24	; 0x14
    359c:	9d 8b       	std	Y+21, r25	; 0x15
    359e:	ae 8b       	std	Y+22, r26	; 0x16
    35a0:	bf 8b       	std	Y+23, r27	; 0x17
    35a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    35a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    35a6:	ae 85       	ldd	r26, Y+14	; 0x0e
    35a8:	bf 85       	ldd	r27, Y+15	; 0x0f
    35aa:	88 8b       	std	Y+16, r24	; 0x10
    35ac:	99 8b       	std	Y+17, r25	; 0x11
    35ae:	aa 8b       	std	Y+18, r26	; 0x12
    35b0:	bb 8b       	std	Y+19, r27	; 0x13
    35b2:	88 85       	ldd	r24, Y+8	; 0x08
    35b4:	99 85       	ldd	r25, Y+9	; 0x09
    35b6:	aa 85       	ldd	r26, Y+10	; 0x0a
    35b8:	bb 85       	ldd	r27, Y+11	; 0x0b
    35ba:	8c 87       	std	Y+12, r24	; 0x0c
    35bc:	9d 87       	std	Y+13, r25	; 0x0d
    35be:	ae 87       	std	Y+14, r26	; 0x0e
    35c0:	bf 87       	std	Y+15, r27	; 0x0f
    35c2:	8c 81       	ldd	r24, Y+4	; 0x04
    35c4:	9d 81       	ldd	r25, Y+5	; 0x05
    35c6:	ae 81       	ldd	r26, Y+6	; 0x06
    35c8:	bf 81       	ldd	r27, Y+7	; 0x07
    35ca:	71 2d       	mov	r23, r1
    35cc:	b6 95       	lsr	r27
    35ce:	a7 95       	ror	r26
    35d0:	97 95       	ror	r25
    35d2:	87 95       	ror	r24
    35d4:	77 95       	ror	r23
    35d6:	b6 95       	lsr	r27
    35d8:	a7 95       	ror	r26
    35da:	97 95       	ror	r25
    35dc:	87 95       	ror	r24
    35de:	77 95       	ror	r23
    35e0:	b7 2b       	or	r27, r23
    35e2:	88 87       	std	Y+8, r24	; 0x08
    35e4:	99 87       	std	Y+9, r25	; 0x09
    35e6:	aa 87       	std	Y+10, r26	; 0x0a
    35e8:	bb 87       	std	Y+11, r27	; 0x0b
    35ea:	88 81       	ld	r24, Y
    35ec:	99 81       	ldd	r25, Y+1	; 0x01
    35ee:	aa 81       	ldd	r26, Y+2	; 0x02
    35f0:	bb 81       	ldd	r27, Y+3	; 0x03
    35f2:	8c 83       	std	Y+4, r24	; 0x04
    35f4:	9d 83       	std	Y+5, r25	; 0x05
    35f6:	ae 83       	std	Y+6, r26	; 0x06
    35f8:	bf 83       	std	Y+7, r27	; 0x07
    35fa:	8c 89       	ldd	r24, Y+20	; 0x14
    35fc:	9d 89       	ldd	r25, Y+21	; 0x15
    35fe:	ae 89       	ldd	r26, Y+22	; 0x16
    3600:	bf 89       	ldd	r27, Y+23	; 0x17
    3602:	88 83       	st	Y, r24
    3604:	99 83       	std	Y+1, r25	; 0x01
    3606:	aa 83       	std	Y+2, r26	; 0x02
    3608:	bb 83       	std	Y+3, r27	; 0x03
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	1f 91       	pop	r17
    3610:	0f 91       	pop	r16
    3612:	08 95       	ret

00003614 <Sha_Transform>:
    3614:	0f 93       	push	r16
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	c2 54       	subi	r28, 0x42	; 66
    3620:	d1 40       	sbci	r29, 0x01	; 1
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	ce 01       	movw	r24, r28
    362e:	03 96       	adiw	r24, 0x03	; 3
    3630:	40 e4       	ldi	r20, 0x40	; 64
    3632:	50 e0       	ldi	r21, 0x00	; 0
    3634:	6c ea       	ldi	r22, 0xAC	; 172
    3636:	73 e0       	ldi	r23, 0x03	; 3
    3638:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    363c:	00 e1       	ldi	r16, 0x10	; 16
    363e:	fe 01       	movw	r30, r28
    3640:	33 96       	adiw	r30, 0x03	; 3

00003642 <Sha_Transform3>:
    3642:	20 81       	ld	r18, Z
    3644:	31 81       	ldd	r19, Z+1	; 0x01
    3646:	42 81       	ldd	r20, Z+2	; 0x02
    3648:	53 81       	ldd	r21, Z+3	; 0x03
    364a:	60 85       	ldd	r22, Z+8	; 0x08
    364c:	71 85       	ldd	r23, Z+9	; 0x09
    364e:	82 85       	ldd	r24, Z+10	; 0x0a
    3650:	93 85       	ldd	r25, Z+11	; 0x0b
    3652:	26 27       	eor	r18, r22
    3654:	37 27       	eor	r19, r23
    3656:	48 27       	eor	r20, r24
    3658:	59 27       	eor	r21, r25
    365a:	60 a1       	ldd	r22, Z+32	; 0x20
    365c:	71 a1       	ldd	r23, Z+33	; 0x21
    365e:	82 a1       	ldd	r24, Z+34	; 0x22
    3660:	93 a1       	ldd	r25, Z+35	; 0x23
    3662:	26 27       	eor	r18, r22
    3664:	37 27       	eor	r19, r23
    3666:	48 27       	eor	r20, r24
    3668:	59 27       	eor	r21, r25
    366a:	64 a9       	ldd	r22, Z+52	; 0x34
    366c:	75 a9       	ldd	r23, Z+53	; 0x35
    366e:	86 a9       	ldd	r24, Z+54	; 0x36
    3670:	97 a9       	ldd	r25, Z+55	; 0x37
    3672:	26 27       	eor	r18, r22
    3674:	37 27       	eor	r19, r23
    3676:	48 27       	eor	r20, r24
    3678:	59 27       	eor	r21, r25
    367a:	22 0f       	add	r18, r18
    367c:	33 1f       	adc	r19, r19
    367e:	44 1f       	adc	r20, r20
    3680:	55 1f       	adc	r21, r21
    3682:	21 1d       	adc	r18, r1
    3684:	34 96       	adiw	r30, 0x04	; 4
    3686:	24 af       	std	Z+60, r18	; 0x3c
    3688:	35 af       	std	Z+61, r19	; 0x3d
    368a:	46 af       	std	Z+62, r20	; 0x3e
    368c:	57 af       	std	Z+63, r21	; 0x3f
    368e:	03 95       	inc	r16
    3690:	00 35       	cpi	r16, 0x50	; 80
    3692:	b8 f2       	brcs	.-82     	; 0x3642 <Sha_Transform3>

00003694 <Sha_Transform2>:
    3694:	44 e1       	ldi	r20, 0x14	; 20
    3696:	50 e0       	ldi	r21, 0x00	; 0
    3698:	6c ee       	ldi	r22, 0xEC	; 236
    369a:	73 e0       	ldi	r23, 0x03	; 3
    369c:	8c e0       	ldi	r24, 0x0C	; 12
    369e:	94 e0       	ldi	r25, 0x04	; 4
    36a0:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    36a4:	ce 01       	movw	r24, r28
    36a6:	03 96       	adiw	r24, 0x03	; 3
    36a8:	90 93 0b 04 	sts	0x040B, r25
    36ac:	80 93 0a 04 	sts	0x040A, r24
    36b0:	ec e0       	ldi	r30, 0x0C	; 12
    36b2:	f4 e0       	ldi	r31, 0x04	; 4
    36b4:	00 e0       	ldi	r16, 0x00	; 0

000036b6 <Sha_Transform6>:
    36b6:	24 81       	ldd	r18, Z+4	; 0x04
    36b8:	35 81       	ldd	r19, Z+5	; 0x05
    36ba:	80 85       	ldd	r24, Z+8	; 0x08
    36bc:	91 85       	ldd	r25, Z+9	; 0x09
    36be:	d9 01       	movw	r26, r18
    36c0:	28 23       	and	r18, r24
    36c2:	39 23       	and	r19, r25
    36c4:	a0 95       	com	r26
    36c6:	b0 95       	com	r27
    36c8:	84 85       	ldd	r24, Z+12	; 0x0c
    36ca:	95 85       	ldd	r25, Z+13	; 0x0d
    36cc:	a8 23       	and	r26, r24
    36ce:	b9 23       	and	r27, r25
    36d0:	2a 2b       	or	r18, r26
    36d2:	3b 2b       	or	r19, r27
    36d4:	46 81       	ldd	r20, Z+6	; 0x06
    36d6:	57 81       	ldd	r21, Z+7	; 0x07
    36d8:	82 85       	ldd	r24, Z+10	; 0x0a
    36da:	93 85       	ldd	r25, Z+11	; 0x0b
    36dc:	da 01       	movw	r26, r20
    36de:	48 23       	and	r20, r24
    36e0:	59 23       	and	r21, r25
    36e2:	a0 95       	com	r26
    36e4:	b0 95       	com	r27
    36e6:	86 85       	ldd	r24, Z+14	; 0x0e
    36e8:	97 85       	ldd	r25, Z+15	; 0x0f
    36ea:	a8 23       	and	r26, r24
    36ec:	b9 23       	and	r27, r25
    36ee:	4a 2b       	or	r20, r26
    36f0:	5b 2b       	or	r21, r27
    36f2:	27 56       	subi	r18, 0x67	; 103
    36f4:	36 48       	sbci	r19, 0x86	; 134
    36f6:	4d 47       	sbci	r20, 0x7D	; 125
    36f8:	55 4a       	sbci	r21, 0xA5	; 165
    36fa:	24 8b       	std	Z+20, r18	; 0x14
    36fc:	35 8b       	std	Z+21, r19	; 0x15
    36fe:	46 8b       	std	Z+22, r20	; 0x16
    3700:	57 8b       	std	Z+23, r21	; 0x17
    3702:	0e 94 98 1a 	call	0x3530	; 0x3530 <Sha_Function>
    3706:	03 95       	inc	r16
    3708:	04 31       	cpi	r16, 0x14	; 20
    370a:	a8 f2       	brcs	.-86     	; 0x36b6 <Sha_Transform6>

0000370c <Sha_Transform5>:
    370c:	24 81       	ldd	r18, Z+4	; 0x04
    370e:	35 81       	ldd	r19, Z+5	; 0x05
    3710:	46 81       	ldd	r20, Z+6	; 0x06
    3712:	57 81       	ldd	r21, Z+7	; 0x07
    3714:	80 85       	ldd	r24, Z+8	; 0x08
    3716:	91 85       	ldd	r25, Z+9	; 0x09
    3718:	a2 85       	ldd	r26, Z+10	; 0x0a
    371a:	b3 85       	ldd	r27, Z+11	; 0x0b
    371c:	28 27       	eor	r18, r24
    371e:	39 27       	eor	r19, r25
    3720:	4a 27       	eor	r20, r26
    3722:	5b 27       	eor	r21, r27
    3724:	84 85       	ldd	r24, Z+12	; 0x0c
    3726:	95 85       	ldd	r25, Z+13	; 0x0d
    3728:	a6 85       	ldd	r26, Z+14	; 0x0e
    372a:	b7 85       	ldd	r27, Z+15	; 0x0f
    372c:	28 27       	eor	r18, r24
    372e:	39 27       	eor	r19, r25
    3730:	4a 27       	eor	r20, r26
    3732:	5b 27       	eor	r21, r27
    3734:	2f 55       	subi	r18, 0x5F	; 95
    3736:	34 41       	sbci	r19, 0x14	; 20
    3738:	46 42       	sbci	r20, 0x26	; 38
    373a:	51 49       	sbci	r21, 0x91	; 145
    373c:	24 8b       	std	Z+20, r18	; 0x14
    373e:	35 8b       	std	Z+21, r19	; 0x15
    3740:	46 8b       	std	Z+22, r20	; 0x16
    3742:	57 8b       	std	Z+23, r21	; 0x17
    3744:	0e 94 98 1a 	call	0x3530	; 0x3530 <Sha_Function>
    3748:	03 95       	inc	r16
    374a:	08 32       	cpi	r16, 0x28	; 40
    374c:	f8 f2       	brcs	.-66     	; 0x370c <Sha_Transform5>

0000374e <Sha_Transform7>:
    374e:	24 81       	ldd	r18, Z+4	; 0x04
    3750:	35 81       	ldd	r19, Z+5	; 0x05
    3752:	80 85       	ldd	r24, Z+8	; 0x08
    3754:	91 85       	ldd	r25, Z+9	; 0x09
    3756:	d9 01       	movw	r26, r18
    3758:	28 23       	and	r18, r24
    375a:	39 23       	and	r19, r25
    375c:	84 85       	ldd	r24, Z+12	; 0x0c
    375e:	95 85       	ldd	r25, Z+13	; 0x0d
    3760:	a8 23       	and	r26, r24
    3762:	b9 23       	and	r27, r25
    3764:	2a 2b       	or	r18, r26
    3766:	3b 2b       	or	r19, r27
    3768:	a0 85       	ldd	r26, Z+8	; 0x08
    376a:	b1 85       	ldd	r27, Z+9	; 0x09
    376c:	8a 23       	and	r24, r26
    376e:	9b 23       	and	r25, r27
    3770:	28 2b       	or	r18, r24
    3772:	39 2b       	or	r19, r25
    3774:	46 81       	ldd	r20, Z+6	; 0x06
    3776:	57 81       	ldd	r21, Z+7	; 0x07
    3778:	82 85       	ldd	r24, Z+10	; 0x0a
    377a:	93 85       	ldd	r25, Z+11	; 0x0b
    377c:	da 01       	movw	r26, r20
    377e:	48 23       	and	r20, r24
    3780:	59 23       	and	r21, r25
    3782:	86 85       	ldd	r24, Z+14	; 0x0e
    3784:	97 85       	ldd	r25, Z+15	; 0x0f
    3786:	a8 23       	and	r26, r24
    3788:	b9 23       	and	r27, r25
    378a:	4a 2b       	or	r20, r26
    378c:	5b 2b       	or	r21, r27
    378e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3790:	b3 85       	ldd	r27, Z+11	; 0x0b
    3792:	8a 23       	and	r24, r26
    3794:	9b 23       	and	r25, r27
    3796:	48 2b       	or	r20, r24
    3798:	59 2b       	or	r21, r25
    379a:	24 52       	subi	r18, 0x24	; 36
    379c:	33 44       	sbci	r19, 0x43	; 67
    379e:	44 4e       	sbci	r20, 0xE4	; 228
    37a0:	50 47       	sbci	r21, 0x70	; 112
    37a2:	24 8b       	std	Z+20, r18	; 0x14
    37a4:	35 8b       	std	Z+21, r19	; 0x15
    37a6:	46 8b       	std	Z+22, r20	; 0x16
    37a8:	57 8b       	std	Z+23, r21	; 0x17
    37aa:	0e 94 98 1a 	call	0x3530	; 0x3530 <Sha_Function>
    37ae:	03 95       	inc	r16
    37b0:	0c 33       	cpi	r16, 0x3C	; 60
    37b2:	68 f2       	brcs	.-102    	; 0x374e <Sha_Transform7>

000037b4 <Sha_Transform9>:
    37b4:	24 81       	ldd	r18, Z+4	; 0x04
    37b6:	35 81       	ldd	r19, Z+5	; 0x05
    37b8:	46 81       	ldd	r20, Z+6	; 0x06
    37ba:	57 81       	ldd	r21, Z+7	; 0x07
    37bc:	80 85       	ldd	r24, Z+8	; 0x08
    37be:	91 85       	ldd	r25, Z+9	; 0x09
    37c0:	a2 85       	ldd	r26, Z+10	; 0x0a
    37c2:	b3 85       	ldd	r27, Z+11	; 0x0b
    37c4:	28 27       	eor	r18, r24
    37c6:	39 27       	eor	r19, r25
    37c8:	4a 27       	eor	r20, r26
    37ca:	5b 27       	eor	r21, r27
    37cc:	84 85       	ldd	r24, Z+12	; 0x0c
    37ce:	95 85       	ldd	r25, Z+13	; 0x0d
    37d0:	a6 85       	ldd	r26, Z+14	; 0x0e
    37d2:	b7 85       	ldd	r27, Z+15	; 0x0f
    37d4:	28 27       	eor	r18, r24
    37d6:	39 27       	eor	r19, r25
    37d8:	4a 27       	eor	r20, r26
    37da:	5b 27       	eor	r21, r27
    37dc:	2a 52       	subi	r18, 0x2A	; 42
    37de:	3e 43       	sbci	r19, 0x3E	; 62
    37e0:	4d 49       	sbci	r20, 0x9D	; 157
    37e2:	55 43       	sbci	r21, 0x35	; 53
    37e4:	24 8b       	std	Z+20, r18	; 0x14
    37e6:	35 8b       	std	Z+21, r19	; 0x15
    37e8:	46 8b       	std	Z+22, r20	; 0x16
    37ea:	57 8b       	std	Z+23, r21	; 0x17
    37ec:	0e 94 98 1a 	call	0x3530	; 0x3530 <Sha_Function>
    37f0:	03 95       	inc	r16
    37f2:	00 35       	cpi	r16, 0x50	; 80
    37f4:	f8 f2       	brcs	.-66     	; 0x37b4 <Sha_Transform9>
    37f6:	ec ee       	ldi	r30, 0xEC	; 236
    37f8:	f3 e0       	ldi	r31, 0x03	; 3
    37fa:	ac e0       	ldi	r26, 0x0C	; 12
    37fc:	b4 e0       	ldi	r27, 0x04	; 4
    37fe:	00 e0       	ldi	r16, 0x00	; 0

00003800 <Sha_Transform12>:
    3800:	60 81       	ld	r22, Z
    3802:	71 81       	ldd	r23, Z+1	; 0x01
    3804:	82 81       	ldd	r24, Z+2	; 0x02
    3806:	93 81       	ldd	r25, Z+3	; 0x03
    3808:	2d 91       	ld	r18, X+
    380a:	3d 91       	ld	r19, X+
    380c:	4d 91       	ld	r20, X+
    380e:	5d 91       	ld	r21, X+
    3810:	62 0f       	add	r22, r18
    3812:	73 1f       	adc	r23, r19
    3814:	84 1f       	adc	r24, r20
    3816:	95 1f       	adc	r25, r21
    3818:	61 93       	st	Z+, r22
    381a:	71 93       	st	Z+, r23
    381c:	81 93       	st	Z+, r24
    381e:	91 93       	st	Z+, r25
    3820:	03 95       	inc	r16
    3822:	05 30       	cpi	r16, 0x05	; 5
    3824:	68 f3       	brcs	.-38     	; 0x3800 <Sha_Transform12>

00003826 <Sha_Transform14>:
    3826:	ce 5b       	subi	r28, 0xBE	; 190
    3828:	de 4f       	sbci	r29, 0xFE	; 254
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	0f 91       	pop	r16
    383a:	08 95       	ret

0000383c <Sha_Update>:
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
    3844:	26 97       	sbiw	r28, 0x06	; 6
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	7c 83       	std	Y+4, r23	; 0x04
    3856:	6b 83       	std	Y+3, r22	; 0x03
    3858:	9b 01       	movw	r18, r22
    385a:	aa 27       	eor	r26, r26
    385c:	bb 27       	eor	r27, r27
    385e:	ad 01       	movw	r20, r26
    3860:	68 94       	set
    3862:	12 f8       	bld	r1, 2

00003864 <Sha_Update1>:
    3864:	22 0f       	add	r18, r18
    3866:	33 1f       	adc	r19, r19
    3868:	44 1f       	adc	r20, r20
    386a:	55 1f       	adc	r21, r21
    386c:	16 94       	lsr	r1
    386e:	d1 f7       	brne	.-12     	; 0x3864 <Sha_Update1>
    3870:	80 91 00 04 	lds	r24, 0x0400
    3874:	90 91 01 04 	lds	r25, 0x0401
    3878:	a0 91 02 04 	lds	r26, 0x0402
    387c:	b0 91 03 04 	lds	r27, 0x0403
    3880:	28 0f       	add	r18, r24
    3882:	39 1f       	adc	r19, r25
    3884:	4a 1f       	adc	r20, r26
    3886:	5b 1f       	adc	r21, r27
    3888:	28 17       	cp	r18, r24
    388a:	39 07       	cpc	r19, r25
    388c:	4a 07       	cpc	r20, r26
    388e:	5b 07       	cpc	r21, r27
    3890:	98 f4       	brcc	.+38     	; 0x38b8 <Sha_Update2>
    3892:	80 91 15 04 	lds	r24, 0x0415
    3896:	90 91 16 04 	lds	r25, 0x0416
    389a:	a0 91 17 04 	lds	r26, 0x0417
    389e:	b0 91 18 04 	lds	r27, 0x0418
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	a1 1d       	adc	r26, r1
    38a6:	b1 1d       	adc	r27, r1
    38a8:	80 93 15 04 	sts	0x0415, r24
    38ac:	90 93 16 04 	sts	0x0416, r25
    38b0:	a0 93 17 04 	sts	0x0417, r26
    38b4:	b0 93 18 04 	sts	0x0418, r27

000038b8 <Sha_Update2>:
    38b8:	20 93 00 04 	sts	0x0400, r18
    38bc:	30 93 01 04 	sts	0x0401, r19
    38c0:	40 93 02 04 	sts	0x0402, r20
    38c4:	50 93 03 04 	sts	0x0403, r21
    38c8:	80 91 08 04 	lds	r24, 0x0408
    38cc:	90 91 09 04 	lds	r25, 0x0409
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	09 f4       	brne	.+2      	; 0x38d6 <Sha_Update5>
    38d4:	35 c0       	rjmp	.+106    	; 0x3940 <Sha_Update9>

000038d6 <Sha_Update5>:
    38d6:	40 e4       	ldi	r20, 0x40	; 64
    38d8:	50 e0       	ldi	r21, 0x00	; 0
    38da:	48 1b       	sub	r20, r24
    38dc:	59 0b       	sbc	r21, r25
    38de:	5e 83       	std	Y+6, r21	; 0x06
    38e0:	4d 83       	std	Y+5, r20	; 0x05
    38e2:	8b 81       	ldd	r24, Y+3	; 0x03
    38e4:	9c 81       	ldd	r25, Y+4	; 0x04
    38e6:	84 17       	cp	r24, r20
    38e8:	95 07       	cpc	r25, r21
    38ea:	1c f4       	brge	.+6      	; 0x38f2 <Sha_Update6>
    38ec:	9e 83       	std	Y+6, r25	; 0x06
    38ee:	8d 83       	std	Y+5, r24	; 0x05
    38f0:	ac 01       	movw	r20, r24

000038f2 <Sha_Update6>:
    38f2:	2b 81       	ldd	r18, Y+3	; 0x03
    38f4:	3c 81       	ldd	r19, Y+4	; 0x04
    38f6:	24 1b       	sub	r18, r20
    38f8:	35 0b       	sbc	r19, r21
    38fa:	3c 83       	std	Y+4, r19	; 0x04
    38fc:	2b 83       	std	Y+3, r18	; 0x03
    38fe:	69 81       	ldd	r22, Y+1	; 0x01
    3900:	7a 81       	ldd	r23, Y+2	; 0x02
    3902:	9b 01       	movw	r18, r22
    3904:	24 0f       	add	r18, r20
    3906:	35 1f       	adc	r19, r21
    3908:	3a 83       	std	Y+2, r19	; 0x02
    390a:	29 83       	std	Y+1, r18	; 0x01
    390c:	80 91 08 04 	lds	r24, 0x0408
    3910:	90 91 09 04 	lds	r25, 0x0409
    3914:	9c 01       	movw	r18, r24
    3916:	24 0f       	add	r18, r20
    3918:	35 1f       	adc	r19, r21
    391a:	30 93 09 04 	sts	0x0409, r19
    391e:	20 93 08 04 	sts	0x0408, r18
    3922:	84 55       	subi	r24, 0x54	; 84
    3924:	9c 4f       	sbci	r25, 0xFC	; 252
    3926:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    392a:	80 91 08 04 	lds	r24, 0x0408
    392e:	90 91 09 04 	lds	r25, 0x0409
    3932:	80 34       	cpi	r24, 0x40	; 64
    3934:	91 05       	cpc	r25, r1
    3936:	59 f5       	brne	.+86     	; 0x398e <Sha_Update7>
    3938:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <SHA_Reverse_Bytes>
    393c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <Sha_Transform>

00003940 <Sha_Update9>:
    3940:	4b 81       	ldd	r20, Y+3	; 0x03
    3942:	5c 81       	ldd	r21, Y+4	; 0x04
    3944:	40 34       	cpi	r20, 0x40	; 64
    3946:	51 05       	cpc	r21, r1
    3948:	c4 f0       	brlt	.+48     	; 0x397a <Sha_Update8>
    394a:	ca 01       	movw	r24, r20
    394c:	40 e4       	ldi	r20, 0x40	; 64
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	69 81       	ldd	r22, Y+1	; 0x01
    3952:	7a 81       	ldd	r23, Y+2	; 0x02
    3954:	9b 01       	movw	r18, r22
    3956:	24 0f       	add	r18, r20
    3958:	35 1f       	adc	r19, r21
    395a:	3a 83       	std	Y+2, r19	; 0x02
    395c:	29 83       	std	Y+1, r18	; 0x01
    395e:	9c 01       	movw	r18, r24
    3960:	24 1b       	sub	r18, r20
    3962:	35 0b       	sbc	r19, r21
    3964:	3c 83       	std	Y+4, r19	; 0x04
    3966:	2b 83       	std	Y+3, r18	; 0x03
    3968:	8c ea       	ldi	r24, 0xAC	; 172
    396a:	93 e0       	ldi	r25, 0x03	; 3
    396c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    3970:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <SHA_Reverse_Bytes>
    3974:	0e 94 0a 1b 	call	0x3614	; 0x3614 <Sha_Transform>
    3978:	e3 cf       	rjmp	.-58     	; 0x3940 <Sha_Update9>

0000397a <Sha_Update8>:
    397a:	69 81       	ldd	r22, Y+1	; 0x01
    397c:	7a 81       	ldd	r23, Y+2	; 0x02
    397e:	8c ea       	ldi	r24, 0xAC	; 172
    3980:	93 e0       	ldi	r25, 0x03	; 3
    3982:	50 93 09 04 	sts	0x0409, r21
    3986:	40 93 08 04 	sts	0x0408, r20
    398a:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>

0000398e <Sha_Update7>:
    398e:	26 96       	adiw	r28, 0x06	; 6
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	08 95       	ret

000039a0 <Sha_Update_P>:
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
    39a8:	26 97       	sbiw	r28, 0x06	; 6
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	de bf       	out	0x3e, r29	; 62
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	cd bf       	out	0x3d, r28	; 61
    39b4:	9a 83       	std	Y+2, r25	; 0x02
    39b6:	89 83       	std	Y+1, r24	; 0x01
    39b8:	7c 83       	std	Y+4, r23	; 0x04
    39ba:	6b 83       	std	Y+3, r22	; 0x03
    39bc:	44 27       	eor	r20, r20
    39be:	55 27       	eor	r21, r21
    39c0:	da 01       	movw	r26, r20
    39c2:	9b 01       	movw	r18, r22
    39c4:	68 94       	set
    39c6:	12 f8       	bld	r1, 2

000039c8 <Sha_Update1>:
    39c8:	22 0f       	add	r18, r18
    39ca:	33 1f       	adc	r19, r19
    39cc:	44 1f       	adc	r20, r20
    39ce:	55 1f       	adc	r21, r21
    39d0:	16 94       	lsr	r1
    39d2:	d1 f7       	brne	.-12     	; 0x39c8 <Sha_Update1>
    39d4:	80 91 00 04 	lds	r24, 0x0400
    39d8:	90 91 01 04 	lds	r25, 0x0401
    39dc:	a0 91 02 04 	lds	r26, 0x0402
    39e0:	b0 91 03 04 	lds	r27, 0x0403
    39e4:	28 0f       	add	r18, r24
    39e6:	39 1f       	adc	r19, r25
    39e8:	4a 1f       	adc	r20, r26
    39ea:	5b 1f       	adc	r21, r27
    39ec:	28 17       	cp	r18, r24
    39ee:	39 07       	cpc	r19, r25
    39f0:	4a 07       	cpc	r20, r26
    39f2:	5b 07       	cpc	r21, r27
    39f4:	98 f4       	brcc	.+38     	; 0x3a1c <Sha_Update2>
    39f6:	80 91 15 04 	lds	r24, 0x0415
    39fa:	90 91 16 04 	lds	r25, 0x0416
    39fe:	a0 91 17 04 	lds	r26, 0x0417
    3a02:	b0 91 18 04 	lds	r27, 0x0418
    3a06:	01 96       	adiw	r24, 0x01	; 1
    3a08:	a1 1d       	adc	r26, r1
    3a0a:	b1 1d       	adc	r27, r1
    3a0c:	80 93 15 04 	sts	0x0415, r24
    3a10:	90 93 16 04 	sts	0x0416, r25
    3a14:	a0 93 17 04 	sts	0x0417, r26
    3a18:	b0 93 18 04 	sts	0x0418, r27

00003a1c <Sha_Update2>:
    3a1c:	20 93 00 04 	sts	0x0400, r18
    3a20:	30 93 01 04 	sts	0x0401, r19
    3a24:	40 93 02 04 	sts	0x0402, r20
    3a28:	50 93 03 04 	sts	0x0403, r21
    3a2c:	80 91 08 04 	lds	r24, 0x0408
    3a30:	90 91 09 04 	lds	r25, 0x0409
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <Sha_Update5>
    3a38:	35 c0       	rjmp	.+106    	; 0x3aa4 <Sha_Update9>

00003a3a <Sha_Update5>:
    3a3a:	40 e4       	ldi	r20, 0x40	; 64
    3a3c:	50 e0       	ldi	r21, 0x00	; 0
    3a3e:	48 1b       	sub	r20, r24
    3a40:	59 0b       	sbc	r21, r25
    3a42:	5e 83       	std	Y+6, r21	; 0x06
    3a44:	4d 83       	std	Y+5, r20	; 0x05
    3a46:	8b 81       	ldd	r24, Y+3	; 0x03
    3a48:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4a:	84 17       	cp	r24, r20
    3a4c:	95 07       	cpc	r25, r21
    3a4e:	1c f4       	brge	.+6      	; 0x3a56 <Sha_Update6>
    3a50:	9e 83       	std	Y+6, r25	; 0x06
    3a52:	8d 83       	std	Y+5, r24	; 0x05
    3a54:	ac 01       	movw	r20, r24

00003a56 <Sha_Update6>:
    3a56:	2b 81       	ldd	r18, Y+3	; 0x03
    3a58:	3c 81       	ldd	r19, Y+4	; 0x04
    3a5a:	24 1b       	sub	r18, r20
    3a5c:	35 0b       	sbc	r19, r21
    3a5e:	3c 83       	std	Y+4, r19	; 0x04
    3a60:	2b 83       	std	Y+3, r18	; 0x03
    3a62:	69 81       	ldd	r22, Y+1	; 0x01
    3a64:	7a 81       	ldd	r23, Y+2	; 0x02
    3a66:	9b 01       	movw	r18, r22
    3a68:	24 0f       	add	r18, r20
    3a6a:	35 1f       	adc	r19, r21
    3a6c:	3a 83       	std	Y+2, r19	; 0x02
    3a6e:	29 83       	std	Y+1, r18	; 0x01
    3a70:	80 91 08 04 	lds	r24, 0x0408
    3a74:	90 91 09 04 	lds	r25, 0x0409
    3a78:	9c 01       	movw	r18, r24
    3a7a:	24 0f       	add	r18, r20
    3a7c:	35 1f       	adc	r19, r21
    3a7e:	30 93 09 04 	sts	0x0409, r19
    3a82:	20 93 08 04 	sts	0x0408, r18
    3a86:	84 55       	subi	r24, 0x54	; 84
    3a88:	9c 4f       	sbci	r25, 0xFC	; 252
    3a8a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
    3a8e:	80 91 08 04 	lds	r24, 0x0408
    3a92:	90 91 09 04 	lds	r25, 0x0409
    3a96:	80 34       	cpi	r24, 0x40	; 64
    3a98:	91 05       	cpc	r25, r1
    3a9a:	59 f5       	brne	.+86     	; 0x3af2 <Sha_Update7>
    3a9c:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <SHA_Reverse_Bytes>
    3aa0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <Sha_Transform>

00003aa4 <Sha_Update9>:
    3aa4:	4b 81       	ldd	r20, Y+3	; 0x03
    3aa6:	5c 81       	ldd	r21, Y+4	; 0x04
    3aa8:	40 34       	cpi	r20, 0x40	; 64
    3aaa:	51 05       	cpc	r21, r1
    3aac:	c4 f0       	brlt	.+48     	; 0x3ade <Sha_Update8>
    3aae:	ca 01       	movw	r24, r20
    3ab0:	40 e4       	ldi	r20, 0x40	; 64
    3ab2:	50 e0       	ldi	r21, 0x00	; 0
    3ab4:	69 81       	ldd	r22, Y+1	; 0x01
    3ab6:	7a 81       	ldd	r23, Y+2	; 0x02
    3ab8:	9b 01       	movw	r18, r22
    3aba:	24 0f       	add	r18, r20
    3abc:	35 1f       	adc	r19, r21
    3abe:	3a 83       	std	Y+2, r19	; 0x02
    3ac0:	29 83       	std	Y+1, r18	; 0x01
    3ac2:	9c 01       	movw	r18, r24
    3ac4:	24 1b       	sub	r18, r20
    3ac6:	35 0b       	sbc	r19, r21
    3ac8:	3c 83       	std	Y+4, r19	; 0x04
    3aca:	2b 83       	std	Y+3, r18	; 0x03
    3acc:	8c ea       	ldi	r24, 0xAC	; 172
    3ace:	93 e0       	ldi	r25, 0x03	; 3
    3ad0:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
    3ad4:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <SHA_Reverse_Bytes>
    3ad8:	0e 94 0a 1b 	call	0x3614	; 0x3614 <Sha_Transform>
    3adc:	e3 cf       	rjmp	.-58     	; 0x3aa4 <Sha_Update9>

00003ade <Sha_Update8>:
    3ade:	69 81       	ldd	r22, Y+1	; 0x01
    3ae0:	7a 81       	ldd	r23, Y+2	; 0x02
    3ae2:	8c ea       	ldi	r24, 0xAC	; 172
    3ae4:	93 e0       	ldi	r25, 0x03	; 3
    3ae6:	50 93 09 04 	sts	0x0409, r21
    3aea:	40 93 08 04 	sts	0x0408, r20
    3aee:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>

00003af2 <Sha_Update7>:
    3af2:	26 96       	adiw	r28, 0x06	; 6
    3af4:	0f b6       	in	r0, 0x3f	; 63
    3af6:	f8 94       	cli
    3af8:	de bf       	out	0x3e, r29	; 62
    3afa:	0f be       	out	0x3f, r0	; 63
    3afc:	cd bf       	out	0x3d, r28	; 61
    3afe:	df 91       	pop	r29
    3b00:	cf 91       	pop	r28
    3b02:	08 95       	ret

00003b04 <MD5Init>:
    3b04:	40 e1       	ldi	r20, 0x10	; 16
    3b06:	50 e0       	ldi	r21, 0x00	; 0
    3b08:	6e ed       	ldi	r22, 0xDE	; 222
    3b0a:	7a e0       	ldi	r23, 0x0A	; 10
    3b0c:	84 e2       	ldi	r24, 0x24	; 36
    3b0e:	94 e0       	ldi	r25, 0x04	; 4
    3b10:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
    3b14:	48 e0       	ldi	r20, 0x08	; 8
    3b16:	50 e0       	ldi	r21, 0x00	; 0
    3b18:	60 e0       	ldi	r22, 0x00	; 0
    3b1a:	84 e3       	ldi	r24, 0x34	; 52
    3b1c:	94 e0       	ldi	r25, 0x04	; 4
    3b1e:	0c 94 8a 2c 	jmp	0x5914	; 0x5914 <memset>

00003b22 <MD5Transform>:
    3b22:	40 e1       	ldi	r20, 0x10	; 16
    3b24:	50 e0       	ldi	r21, 0x00	; 0
    3b26:	64 e2       	ldi	r22, 0x24	; 36
    3b28:	74 e0       	ldi	r23, 0x04	; 4
    3b2a:	8c e7       	ldi	r24, 0x7C	; 124
    3b2c:	94 e0       	ldi	r25, 0x04	; 4
    3b2e:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    3b32:	10 92 94 04 	sts	0x0494, r1

00003b36 <MD5Tran18>:
    3b36:	80 91 94 04 	lds	r24, 0x0494
    3b3a:	80 34       	cpi	r24, 0x40	; 64
    3b3c:	08 f0       	brcs	.+2      	; 0x3b40 <MD5Tran1>
    3b3e:	3a c1       	rjmp	.+628    	; 0x3db4 <MD5Tran2>

00003b40 <MD5Tran1>:
    3b40:	10 91 94 04 	lds	r17, 0x0494
    3b44:	a0 e4       	ldi	r26, 0x40	; 64
    3b46:	b0 e0       	ldi	r27, 0x00	; 0
    3b48:	a1 1b       	sub	r26, r17
    3b4a:	a3 70       	andi	r26, 0x03	; 3
    3b4c:	aa 0f       	add	r26, r26
    3b4e:	aa 0f       	add	r26, r26
    3b50:	ac 5d       	subi	r26, 0xDC	; 220
    3b52:	bb 4f       	sbci	r27, 0xFB	; 251
    3b54:	b0 93 8d 04 	sts	0x048D, r27
    3b58:	a0 93 8c 04 	sts	0x048C, r26
    3b5c:	10 91 94 04 	lds	r17, 0x0494
    3b60:	a1 e4       	ldi	r26, 0x41	; 65
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	a1 1b       	sub	r26, r17
    3b66:	a3 70       	andi	r26, 0x03	; 3
    3b68:	aa 0f       	add	r26, r26
    3b6a:	aa 0f       	add	r26, r26
    3b6c:	ac 5d       	subi	r26, 0xDC	; 220
    3b6e:	bb 4f       	sbci	r27, 0xFB	; 251
    3b70:	b0 93 8f 04 	sts	0x048F, r27
    3b74:	a0 93 8e 04 	sts	0x048E, r26
    3b78:	10 91 94 04 	lds	r17, 0x0494
    3b7c:	a2 e4       	ldi	r26, 0x42	; 66
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	a1 1b       	sub	r26, r17
    3b82:	a3 70       	andi	r26, 0x03	; 3
    3b84:	aa 0f       	add	r26, r26
    3b86:	aa 0f       	add	r26, r26
    3b88:	ac 5d       	subi	r26, 0xDC	; 220
    3b8a:	bb 4f       	sbci	r27, 0xFB	; 251
    3b8c:	b0 93 91 04 	sts	0x0491, r27
    3b90:	a0 93 90 04 	sts	0x0490, r26
    3b94:	10 91 94 04 	lds	r17, 0x0494
    3b98:	a3 e4       	ldi	r26, 0x43	; 67
    3b9a:	b0 e0       	ldi	r27, 0x00	; 0
    3b9c:	a1 1b       	sub	r26, r17
    3b9e:	a3 70       	andi	r26, 0x03	; 3
    3ba0:	aa 0f       	add	r26, r26
    3ba2:	aa 0f       	add	r26, r26
    3ba4:	ac 5d       	subi	r26, 0xDC	; 220
    3ba6:	bb 4f       	sbci	r27, 0xFB	; 251
    3ba8:	b0 93 93 04 	sts	0x0493, r27
    3bac:	a0 93 92 04 	sts	0x0492, r26
    3bb0:	80 91 94 04 	lds	r24, 0x0494
    3bb4:	82 95       	swap	r24
    3bb6:	8f 70       	andi	r24, 0x0F	; 15
    3bb8:	31 f0       	breq	.+12     	; 0x3bc6 <MD5Tran10>
    3bba:	81 30       	cpi	r24, 0x01	; 1
    3bbc:	59 f1       	breq	.+86     	; 0x3c14 <MD5Tran8>
    3bbe:	82 30       	cpi	r24, 0x02	; 2
    3bc0:	09 f4       	brne	.+2      	; 0x3bc4 <MD5Tran7C>
    3bc2:	4f c0       	rjmp	.+158    	; 0x3c62 <MD5Tran12>

00003bc4 <MD5Tran7C>:
    3bc4:	6f c0       	rjmp	.+222    	; 0x3ca4 <MD5Tran15>

00003bc6 <MD5Tran10>:
    3bc6:	e0 91 92 04 	lds	r30, 0x0492
    3bca:	f0 91 93 04 	lds	r31, 0x0493
    3bce:	20 81       	ld	r18, Z
    3bd0:	31 81       	ldd	r19, Z+1	; 0x01
    3bd2:	42 81       	ldd	r20, Z+2	; 0x02
    3bd4:	53 81       	ldd	r21, Z+3	; 0x03
    3bd6:	b9 01       	movw	r22, r18
    3bd8:	ca 01       	movw	r24, r20
    3bda:	e0 91 90 04 	lds	r30, 0x0490
    3bde:	f0 91 91 04 	lds	r31, 0x0491
    3be2:	10 81       	ld	r17, Z
    3be4:	21 27       	eor	r18, r17
    3be6:	11 81       	ldd	r17, Z+1	; 0x01
    3be8:	31 27       	eor	r19, r17
    3bea:	12 81       	ldd	r17, Z+2	; 0x02
    3bec:	41 27       	eor	r20, r17
    3bee:	13 81       	ldd	r17, Z+3	; 0x03
    3bf0:	51 27       	eor	r21, r17
    3bf2:	e0 91 8e 04 	lds	r30, 0x048E
    3bf6:	f0 91 8f 04 	lds	r31, 0x048F
    3bfa:	10 81       	ld	r17, Z
    3bfc:	21 23       	and	r18, r17
    3bfe:	11 81       	ldd	r17, Z+1	; 0x01
    3c00:	31 23       	and	r19, r17
    3c02:	12 81       	ldd	r17, Z+2	; 0x02
    3c04:	41 23       	and	r20, r17
    3c06:	13 81       	ldd	r17, Z+3	; 0x03
    3c08:	51 23       	and	r21, r17
    3c0a:	26 27       	eor	r18, r22
    3c0c:	37 27       	eor	r19, r23
    3c0e:	48 27       	eor	r20, r24
    3c10:	59 27       	eor	r21, r25
    3c12:	6c c0       	rjmp	.+216    	; 0x3cec <MD5AddPtrWmd5InfoBuf>

00003c14 <MD5Tran8>:
    3c14:	e0 91 90 04 	lds	r30, 0x0490
    3c18:	f0 91 91 04 	lds	r31, 0x0491
    3c1c:	20 81       	ld	r18, Z
    3c1e:	31 81       	ldd	r19, Z+1	; 0x01
    3c20:	42 81       	ldd	r20, Z+2	; 0x02
    3c22:	53 81       	ldd	r21, Z+3	; 0x03
    3c24:	b9 01       	movw	r22, r18
    3c26:	ca 01       	movw	r24, r20
    3c28:	e0 91 8e 04 	lds	r30, 0x048E
    3c2c:	f0 91 8f 04 	lds	r31, 0x048F
    3c30:	10 81       	ld	r17, Z
    3c32:	21 27       	eor	r18, r17
    3c34:	11 81       	ldd	r17, Z+1	; 0x01
    3c36:	31 27       	eor	r19, r17
    3c38:	12 81       	ldd	r17, Z+2	; 0x02
    3c3a:	41 27       	eor	r20, r17
    3c3c:	13 81       	ldd	r17, Z+3	; 0x03
    3c3e:	51 27       	eor	r21, r17
    3c40:	e0 91 92 04 	lds	r30, 0x0492
    3c44:	f0 91 93 04 	lds	r31, 0x0493
    3c48:	10 81       	ld	r17, Z
    3c4a:	21 23       	and	r18, r17
    3c4c:	11 81       	ldd	r17, Z+1	; 0x01
    3c4e:	31 23       	and	r19, r17
    3c50:	12 81       	ldd	r17, Z+2	; 0x02
    3c52:	41 23       	and	r20, r17
    3c54:	13 81       	ldd	r17, Z+3	; 0x03
    3c56:	51 23       	and	r21, r17
    3c58:	26 27       	eor	r18, r22
    3c5a:	37 27       	eor	r19, r23
    3c5c:	48 27       	eor	r20, r24
    3c5e:	59 27       	eor	r21, r25
    3c60:	45 c0       	rjmp	.+138    	; 0x3cec <MD5AddPtrWmd5InfoBuf>

00003c62 <MD5Tran12>:
    3c62:	e0 91 92 04 	lds	r30, 0x0492
    3c66:	f0 91 93 04 	lds	r31, 0x0493
    3c6a:	20 81       	ld	r18, Z
    3c6c:	31 81       	ldd	r19, Z+1	; 0x01
    3c6e:	42 81       	ldd	r20, Z+2	; 0x02
    3c70:	53 81       	ldd	r21, Z+3	; 0x03
    3c72:	e0 91 90 04 	lds	r30, 0x0490
    3c76:	f0 91 91 04 	lds	r31, 0x0491
    3c7a:	10 81       	ld	r17, Z
    3c7c:	21 27       	eor	r18, r17
    3c7e:	11 81       	ldd	r17, Z+1	; 0x01
    3c80:	31 27       	eor	r19, r17
    3c82:	12 81       	ldd	r17, Z+2	; 0x02
    3c84:	41 27       	eor	r20, r17
    3c86:	13 81       	ldd	r17, Z+3	; 0x03
    3c88:	51 27       	eor	r21, r17
    3c8a:	e0 91 8e 04 	lds	r30, 0x048E
    3c8e:	f0 91 8f 04 	lds	r31, 0x048F
    3c92:	10 81       	ld	r17, Z
    3c94:	21 27       	eor	r18, r17
    3c96:	11 81       	ldd	r17, Z+1	; 0x01
    3c98:	31 27       	eor	r19, r17
    3c9a:	12 81       	ldd	r17, Z+2	; 0x02
    3c9c:	41 27       	eor	r20, r17
    3c9e:	13 81       	ldd	r17, Z+3	; 0x03
    3ca0:	51 27       	eor	r21, r17
    3ca2:	24 c0       	rjmp	.+72     	; 0x3cec <MD5AddPtrWmd5InfoBuf>

00003ca4 <MD5Tran15>:
    3ca4:	e0 91 92 04 	lds	r30, 0x0492
    3ca8:	f0 91 93 04 	lds	r31, 0x0493
    3cac:	20 81       	ld	r18, Z
    3cae:	31 81       	ldd	r19, Z+1	; 0x01
    3cb0:	42 81       	ldd	r20, Z+2	; 0x02
    3cb2:	53 81       	ldd	r21, Z+3	; 0x03
    3cb4:	20 95       	com	r18
    3cb6:	30 95       	com	r19
    3cb8:	40 95       	com	r20
    3cba:	50 95       	com	r21
    3cbc:	e0 91 8e 04 	lds	r30, 0x048E
    3cc0:	f0 91 8f 04 	lds	r31, 0x048F
    3cc4:	10 81       	ld	r17, Z
    3cc6:	21 2b       	or	r18, r17
    3cc8:	11 81       	ldd	r17, Z+1	; 0x01
    3cca:	31 2b       	or	r19, r17
    3ccc:	12 81       	ldd	r17, Z+2	; 0x02
    3cce:	41 2b       	or	r20, r17
    3cd0:	13 81       	ldd	r17, Z+3	; 0x03
    3cd2:	51 2b       	or	r21, r17
    3cd4:	e0 91 90 04 	lds	r30, 0x0490
    3cd8:	f0 91 91 04 	lds	r31, 0x0491
    3cdc:	10 81       	ld	r17, Z
    3cde:	21 27       	eor	r18, r17
    3ce0:	11 81       	ldd	r17, Z+1	; 0x01
    3ce2:	31 27       	eor	r19, r17
    3ce4:	12 81       	ldd	r17, Z+2	; 0x02
    3ce6:	41 27       	eor	r20, r17
    3ce8:	13 81       	ldd	r17, Z+3	; 0x03
    3cea:	51 27       	eor	r21, r17

00003cec <MD5AddPtrWmd5InfoBuf>:
    3cec:	e0 91 94 04 	lds	r30, 0x0494
    3cf0:	ff 27       	eor	r31, r31
    3cf2:	e2 5d       	subi	r30, 0xD2	; 210
    3cf4:	f3 4f       	sbci	r31, 0xF3	; 243
    3cf6:	14 91       	lpm	r17, Z+
    3cf8:	e1 2f       	mov	r30, r17
    3cfa:	ff 27       	eor	r31, r31
    3cfc:	ee 0f       	add	r30, r30
    3cfe:	ee 0f       	add	r30, r30
    3d00:	e4 5c       	subi	r30, 0xC4	; 196
    3d02:	fb 4f       	sbci	r31, 0xFB	; 251
    3d04:	10 81       	ld	r17, Z
    3d06:	21 0f       	add	r18, r17
    3d08:	11 81       	ldd	r17, Z+1	; 0x01
    3d0a:	31 1f       	adc	r19, r17
    3d0c:	12 81       	ldd	r17, Z+2	; 0x02
    3d0e:	41 1f       	adc	r20, r17
    3d10:	13 81       	ldd	r17, Z+3	; 0x03
    3d12:	51 1f       	adc	r21, r17
    3d14:	e0 91 94 04 	lds	r30, 0x0494
    3d18:	ff 27       	eor	r31, r31
    3d1a:	ee 0f       	add	r30, r30
    3d1c:	ee 0f       	add	r30, r30
    3d1e:	e2 51       	subi	r30, 0x12	; 18
    3d20:	f5 4f       	sbci	r31, 0xF5	; 245
    3d22:	15 91       	lpm	r17, Z+
    3d24:	21 0f       	add	r18, r17
    3d26:	15 91       	lpm	r17, Z+
    3d28:	31 1f       	adc	r19, r17
    3d2a:	15 91       	lpm	r17, Z+
    3d2c:	41 1f       	adc	r20, r17
    3d2e:	15 91       	lpm	r17, Z+
    3d30:	51 1f       	adc	r21, r17
    3d32:	e0 91 8c 04 	lds	r30, 0x048C
    3d36:	f0 91 8d 04 	lds	r31, 0x048D
    3d3a:	10 81       	ld	r17, Z
    3d3c:	21 0f       	add	r18, r17
    3d3e:	11 81       	ldd	r17, Z+1	; 0x01
    3d40:	31 1f       	adc	r19, r17
    3d42:	12 81       	ldd	r17, Z+2	; 0x02
    3d44:	41 1f       	adc	r20, r17
    3d46:	13 81       	ldd	r17, Z+3	; 0x03
    3d48:	51 1f       	adc	r21, r17
    3d4a:	ee ee       	ldi	r30, 0xEE	; 238
    3d4c:	fb e0       	ldi	r31, 0x0B	; 11
    3d4e:	80 91 94 04 	lds	r24, 0x0494
    3d52:	99 27       	eor	r25, r25
    3d54:	e8 0f       	add	r30, r24
    3d56:	f9 1f       	adc	r31, r25
    3d58:	14 91       	lpm	r17, Z+
    3d5a:	99 27       	eor	r25, r25

00003d5c <More8BitsLeft>:
    3d5c:	18 30       	cpi	r17, 0x08	; 8
    3d5e:	38 f0       	brcs	.+14     	; 0x3d6e <No8BitsLeft>
    3d60:	18 50       	subi	r17, 0x08	; 8
    3d62:	05 2f       	mov	r16, r21
    3d64:	54 2f       	mov	r21, r20
    3d66:	43 2f       	mov	r20, r19
    3d68:	32 2f       	mov	r19, r18
    3d6a:	20 2f       	mov	r18, r16
    3d6c:	f7 cf       	rjmp	.-18     	; 0x3d5c <More8BitsLeft>

00003d6e <No8BitsLeft>:
    3d6e:	11 23       	and	r17, r17
    3d70:	39 f0       	breq	.+14     	; 0x3d80 <StoreRol>
    3d72:	1a 95       	dec	r17
    3d74:	22 0f       	add	r18, r18
    3d76:	33 1f       	adc	r19, r19
    3d78:	44 1f       	adc	r20, r20
    3d7a:	55 1f       	adc	r21, r21
    3d7c:	29 1f       	adc	r18, r25
    3d7e:	f7 cf       	rjmp	.-18     	; 0x3d6e <No8BitsLeft>

00003d80 <StoreRol>:
    3d80:	a0 91 8e 04 	lds	r26, 0x048E
    3d84:	b0 91 8f 04 	lds	r27, 0x048F
    3d88:	1d 91       	ld	r17, X+
    3d8a:	21 0f       	add	r18, r17
    3d8c:	1d 91       	ld	r17, X+
    3d8e:	31 1f       	adc	r19, r17
    3d90:	1d 91       	ld	r17, X+
    3d92:	41 1f       	adc	r20, r17
    3d94:	1d 91       	ld	r17, X+
    3d96:	51 1f       	adc	r21, r17
    3d98:	e0 91 8c 04 	lds	r30, 0x048C
    3d9c:	f0 91 8d 04 	lds	r31, 0x048D
    3da0:	20 83       	st	Z, r18
    3da2:	31 83       	std	Z+1, r19	; 0x01
    3da4:	42 83       	std	Z+2, r20	; 0x02
    3da6:	53 83       	std	Z+3, r21	; 0x03
    3da8:	80 91 94 04 	lds	r24, 0x0494
    3dac:	8f 5f       	subi	r24, 0xFF	; 255
    3dae:	80 93 94 04 	sts	0x0494, r24
    3db2:	c1 ce       	rjmp	.-638    	; 0x3b36 <MD5Tran18>

00003db4 <MD5Tran2>:
    3db4:	10 92 94 04 	sts	0x0494, r1
    3db8:	a4 e2       	ldi	r26, 0x24	; 36
    3dba:	b4 e0       	ldi	r27, 0x04	; 4
    3dbc:	ec e7       	ldi	r30, 0x7C	; 124
    3dbe:	f4 e0       	ldi	r31, 0x04	; 4

00003dc0 <MD5Tran19B>:
    3dc0:	1c 91       	ld	r17, X
    3dc2:	21 91       	ld	r18, Z+
    3dc4:	12 0f       	add	r17, r18
    3dc6:	1d 93       	st	X+, r17
    3dc8:	1c 91       	ld	r17, X
    3dca:	21 91       	ld	r18, Z+
    3dcc:	12 1f       	adc	r17, r18
    3dce:	1d 93       	st	X+, r17
    3dd0:	1c 91       	ld	r17, X
    3dd2:	21 91       	ld	r18, Z+
    3dd4:	12 1f       	adc	r17, r18
    3dd6:	1d 93       	st	X+, r17
    3dd8:	1c 91       	ld	r17, X
    3dda:	21 91       	ld	r18, Z+
    3ddc:	12 1f       	adc	r17, r18
    3dde:	1d 93       	st	X+, r17
    3de0:	80 91 94 04 	lds	r24, 0x0494
    3de4:	8f 5f       	subi	r24, 0xFF	; 255
    3de6:	80 93 94 04 	sts	0x0494, r24
    3dea:	84 30       	cpi	r24, 0x04	; 4
    3dec:	48 f3       	brcs	.-46     	; 0x3dc0 <MD5Tran19B>

00003dee <MD5Tran17>:
    3dee:	08 95       	ret

00003df0 <MD5Final>:
    3df0:	0f 93       	push	r16
    3df2:	1f 93       	push	r17
    3df4:	e0 91 34 04 	lds	r30, 0x0434
    3df8:	f0 91 35 04 	lds	r31, 0x0435
    3dfc:	68 94       	set
    3dfe:	12 f8       	bld	r1, 2

00003e00 <MD5Final1>:
    3e00:	f6 95       	lsr	r31
    3e02:	e7 95       	ror	r30
    3e04:	16 94       	lsr	r1
    3e06:	e1 f7       	brne	.-8      	; 0x3e00 <MD5Final1>
    3e08:	ef 73       	andi	r30, 0x3F	; 63
    3e0a:	f0 70       	andi	r31, 0x00	; 0
    3e0c:	9f 01       	movw	r18, r30
    3e0e:	e4 5c       	subi	r30, 0xC4	; 196
    3e10:	fb 4f       	sbci	r31, 0xFB	; 251
    3e12:	80 e8       	ldi	r24, 0x80	; 128
    3e14:	81 93       	st	Z+, r24
    3e16:	8f 01       	movw	r16, r30
    3e18:	4f e3       	ldi	r20, 0x3F	; 63
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	c9 01       	movw	r24, r18
    3e1e:	48 1b       	sub	r20, r24
    3e20:	59 0b       	sbc	r21, r25
    3e22:	9a 01       	movw	r18, r20
    3e24:	48 30       	cpi	r20, 0x08	; 8
    3e26:	51 05       	cpc	r21, r1
    3e28:	70 f4       	brcc	.+28     	; 0x3e46 <MD5Final2>
    3e2a:	c8 01       	movw	r24, r16
    3e2c:	60 e0       	ldi	r22, 0x00	; 0
    3e2e:	70 e0       	ldi	r23, 0x00	; 0
    3e30:	0e 94 8a 2c 	call	0x5914	; 0x5914 <memset>
    3e34:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <MD5Transform>
    3e38:	48 e3       	ldi	r20, 0x38	; 56
    3e3a:	ac e3       	ldi	r26, 0x3C	; 60
    3e3c:	b4 e0       	ldi	r27, 0x04	; 4

00003e3e <MD5Final3>:
    3e3e:	1d 92       	st	X+, r1
    3e40:	4a 95       	dec	r20
    3e42:	e9 f7       	brne	.-6      	; 0x3e3e <MD5Final3>
    3e44:	07 c0       	rjmp	.+14     	; 0x3e54 <MD5Final4>

00003e46 <MD5Final2>:
    3e46:	48 50       	subi	r20, 0x08	; 8
    3e48:	50 40       	sbci	r21, 0x00	; 0
    3e4a:	c8 01       	movw	r24, r16
    3e4c:	60 e0       	ldi	r22, 0x00	; 0
    3e4e:	70 e0       	ldi	r23, 0x00	; 0
    3e50:	0e 94 8a 2c 	call	0x5914	; 0x5914 <memset>

00003e54 <MD5Final4>:
    3e54:	e4 e7       	ldi	r30, 0x74	; 116
    3e56:	f4 e0       	ldi	r31, 0x04	; 4
    3e58:	a4 e3       	ldi	r26, 0x34	; 52
    3e5a:	b4 e0       	ldi	r27, 0x04	; 4
    3e5c:	48 e0       	ldi	r20, 0x08	; 8

00003e5e <MD5Final4B>:
    3e5e:	5d 91       	ld	r21, X+
    3e60:	51 93       	st	Z+, r21
    3e62:	4a 95       	dec	r20
    3e64:	e1 f7       	brne	.-8      	; 0x3e5e <MD5Final4B>
    3e66:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <MD5Transform>
    3e6a:	1f 91       	pop	r17
    3e6c:	0f 91       	pop	r16
    3e6e:	08 95       	ret

00003e70 <MD5Update>:
    3e70:	0f 93       	push	r16
    3e72:	1f 93       	push	r17
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	2a 97       	sbiw	r28, 0x0a	; 10
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	7a 87       	std	Y+10, r23	; 0x0a
    3e8a:	69 87       	std	Y+9, r22	; 0x09
    3e8c:	98 87       	std	Y+8, r25	; 0x08
    3e8e:	8f 83       	std	Y+7, r24	; 0x07
    3e90:	20 91 34 04 	lds	r18, 0x0434
    3e94:	30 91 35 04 	lds	r19, 0x0435
    3e98:	40 91 36 04 	lds	r20, 0x0436
    3e9c:	50 91 37 04 	lds	r21, 0x0437
    3ea0:	89 85       	ldd	r24, Y+9	; 0x09
    3ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea4:	aa 27       	eor	r26, r26
    3ea6:	bb 27       	eor	r27, r27
    3ea8:	88 0f       	add	r24, r24
    3eaa:	99 1f       	adc	r25, r25
    3eac:	aa 1f       	adc	r26, r26
    3eae:	88 0f       	add	r24, r24
    3eb0:	99 1f       	adc	r25, r25
    3eb2:	aa 1f       	adc	r26, r26
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	aa 1f       	adc	r26, r26
    3eba:	82 0f       	add	r24, r18
    3ebc:	93 1f       	adc	r25, r19
    3ebe:	a4 1f       	adc	r26, r20
    3ec0:	b5 1f       	adc	r27, r21
    3ec2:	80 93 34 04 	sts	0x0434, r24
    3ec6:	90 93 35 04 	sts	0x0435, r25
    3eca:	a0 93 36 04 	sts	0x0436, r26
    3ece:	b0 93 37 04 	sts	0x0437, r27
    3ed2:	82 17       	cp	r24, r18
    3ed4:	93 07       	cpc	r25, r19
    3ed6:	a4 07       	cpc	r26, r20
    3ed8:	b5 07       	cpc	r27, r21
    3eda:	c9 01       	movw	r24, r18
    3edc:	a0 f4       	brcc	.+40     	; 0x3f06 <MD5UpdateA>
    3ede:	20 91 38 04 	lds	r18, 0x0438
    3ee2:	30 91 39 04 	lds	r19, 0x0439
    3ee6:	40 91 3a 04 	lds	r20, 0x043A
    3eea:	50 91 3b 04 	lds	r21, 0x043B
    3eee:	21 0d       	add	r18, r1
    3ef0:	31 1d       	adc	r19, r1
    3ef2:	41 1d       	adc	r20, r1
    3ef4:	51 1d       	adc	r21, r1
    3ef6:	20 93 38 04 	sts	0x0438, r18
    3efa:	30 93 39 04 	sts	0x0439, r19
    3efe:	40 93 3a 04 	sts	0x043A, r20
    3f02:	50 93 3b 04 	sts	0x043B, r21

00003f06 <MD5UpdateA>:
    3f06:	68 94       	set
    3f08:	12 f8       	bld	r1, 2

00003f0a <MD5UpdateL>:
    3f0a:	96 95       	lsr	r25
    3f0c:	87 95       	ror	r24
    3f0e:	17 94       	ror	r1
    3f10:	e1 f7       	brne	.-8      	; 0x3f0a <MD5UpdateL>
    3f12:	8f 73       	andi	r24, 0x3F	; 63
    3f14:	8b 83       	std	Y+3, r24	; 0x03
    3f16:	1c 82       	std	Y+4, r1	; 0x04
    3f18:	1d 82       	std	Y+5, r1	; 0x05
    3f1a:	1e 82       	std	Y+6, r1	; 0x06
    3f1c:	80 50       	subi	r24, 0x00	; 0
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <MD5UpdateB>
    3f20:	56 c0       	rjmp	.+172    	; 0x3fce <MD5UpdateC>

00003f22 <MD5UpdateB>:
    3f22:	8b 81       	ldd	r24, Y+3	; 0x03
    3f24:	9c 81       	ldd	r25, Y+4	; 0x04
    3f26:	84 5c       	subi	r24, 0xC4	; 196
    3f28:	9b 4f       	sbci	r25, 0xFB	; 251
    3f2a:	9a 83       	std	Y+2, r25	; 0x02
    3f2c:	89 83       	std	Y+1, r24	; 0x01
    3f2e:	20 e4       	ldi	r18, 0x40	; 64
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	40 e0       	ldi	r20, 0x00	; 0
    3f34:	50 e0       	ldi	r21, 0x00	; 0
    3f36:	8b 81       	ldd	r24, Y+3	; 0x03
    3f38:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f3c:	be 81       	ldd	r27, Y+6	; 0x06
    3f3e:	28 1b       	sub	r18, r24
    3f40:	39 0b       	sbc	r19, r25
    3f42:	4a 0b       	sbc	r20, r26
    3f44:	5b 0b       	sbc	r21, r27
    3f46:	2b 83       	std	Y+3, r18	; 0x03
    3f48:	3c 83       	std	Y+4, r19	; 0x04
    3f4a:	4d 83       	std	Y+5, r20	; 0x05
    3f4c:	5e 83       	std	Y+6, r21	; 0x06
    3f4e:	89 85       	ldd	r24, Y+9	; 0x09
    3f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f52:	aa 27       	eor	r26, r26
    3f54:	bb 27       	eor	r27, r27
    3f56:	82 17       	cp	r24, r18
    3f58:	93 07       	cpc	r25, r19
    3f5a:	a4 07       	cpc	r26, r20
    3f5c:	b5 07       	cpc	r27, r21
    3f5e:	ac 01       	movw	r20, r24
    3f60:	38 f4       	brcc	.+14     	; 0x3f70 <MD5UpdateE>
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	9a 81       	ldd	r25, Y+2	; 0x02
    3f66:	6f 81       	ldd	r22, Y+7	; 0x07
    3f68:	78 85       	ldd	r23, Y+8	; 0x08
    3f6a:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    3f6e:	3c c0       	rjmp	.+120    	; 0x3fe8 <MD5UpdateF>

00003f70 <MD5UpdateE>:
    3f70:	89 81       	ldd	r24, Y+1	; 0x01
    3f72:	9a 81       	ldd	r25, Y+2	; 0x02
    3f74:	6f 81       	ldd	r22, Y+7	; 0x07
    3f76:	78 85       	ldd	r23, Y+8	; 0x08
    3f78:	4b 81       	ldd	r20, Y+3	; 0x03
    3f7a:	5c 81       	ldd	r21, Y+4	; 0x04
    3f7c:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    3f80:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <MD5Transform>
    3f84:	2b 81       	ldd	r18, Y+3	; 0x03
    3f86:	3c 81       	ldd	r19, Y+4	; 0x04
    3f88:	8f 81       	ldd	r24, Y+7	; 0x07
    3f8a:	98 85       	ldd	r25, Y+8	; 0x08
    3f8c:	82 0f       	add	r24, r18
    3f8e:	93 1f       	adc	r25, r19
    3f90:	98 87       	std	Y+8, r25	; 0x08
    3f92:	8f 83       	std	Y+7, r24	; 0x07
    3f94:	89 85       	ldd	r24, Y+9	; 0x09
    3f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f98:	82 1b       	sub	r24, r18
    3f9a:	93 0b       	sbc	r25, r19
    3f9c:	9a 87       	std	Y+10, r25	; 0x0a
    3f9e:	89 87       	std	Y+9, r24	; 0x09
    3fa0:	16 c0       	rjmp	.+44     	; 0x3fce <MD5UpdateC>

00003fa2 <MD5UpdateD>:
    3fa2:	8c e3       	ldi	r24, 0x3C	; 60
    3fa4:	94 e0       	ldi	r25, 0x04	; 4
    3fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa8:	78 85       	ldd	r23, Y+8	; 0x08
    3faa:	40 e4       	ldi	r20, 0x40	; 64
    3fac:	50 e0       	ldi	r21, 0x00	; 0
    3fae:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>
    3fb2:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <MD5Transform>
    3fb6:	8f 81       	ldd	r24, Y+7	; 0x07
    3fb8:	98 85       	ldd	r25, Y+8	; 0x08
    3fba:	80 5c       	subi	r24, 0xC0	; 192
    3fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fbe:	98 87       	std	Y+8, r25	; 0x08
    3fc0:	8f 83       	std	Y+7, r24	; 0x07
    3fc2:	89 85       	ldd	r24, Y+9	; 0x09
    3fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc6:	80 54       	subi	r24, 0x40	; 64
    3fc8:	90 40       	sbci	r25, 0x00	; 0
    3fca:	9a 87       	std	Y+10, r25	; 0x0a
    3fcc:	89 87       	std	Y+9, r24	; 0x09

00003fce <MD5UpdateC>:
    3fce:	89 85       	ldd	r24, Y+9	; 0x09
    3fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd2:	80 34       	cpi	r24, 0x40	; 64
    3fd4:	91 05       	cpc	r25, r1
    3fd6:	28 f7       	brcc	.-54     	; 0x3fa2 <MD5UpdateD>
    3fd8:	8c e3       	ldi	r24, 0x3C	; 60
    3fda:	94 e0       	ldi	r25, 0x04	; 4
    3fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fde:	78 85       	ldd	r23, Y+8	; 0x08
    3fe0:	49 85       	ldd	r20, Y+9	; 0x09
    3fe2:	5a 85       	ldd	r21, Y+10	; 0x0a
    3fe4:	0e 94 81 2c 	call	0x5902	; 0x5902 <memcpy>

00003fe8 <MD5UpdateF>:
    3fe8:	2a 96       	adiw	r28, 0x0a	; 10
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    3ffa:	0f 91       	pop	r16
    3ffc:	08 95       	ret

00003ffe <MD5Update_P>:
    3ffe:	0f 93       	push	r16
    4000:	1f 93       	push	r17
    4002:	cf 93       	push	r28
    4004:	df 93       	push	r29
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	2a 97       	sbiw	r28, 0x0a	; 10
    400c:	0f b6       	in	r0, 0x3f	; 63
    400e:	f8 94       	cli
    4010:	de bf       	out	0x3e, r29	; 62
    4012:	0f be       	out	0x3f, r0	; 63
    4014:	cd bf       	out	0x3d, r28	; 61
    4016:	7a 87       	std	Y+10, r23	; 0x0a
    4018:	69 87       	std	Y+9, r22	; 0x09
    401a:	98 87       	std	Y+8, r25	; 0x08
    401c:	8f 83       	std	Y+7, r24	; 0x07
    401e:	20 91 34 04 	lds	r18, 0x0434
    4022:	30 91 35 04 	lds	r19, 0x0435
    4026:	40 91 36 04 	lds	r20, 0x0436
    402a:	50 91 37 04 	lds	r21, 0x0437
    402e:	89 85       	ldd	r24, Y+9	; 0x09
    4030:	9a 85       	ldd	r25, Y+10	; 0x0a
    4032:	aa 27       	eor	r26, r26
    4034:	bb 27       	eor	r27, r27
    4036:	88 0f       	add	r24, r24
    4038:	99 1f       	adc	r25, r25
    403a:	aa 1f       	adc	r26, r26
    403c:	88 0f       	add	r24, r24
    403e:	99 1f       	adc	r25, r25
    4040:	aa 1f       	adc	r26, r26
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	aa 1f       	adc	r26, r26
    4048:	82 0f       	add	r24, r18
    404a:	93 1f       	adc	r25, r19
    404c:	a4 1f       	adc	r26, r20
    404e:	b5 1f       	adc	r27, r21
    4050:	80 93 34 04 	sts	0x0434, r24
    4054:	90 93 35 04 	sts	0x0435, r25
    4058:	a0 93 36 04 	sts	0x0436, r26
    405c:	b0 93 37 04 	sts	0x0437, r27
    4060:	82 17       	cp	r24, r18
    4062:	93 07       	cpc	r25, r19
    4064:	a4 07       	cpc	r26, r20
    4066:	b5 07       	cpc	r27, r21
    4068:	c9 01       	movw	r24, r18
    406a:	a0 f4       	brcc	.+40     	; 0x4094 <MD5Update_PA>
    406c:	20 91 38 04 	lds	r18, 0x0438
    4070:	30 91 39 04 	lds	r19, 0x0439
    4074:	40 91 3a 04 	lds	r20, 0x043A
    4078:	50 91 3b 04 	lds	r21, 0x043B
    407c:	21 0d       	add	r18, r1
    407e:	31 1d       	adc	r19, r1
    4080:	41 1d       	adc	r20, r1
    4082:	51 1d       	adc	r21, r1
    4084:	20 93 38 04 	sts	0x0438, r18
    4088:	30 93 39 04 	sts	0x0439, r19
    408c:	40 93 3a 04 	sts	0x043A, r20
    4090:	50 93 3b 04 	sts	0x043B, r21

00004094 <MD5Update_PA>:
    4094:	68 94       	set
    4096:	12 f8       	bld	r1, 2

00004098 <MD5Update_PL>:
    4098:	96 95       	lsr	r25
    409a:	87 95       	ror	r24
    409c:	17 94       	ror	r1
    409e:	e1 f7       	brne	.-8      	; 0x4098 <MD5Update_PL>
    40a0:	8f 73       	andi	r24, 0x3F	; 63
    40a2:	8b 83       	std	Y+3, r24	; 0x03
    40a4:	1c 82       	std	Y+4, r1	; 0x04
    40a6:	1d 82       	std	Y+5, r1	; 0x05
    40a8:	1e 82       	std	Y+6, r1	; 0x06
    40aa:	80 50       	subi	r24, 0x00	; 0
    40ac:	09 f4       	brne	.+2      	; 0x40b0 <MD5Update_PB>
    40ae:	56 c0       	rjmp	.+172    	; 0x415c <MD5Update_PC>

000040b0 <MD5Update_PB>:
    40b0:	8b 81       	ldd	r24, Y+3	; 0x03
    40b2:	9c 81       	ldd	r25, Y+4	; 0x04
    40b4:	84 5c       	subi	r24, 0xC4	; 196
    40b6:	9b 4f       	sbci	r25, 0xFB	; 251
    40b8:	9a 83       	std	Y+2, r25	; 0x02
    40ba:	89 83       	std	Y+1, r24	; 0x01
    40bc:	20 e4       	ldi	r18, 0x40	; 64
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 e0       	ldi	r20, 0x00	; 0
    40c2:	50 e0       	ldi	r21, 0x00	; 0
    40c4:	8b 81       	ldd	r24, Y+3	; 0x03
    40c6:	9c 81       	ldd	r25, Y+4	; 0x04
    40c8:	ad 81       	ldd	r26, Y+5	; 0x05
    40ca:	be 81       	ldd	r27, Y+6	; 0x06
    40cc:	28 1b       	sub	r18, r24
    40ce:	39 0b       	sbc	r19, r25
    40d0:	4a 0b       	sbc	r20, r26
    40d2:	5b 0b       	sbc	r21, r27
    40d4:	2b 83       	std	Y+3, r18	; 0x03
    40d6:	3c 83       	std	Y+4, r19	; 0x04
    40d8:	4d 83       	std	Y+5, r20	; 0x05
    40da:	5e 83       	std	Y+6, r21	; 0x06
    40dc:	89 85       	ldd	r24, Y+9	; 0x09
    40de:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e0:	aa 27       	eor	r26, r26
    40e2:	bb 27       	eor	r27, r27
    40e4:	82 17       	cp	r24, r18
    40e6:	93 07       	cpc	r25, r19
    40e8:	a4 07       	cpc	r26, r20
    40ea:	b5 07       	cpc	r27, r21
    40ec:	ac 01       	movw	r20, r24
    40ee:	38 f4       	brcc	.+14     	; 0x40fe <MD5Update_PE>
    40f0:	89 81       	ldd	r24, Y+1	; 0x01
    40f2:	9a 81       	ldd	r25, Y+2	; 0x02
    40f4:	6f 81       	ldd	r22, Y+7	; 0x07
    40f6:	78 85       	ldd	r23, Y+8	; 0x08
    40f8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
    40fc:	3c c0       	rjmp	.+120    	; 0x4176 <MD5Update_PF>

000040fe <MD5Update_PE>:
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	9a 81       	ldd	r25, Y+2	; 0x02
    4102:	6f 81       	ldd	r22, Y+7	; 0x07
    4104:	78 85       	ldd	r23, Y+8	; 0x08
    4106:	4b 81       	ldd	r20, Y+3	; 0x03
    4108:	5c 81       	ldd	r21, Y+4	; 0x04
    410a:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
    410e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <MD5Transform>
    4112:	2b 81       	ldd	r18, Y+3	; 0x03
    4114:	3c 81       	ldd	r19, Y+4	; 0x04
    4116:	8f 81       	ldd	r24, Y+7	; 0x07
    4118:	98 85       	ldd	r25, Y+8	; 0x08
    411a:	82 0f       	add	r24, r18
    411c:	93 1f       	adc	r25, r19
    411e:	98 87       	std	Y+8, r25	; 0x08
    4120:	8f 83       	std	Y+7, r24	; 0x07
    4122:	89 85       	ldd	r24, Y+9	; 0x09
    4124:	9a 85       	ldd	r25, Y+10	; 0x0a
    4126:	82 1b       	sub	r24, r18
    4128:	93 0b       	sbc	r25, r19
    412a:	9a 87       	std	Y+10, r25	; 0x0a
    412c:	89 87       	std	Y+9, r24	; 0x09
    412e:	16 c0       	rjmp	.+44     	; 0x415c <MD5Update_PC>

00004130 <MD5Update_PD>:
    4130:	8c e3       	ldi	r24, 0x3C	; 60
    4132:	94 e0       	ldi	r25, 0x04	; 4
    4134:	6f 81       	ldd	r22, Y+7	; 0x07
    4136:	78 85       	ldd	r23, Y+8	; 0x08
    4138:	40 e4       	ldi	r20, 0x40	; 64
    413a:	50 e0       	ldi	r21, 0x00	; 0
    413c:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>
    4140:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <MD5Transform>
    4144:	8f 81       	ldd	r24, Y+7	; 0x07
    4146:	98 85       	ldd	r25, Y+8	; 0x08
    4148:	80 5c       	subi	r24, 0xC0	; 192
    414a:	9f 4f       	sbci	r25, 0xFF	; 255
    414c:	98 87       	std	Y+8, r25	; 0x08
    414e:	8f 83       	std	Y+7, r24	; 0x07
    4150:	89 85       	ldd	r24, Y+9	; 0x09
    4152:	9a 85       	ldd	r25, Y+10	; 0x0a
    4154:	80 54       	subi	r24, 0x40	; 64
    4156:	90 40       	sbci	r25, 0x00	; 0
    4158:	9a 87       	std	Y+10, r25	; 0x0a
    415a:	89 87       	std	Y+9, r24	; 0x09

0000415c <MD5Update_PC>:
    415c:	89 85       	ldd	r24, Y+9	; 0x09
    415e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4160:	80 34       	cpi	r24, 0x40	; 64
    4162:	91 05       	cpc	r25, r1
    4164:	28 f7       	brcc	.-54     	; 0x4130 <MD5Update_PD>
    4166:	8c e3       	ldi	r24, 0x3C	; 60
    4168:	94 e0       	ldi	r25, 0x04	; 4
    416a:	6f 81       	ldd	r22, Y+7	; 0x07
    416c:	78 85       	ldd	r23, Y+8	; 0x08
    416e:	49 85       	ldd	r20, Y+9	; 0x09
    4170:	5a 85       	ldd	r21, Y+10	; 0x0a
    4172:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <memcpy_P>

00004176 <MD5Update_PF>:
    4176:	2a 96       	adiw	r28, 0x0a	; 10
    4178:	0f b6       	in	r0, 0x3f	; 63
    417a:	f8 94       	cli
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	cd bf       	out	0x3d, r28	; 61
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	1f 91       	pop	r17
    4188:	0f 91       	pop	r16
    418a:	08 95       	ret

0000418c <skipjack_g>:
    418c:	66 0f       	add	r22, r22
    418e:	66 0f       	add	r22, r22

00004190 <skipjack_g1>:
    4190:	6a 30       	cpi	r22, 0x0A	; 10
    4192:	10 f0       	brcs	.+4      	; 0x4198 <skipjack_g2>
    4194:	6a 50       	subi	r22, 0x0A	; 10
    4196:	fc cf       	rjmp	.-8      	; 0x4190 <skipjack_g1>

00004198 <skipjack_g2>:
    4198:	fa 01       	movw	r30, r20
    419a:	e6 0f       	add	r30, r22
    419c:	f1 1d       	adc	r31, r1
    419e:	e0 81       	ld	r30, Z
    41a0:	e9 27       	eor	r30, r25
    41a2:	ff 27       	eor	r31, r31
    41a4:	e2 59       	subi	r30, 0x92	; 146
    41a6:	f3 4f       	sbci	r31, 0xF3	; 243
    41a8:	e4 91       	lpm	r30, Z+
    41aa:	8e 27       	eor	r24, r30
    41ac:	63 95       	inc	r22
    41ae:	6a 30       	cpi	r22, 0x0A	; 10
    41b0:	08 f0       	brcs	.+2      	; 0x41b4 <skipjack_g5>
    41b2:	6a 50       	subi	r22, 0x0A	; 10

000041b4 <skipjack_g5>:
    41b4:	fa 01       	movw	r30, r20
    41b6:	e6 0f       	add	r30, r22
    41b8:	f1 1d       	adc	r31, r1
    41ba:	e0 81       	ld	r30, Z
    41bc:	e8 27       	eor	r30, r24
    41be:	ff 27       	eor	r31, r31
    41c0:	e2 59       	subi	r30, 0x92	; 146
    41c2:	f3 4f       	sbci	r31, 0xF3	; 243
    41c4:	e4 91       	lpm	r30, Z+
    41c6:	9e 27       	eor	r25, r30
    41c8:	63 95       	inc	r22
    41ca:	6a 30       	cpi	r22, 0x0A	; 10
    41cc:	08 f0       	brcs	.+2      	; 0x41d0 <skipjack_g6>
    41ce:	6a 50       	subi	r22, 0x0A	; 10

000041d0 <skipjack_g6>:
    41d0:	fa 01       	movw	r30, r20
    41d2:	e6 0f       	add	r30, r22
    41d4:	f1 1d       	adc	r31, r1
    41d6:	e0 81       	ld	r30, Z
    41d8:	e9 27       	eor	r30, r25
    41da:	ff 27       	eor	r31, r31
    41dc:	e2 59       	subi	r30, 0x92	; 146
    41de:	f3 4f       	sbci	r31, 0xF3	; 243
    41e0:	e4 91       	lpm	r30, Z+
    41e2:	8e 27       	eor	r24, r30
    41e4:	63 95       	inc	r22
    41e6:	6a 30       	cpi	r22, 0x0A	; 10
    41e8:	08 f0       	brcs	.+2      	; 0x41ec <skipjack_g7>
    41ea:	6a 50       	subi	r22, 0x0A	; 10

000041ec <skipjack_g7>:
    41ec:	fa 01       	movw	r30, r20
    41ee:	e6 0f       	add	r30, r22
    41f0:	f1 1d       	adc	r31, r1
    41f2:	e0 81       	ld	r30, Z
    41f4:	e8 27       	eor	r30, r24
    41f6:	ff 27       	eor	r31, r31
    41f8:	e2 59       	subi	r30, 0x92	; 146
    41fa:	f3 4f       	sbci	r31, 0xF3	; 243
    41fc:	e4 91       	lpm	r30, Z+
    41fe:	9e 27       	eor	r25, r30
    4200:	08 95       	ret

00004202 <skipjack_a>:
    4202:	fc 01       	movw	r30, r24
    4204:	26 81       	ldd	r18, Z+6	; 0x06
    4206:	37 81       	ldd	r19, Z+7	; 0x07
    4208:	04 81       	ldd	r16, Z+4	; 0x04
    420a:	15 81       	ldd	r17, Z+5	; 0x05
    420c:	06 83       	std	Z+6, r16	; 0x06
    420e:	17 83       	std	Z+7, r17	; 0x07
    4210:	02 81       	ldd	r16, Z+2	; 0x02
    4212:	13 81       	ldd	r17, Z+3	; 0x03
    4214:	04 83       	std	Z+4, r16	; 0x04
    4216:	15 83       	std	Z+5, r17	; 0x05
    4218:	80 81       	ld	r24, Z
    421a:	91 81       	ldd	r25, Z+1	; 0x01
    421c:	ef 93       	push	r30
    421e:	ff 93       	push	r31
    4220:	6f 93       	push	r22
    4222:	6a 95       	dec	r22
    4224:	b3 df       	rcall	.-154    	; 0x418c <skipjack_g>
    4226:	6f 91       	pop	r22
    4228:	ff 91       	pop	r31
    422a:	ef 91       	pop	r30
    422c:	82 83       	std	Z+2, r24	; 0x02
    422e:	93 83       	std	Z+3, r25	; 0x03
    4230:	28 27       	eor	r18, r24
    4232:	39 27       	eor	r19, r25
    4234:	36 27       	eor	r19, r22
    4236:	20 83       	st	Z, r18
    4238:	31 83       	std	Z+1, r19	; 0x01
    423a:	08 95       	ret

0000423c <skipjack_b>:
    423c:	fc 01       	movw	r30, r24
    423e:	20 81       	ld	r18, Z
    4240:	31 81       	ldd	r19, Z+1	; 0x01
    4242:	06 81       	ldd	r16, Z+6	; 0x06
    4244:	17 81       	ldd	r17, Z+7	; 0x07
    4246:	00 83       	st	Z, r16
    4248:	11 83       	std	Z+1, r17	; 0x01
    424a:	04 81       	ldd	r16, Z+4	; 0x04
    424c:	15 81       	ldd	r17, Z+5	; 0x05
    424e:	06 83       	std	Z+6, r16	; 0x06
    4250:	17 83       	std	Z+7, r17	; 0x07
    4252:	02 81       	ldd	r16, Z+2	; 0x02
    4254:	13 81       	ldd	r17, Z+3	; 0x03
    4256:	16 27       	eor	r17, r22
    4258:	02 27       	eor	r16, r18
    425a:	13 27       	eor	r17, r19
    425c:	04 83       	std	Z+4, r16	; 0x04
    425e:	15 83       	std	Z+5, r17	; 0x05
    4260:	c9 01       	movw	r24, r18
    4262:	ef 93       	push	r30
    4264:	ff 93       	push	r31
    4266:	6a 95       	dec	r22
    4268:	91 df       	rcall	.-222    	; 0x418c <skipjack_g>
    426a:	ff 91       	pop	r31
    426c:	ef 91       	pop	r30
    426e:	82 83       	std	Z+2, r24	; 0x02
    4270:	93 83       	std	Z+3, r25	; 0x03
    4272:	08 95       	ret

00004274 <SkipJack_Enc>:
    4274:	1f 93       	push	r17
    4276:	0f 93       	push	r16
    4278:	ab 01       	movw	r20, r22
    427a:	66 27       	eor	r22, r22

0000427c <SkipJack_Enc1>:
    427c:	6f 93       	push	r22
    427e:	8f 93       	push	r24
    4280:	9f 93       	push	r25
    4282:	63 ff       	sbrs	r22, 3
    4284:	03 c0       	rjmp	.+6      	; 0x428c <SkipJack_Enc2>
    4286:	63 95       	inc	r22
    4288:	d9 df       	rcall	.-78     	; 0x423c <skipjack_b>
    428a:	02 c0       	rjmp	.+4      	; 0x4290 <SkipJack_Enc3>

0000428c <SkipJack_Enc2>:
    428c:	63 95       	inc	r22
    428e:	b9 df       	rcall	.-142    	; 0x4202 <skipjack_a>

00004290 <SkipJack_Enc3>:
    4290:	9f 91       	pop	r25
    4292:	8f 91       	pop	r24
    4294:	6f 91       	pop	r22
    4296:	63 95       	inc	r22
    4298:	60 32       	cpi	r22, 0x20	; 32
    429a:	80 f3       	brcs	.-32     	; 0x427c <SkipJack_Enc1>
    429c:	0f 91       	pop	r16
    429e:	1f 91       	pop	r17
    42a0:	08 95       	ret

000042a2 <skipjack_g_inv>:
    42a2:	66 0f       	add	r22, r22
    42a4:	66 0f       	add	r22, r22
    42a6:	6d 5f       	subi	r22, 0xFD	; 253

000042a8 <skipjack_g_inv1>:
    42a8:	6a 30       	cpi	r22, 0x0A	; 10
    42aa:	10 f0       	brcs	.+4      	; 0x42b0 <skipjack_g_inv2>
    42ac:	6a 50       	subi	r22, 0x0A	; 10
    42ae:	fc cf       	rjmp	.-8      	; 0x42a8 <skipjack_g_inv1>

000042b0 <skipjack_g_inv2>:
    42b0:	fa 01       	movw	r30, r20
    42b2:	e6 0f       	add	r30, r22
    42b4:	f1 1d       	adc	r31, r1
    42b6:	e0 81       	ld	r30, Z
    42b8:	e8 27       	eor	r30, r24
    42ba:	ff 27       	eor	r31, r31
    42bc:	e2 59       	subi	r30, 0x92	; 146
    42be:	f3 4f       	sbci	r31, 0xF3	; 243
    42c0:	e4 91       	lpm	r30, Z+
    42c2:	9e 27       	eor	r25, r30
    42c4:	66 23       	and	r22, r22
    42c6:	09 f4       	brne	.+2      	; 0x42ca <skipjack_g_inv5>
    42c8:	66 5f       	subi	r22, 0xF6	; 246

000042ca <skipjack_g_inv5>:
    42ca:	6a 95       	dec	r22
    42cc:	fa 01       	movw	r30, r20
    42ce:	e6 0f       	add	r30, r22
    42d0:	f1 1d       	adc	r31, r1
    42d2:	e0 81       	ld	r30, Z
    42d4:	e9 27       	eor	r30, r25
    42d6:	ff 27       	eor	r31, r31
    42d8:	e2 59       	subi	r30, 0x92	; 146
    42da:	f3 4f       	sbci	r31, 0xF3	; 243
    42dc:	e4 91       	lpm	r30, Z+
    42de:	8e 27       	eor	r24, r30
    42e0:	66 23       	and	r22, r22
    42e2:	09 f4       	brne	.+2      	; 0x42e6 <skipjack_g_inv6>
    42e4:	66 5f       	subi	r22, 0xF6	; 246

000042e6 <skipjack_g_inv6>:
    42e6:	6a 95       	dec	r22
    42e8:	fa 01       	movw	r30, r20
    42ea:	e6 0f       	add	r30, r22
    42ec:	f1 1d       	adc	r31, r1
    42ee:	e0 81       	ld	r30, Z
    42f0:	e8 27       	eor	r30, r24
    42f2:	ff 27       	eor	r31, r31
    42f4:	e2 59       	subi	r30, 0x92	; 146
    42f6:	f3 4f       	sbci	r31, 0xF3	; 243
    42f8:	e4 91       	lpm	r30, Z+
    42fa:	9e 27       	eor	r25, r30
    42fc:	66 23       	and	r22, r22
    42fe:	09 f4       	brne	.+2      	; 0x4302 <skipjack_g_inv7>
    4300:	66 5f       	subi	r22, 0xF6	; 246

00004302 <skipjack_g_inv7>:
    4302:	6a 95       	dec	r22
    4304:	fa 01       	movw	r30, r20
    4306:	e6 0f       	add	r30, r22
    4308:	f1 1d       	adc	r31, r1
    430a:	e0 81       	ld	r30, Z
    430c:	e9 27       	eor	r30, r25
    430e:	ff 27       	eor	r31, r31
    4310:	e2 59       	subi	r30, 0x92	; 146
    4312:	f3 4f       	sbci	r31, 0xF3	; 243
    4314:	e4 91       	lpm	r30, Z+
    4316:	8e 27       	eor	r24, r30
    4318:	08 95       	ret

0000431a <skipjack_a_inv>:
    431a:	fc 01       	movw	r30, r24
    431c:	20 81       	ld	r18, Z
    431e:	31 81       	ldd	r19, Z+1	; 0x01
    4320:	82 81       	ldd	r24, Z+2	; 0x02
    4322:	93 81       	ldd	r25, Z+3	; 0x03
    4324:	28 27       	eor	r18, r24
    4326:	39 27       	eor	r19, r25
    4328:	36 27       	eor	r19, r22
    432a:	ef 93       	push	r30
    432c:	ff 93       	push	r31
    432e:	6a 95       	dec	r22
    4330:	b8 df       	rcall	.-144    	; 0x42a2 <skipjack_g_inv>
    4332:	ff 91       	pop	r31
    4334:	ef 91       	pop	r30
    4336:	80 83       	st	Z, r24
    4338:	91 83       	std	Z+1, r25	; 0x01
    433a:	04 81       	ldd	r16, Z+4	; 0x04
    433c:	15 81       	ldd	r17, Z+5	; 0x05
    433e:	02 83       	std	Z+2, r16	; 0x02
    4340:	13 83       	std	Z+3, r17	; 0x03
    4342:	06 81       	ldd	r16, Z+6	; 0x06
    4344:	17 81       	ldd	r17, Z+7	; 0x07
    4346:	04 83       	std	Z+4, r16	; 0x04
    4348:	15 83       	std	Z+5, r17	; 0x05
    434a:	26 83       	std	Z+6, r18	; 0x06
    434c:	37 83       	std	Z+7, r19	; 0x07
    434e:	08 95       	ret

00004350 <skipjack_b_inv>:
    4350:	fc 01       	movw	r30, r24
    4352:	24 81       	ldd	r18, Z+4	; 0x04
    4354:	35 81       	ldd	r19, Z+5	; 0x05
    4356:	06 81       	ldd	r16, Z+6	; 0x06
    4358:	17 81       	ldd	r17, Z+7	; 0x07
    435a:	04 83       	std	Z+4, r16	; 0x04
    435c:	15 83       	std	Z+5, r17	; 0x05
    435e:	00 81       	ld	r16, Z
    4360:	11 81       	ldd	r17, Z+1	; 0x01
    4362:	06 83       	std	Z+6, r16	; 0x06
    4364:	17 83       	std	Z+7, r17	; 0x07
    4366:	36 27       	eor	r19, r22
    4368:	82 81       	ldd	r24, Z+2	; 0x02
    436a:	93 81       	ldd	r25, Z+3	; 0x03
    436c:	6a 95       	dec	r22
    436e:	ef 93       	push	r30
    4370:	ff 93       	push	r31
    4372:	97 df       	rcall	.-210    	; 0x42a2 <skipjack_g_inv>
    4374:	ff 91       	pop	r31
    4376:	ef 91       	pop	r30
    4378:	80 83       	st	Z, r24
    437a:	91 83       	std	Z+1, r25	; 0x01
    437c:	82 27       	eor	r24, r18
    437e:	93 27       	eor	r25, r19
    4380:	82 83       	std	Z+2, r24	; 0x02
    4382:	93 83       	std	Z+3, r25	; 0x03
    4384:	08 95       	ret

00004386 <SkipJack_Dec>:
    4386:	0f 93       	push	r16
    4388:	1f 93       	push	r17
    438a:	ab 01       	movw	r20, r22
    438c:	6f e1       	ldi	r22, 0x1F	; 31

0000438e <SkipJack_Dec1>:
    438e:	6f 93       	push	r22
    4390:	8f 93       	push	r24
    4392:	9f 93       	push	r25
    4394:	63 ff       	sbrs	r22, 3
    4396:	03 c0       	rjmp	.+6      	; 0x439e <SkipJack_Dec2>
    4398:	63 95       	inc	r22
    439a:	da df       	rcall	.-76     	; 0x4350 <skipjack_b_inv>
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <SkipJack_Dec3>

0000439e <SkipJack_Dec2>:
    439e:	63 95       	inc	r22
    43a0:	bc df       	rcall	.-136    	; 0x431a <skipjack_a_inv>

000043a2 <SkipJack_Dec3>:
    43a2:	9f 91       	pop	r25
    43a4:	8f 91       	pop	r24
    43a6:	6f 91       	pop	r22
    43a8:	61 50       	subi	r22, 0x01	; 1
    43aa:	88 f7       	brcc	.-30     	; 0x438e <SkipJack_Dec1>
    43ac:	1f 91       	pop	r17
    43ae:	0f 91       	pop	r16
    43b0:	08 95       	ret

000043b2 <AES_KeyExpansion>:
    43b2:	cf 93       	push	r28
    43b4:	df 93       	push	r29
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62
    43ba:	60 97       	sbiw	r28, 0x10	; 16
    43bc:	0f b6       	in	r0, 0x3f	; 63
    43be:	f8 94       	cli
    43c0:	de bf       	out	0x3e, r29	; 62
    43c2:	0f be       	out	0x3f, r0	; 63
    43c4:	cd bf       	out	0x3d, r28	; 61
    43c6:	a1 e0       	ldi	r26, 0x01	; 1
    43c8:	af 83       	std	Y+7, r26	; 0x07
    43ca:	18 86       	std	Y+8, r1	; 0x08
    43cc:	19 86       	std	Y+9, r1	; 0x09
    43ce:	1a 86       	std	Y+10, r1	; 0x0a
    43d0:	20 e1       	ldi	r18, 0x10	; 16
    43d2:	fb 01       	movw	r30, r22
    43d4:	dc 01       	movw	r26, r24

000043d6 <AES_KeyExpansion1>:
    43d6:	31 91       	ld	r19, Z+
    43d8:	3d 93       	st	X+, r19
    43da:	21 50       	subi	r18, 0x01	; 1
    43dc:	e1 f7       	brne	.-8      	; 0x43d6 <AES_KeyExpansion1>
    43de:	14 97       	sbiw	r26, 0x04	; 4
    43e0:	8d 91       	ld	r24, X+
    43e2:	8b 83       	std	Y+3, r24	; 0x03
    43e4:	8d 91       	ld	r24, X+
    43e6:	8c 83       	std	Y+4, r24	; 0x04
    43e8:	8d 91       	ld	r24, X+
    43ea:	8d 83       	std	Y+5, r24	; 0x05
    43ec:	8d 91       	ld	r24, X+
    43ee:	8e 83       	std	Y+6, r24	; 0x06
    43f0:	bc 87       	std	Y+12, r27	; 0x0c
    43f2:	ab 87       	std	Y+11, r26	; 0x0b
    43f4:	80 e1       	ldi	r24, 0x10	; 16
    43f6:	8a 83       	std	Y+2, r24	; 0x02
    43f8:	35 c0       	rjmp	.+106    	; 0x4464 <AES_KeyExpansion2>

000043fa <AES_KeyExpansion8>:
    43fa:	8f 70       	andi	r24, 0x0F	; 15
    43fc:	d9 f4       	brne	.+54     	; 0x4434 <AES_KeyExpansion3>

000043fe <AES_KeyExpansion8C>:
    43fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4400:	8c 81       	ldd	r24, Y+4	; 0x04
    4402:	8b 83       	std	Y+3, r24	; 0x03
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	8c 83       	std	Y+4, r24	; 0x04
    4408:	8e 81       	ldd	r24, Y+6	; 0x06
    440a:	8d 83       	std	Y+5, r24	; 0x05
    440c:	9e 83       	std	Y+6, r25	; 0x06
    440e:	ce 01       	movw	r24, r28
    4410:	03 96       	adiw	r24, 0x03	; 3
    4412:	64 e0       	ldi	r22, 0x04	; 4
    4414:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    4418:	ce 01       	movw	r24, r28
    441a:	07 96       	adiw	r24, 0x07	; 7
    441c:	bc 01       	movw	r22, r24
    441e:	ce 01       	movw	r24, r28
    4420:	03 96       	adiw	r24, 0x03	; 3
    4422:	44 e0       	ldi	r20, 0x04	; 4
    4424:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4428:	8f 81       	ldd	r24, Y+7	; 0x07
    442a:	88 0f       	add	r24, r24
    442c:	10 f4       	brcc	.+4      	; 0x4432 <AES_KeyExpansion4>
    442e:	9b e1       	ldi	r25, 0x1B	; 27
    4430:	89 27       	eor	r24, r25

00004432 <AES_KeyExpansion4>:
    4432:	8f 83       	std	Y+7, r24	; 0x07

00004434 <AES_KeyExpansion3>:
    4434:	8b 85       	ldd	r24, Y+11	; 0x0b
    4436:	9c 85       	ldd	r25, Y+12	; 0x0c
    4438:	40 97       	sbiw	r24, 0x10	; 16
    443a:	bc 01       	movw	r22, r24
    443c:	ce 01       	movw	r24, r28
    443e:	03 96       	adiw	r24, 0x03	; 3
    4440:	44 e0       	ldi	r20, 0x04	; 4
    4442:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4446:	ab 85       	ldd	r26, Y+11	; 0x0b
    4448:	bc 85       	ldd	r27, Y+12	; 0x0c
    444a:	8b 81       	ldd	r24, Y+3	; 0x03
    444c:	8d 93       	st	X+, r24
    444e:	8c 81       	ldd	r24, Y+4	; 0x04
    4450:	8d 93       	st	X+, r24
    4452:	8d 81       	ldd	r24, Y+5	; 0x05
    4454:	8d 93       	st	X+, r24
    4456:	8e 81       	ldd	r24, Y+6	; 0x06
    4458:	8d 93       	st	X+, r24
    445a:	bc 87       	std	Y+12, r27	; 0x0c
    445c:	ab 87       	std	Y+11, r26	; 0x0b
    445e:	8a 81       	ldd	r24, Y+2	; 0x02
    4460:	8c 5f       	subi	r24, 0xFC	; 252
    4462:	8a 83       	std	Y+2, r24	; 0x02

00004464 <AES_KeyExpansion2>:
    4464:	80 3b       	cpi	r24, 0xB0	; 176
    4466:	08 f4       	brcc	.+2      	; 0x446a <AES_KeyExpansion7>
    4468:	c8 cf       	rjmp	.-112    	; 0x43fa <AES_KeyExpansion8>

0000446a <AES_KeyExpansion7>:
    446a:	60 96       	adiw	r28, 0x10	; 16
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	f8 94       	cli
    4470:	de bf       	out	0x3e, r29	; 62
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	df 91       	pop	r29
    4478:	cf 91       	pop	r28
    447a:	08 95       	ret

0000447c <AES_128_SF_Init>:
    447c:	cf 93       	push	r28
    447e:	df 93       	push	r29
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
    4484:	2a 97       	sbiw	r28, 0x0a	; 10
    4486:	0f b6       	in	r0, 0x3f	; 63
    4488:	f8 94       	cli
    448a:	de bf       	out	0x3e, r29	; 62
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	cd bf       	out	0x3d, r28	; 61
    4490:	9c 83       	std	Y+4, r25	; 0x04
    4492:	8b 83       	std	Y+3, r24	; 0x03
    4494:	7e 83       	std	Y+6, r23	; 0x06
    4496:	6d 83       	std	Y+5, r22	; 0x05
    4498:	58 87       	std	Y+8, r21	; 0x08
    449a:	4f 83       	std	Y+7, r20	; 0x07
    449c:	3a 83       	std	Y+2, r19	; 0x02
    449e:	29 83       	std	Y+1, r18	; 0x01
    44a0:	22 27       	eor	r18, r18
    44a2:	31 e0       	ldi	r19, 0x01	; 1

000044a4 <AES_Init1>:
    44a4:	e2 2f       	mov	r30, r18
    44a6:	ff 27       	eor	r31, r31
    44a8:	e6 0f       	add	r30, r22
    44aa:	f7 1f       	adc	r31, r23
    44ac:	30 83       	st	Z, r19
    44ae:	e3 2f       	mov	r30, r19
    44b0:	ff 27       	eor	r31, r31
    44b2:	e4 0f       	add	r30, r20
    44b4:	f5 1f       	adc	r31, r21
    44b6:	20 83       	st	Z, r18
    44b8:	23 95       	inc	r18
    44ba:	83 2f       	mov	r24, r19
    44bc:	88 0f       	add	r24, r24
    44be:	10 f4       	brcc	.+4      	; 0x44c4 <AES_Init2B>
    44c0:	9b e1       	ldi	r25, 0x1B	; 27
    44c2:	89 27       	eor	r24, r25

000044c4 <AES_Init2B>:
    44c4:	38 27       	eor	r19, r24
    44c6:	31 30       	cpi	r19, 0x01	; 1
    44c8:	69 f7       	brne	.-38     	; 0x44a4 <AES_Init1>
    44ca:	fb 01       	movw	r30, r22
    44cc:	80 81       	ld	r24, Z
    44ce:	e1 50       	subi	r30, 0x01	; 1
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 83       	st	Z, r24
    44d4:	8b 81       	ldd	r24, Y+3	; 0x03
    44d6:	9c 81       	ldd	r25, Y+4	; 0x04
    44d8:	90 93 12 05 	sts	0x0512, r25
    44dc:	80 93 11 05 	sts	0x0511, r24
    44e0:	0e 94 2e 2b 	call	0x565c	; 0x565c <AES_CalcSBox>
    44e4:	8d 81       	ldd	r24, Y+5	; 0x05
    44e6:	9e 81       	ldd	r25, Y+6	; 0x06
    44e8:	90 93 14 05 	sts	0x0514, r25
    44ec:	80 93 13 05 	sts	0x0513, r24
    44f0:	69 81       	ldd	r22, Y+1	; 0x01
    44f2:	7a 81       	ldd	r23, Y+2	; 0x02
    44f4:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <AES_KeyExpansion>
    44f8:	6f 81       	ldd	r22, Y+7	; 0x07
    44fa:	78 85       	ldd	r23, Y+8	; 0x08
    44fc:	70 93 10 05 	sts	0x0510, r23
    4500:	60 93 0f 05 	sts	0x050F, r22
    4504:	80 91 11 05 	lds	r24, 0x0511
    4508:	90 91 12 05 	lds	r25, 0x0512
    450c:	0e 94 24 2b 	call	0x5648	; 0x5648 <AES_CalcSBoxInv>
    4510:	2a 96       	adiw	r28, 0x0a	; 10
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61
    451c:	df 91       	pop	r29
    451e:	cf 91       	pop	r28
    4520:	08 95       	ret

00004522 <AES_KeyExpansion>:
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	60 97       	sbiw	r28, 0x10	; 16
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	f8 94       	cli
    4530:	de bf       	out	0x3e, r29	; 62
    4532:	0f be       	out	0x3f, r0	; 63
    4534:	cd bf       	out	0x3d, r28	; 61
    4536:	a1 e0       	ldi	r26, 0x01	; 1
    4538:	af 83       	std	Y+7, r26	; 0x07
    453a:	18 86       	std	Y+8, r1	; 0x08
    453c:	19 86       	std	Y+9, r1	; 0x09
    453e:	1a 86       	std	Y+10, r1	; 0x0a
    4540:	28 e1       	ldi	r18, 0x18	; 24
    4542:	fb 01       	movw	r30, r22
    4544:	dc 01       	movw	r26, r24

00004546 <AES_KeyExpansion1>:
    4546:	31 91       	ld	r19, Z+
    4548:	3d 93       	st	X+, r19
    454a:	21 50       	subi	r18, 0x01	; 1
    454c:	e1 f7       	brne	.-8      	; 0x4546 <AES_KeyExpansion1>
    454e:	14 97       	sbiw	r26, 0x04	; 4
    4550:	8d 91       	ld	r24, X+
    4552:	8b 83       	std	Y+3, r24	; 0x03
    4554:	8d 91       	ld	r24, X+
    4556:	8c 83       	std	Y+4, r24	; 0x04
    4558:	8d 91       	ld	r24, X+
    455a:	8d 83       	std	Y+5, r24	; 0x05
    455c:	8d 91       	ld	r24, X+
    455e:	8e 83       	std	Y+6, r24	; 0x06
    4560:	bc 87       	std	Y+12, r27	; 0x0c
    4562:	ab 87       	std	Y+11, r26	; 0x0b
    4564:	88 e1       	ldi	r24, 0x18	; 24
    4566:	8a 83       	std	Y+2, r24	; 0x02
    4568:	37 c0       	rjmp	.+110    	; 0x45d8 <AES_KeyExpansion2>

0000456a <AES_KeyExpansion8>:
    456a:	88 51       	subi	r24, 0x18	; 24
    456c:	11 f0       	breq	.+4      	; 0x4572 <AES_KeyExpansion8C>
    456e:	e8 f7       	brcc	.-6      	; 0x456a <AES_KeyExpansion8>
    4570:	1b c0       	rjmp	.+54     	; 0x45a8 <AES_KeyExpansion3>

00004572 <AES_KeyExpansion8C>:
    4572:	9b 81       	ldd	r25, Y+3	; 0x03
    4574:	8c 81       	ldd	r24, Y+4	; 0x04
    4576:	8b 83       	std	Y+3, r24	; 0x03
    4578:	8d 81       	ldd	r24, Y+5	; 0x05
    457a:	8c 83       	std	Y+4, r24	; 0x04
    457c:	8e 81       	ldd	r24, Y+6	; 0x06
    457e:	8d 83       	std	Y+5, r24	; 0x05
    4580:	9e 83       	std	Y+6, r25	; 0x06
    4582:	ce 01       	movw	r24, r28
    4584:	03 96       	adiw	r24, 0x03	; 3
    4586:	64 e0       	ldi	r22, 0x04	; 4
    4588:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    458c:	ce 01       	movw	r24, r28
    458e:	07 96       	adiw	r24, 0x07	; 7
    4590:	bc 01       	movw	r22, r24
    4592:	ce 01       	movw	r24, r28
    4594:	03 96       	adiw	r24, 0x03	; 3
    4596:	44 e0       	ldi	r20, 0x04	; 4
    4598:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    459c:	8f 81       	ldd	r24, Y+7	; 0x07
    459e:	88 0f       	add	r24, r24
    45a0:	10 f4       	brcc	.+4      	; 0x45a6 <AES_KeyExpansion4>
    45a2:	9b e1       	ldi	r25, 0x1B	; 27
    45a4:	89 27       	eor	r24, r25

000045a6 <AES_KeyExpansion4>:
    45a6:	8f 83       	std	Y+7, r24	; 0x07

000045a8 <AES_KeyExpansion3>:
    45a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    45aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    45ac:	48 97       	sbiw	r24, 0x18	; 24
    45ae:	bc 01       	movw	r22, r24
    45b0:	ce 01       	movw	r24, r28
    45b2:	03 96       	adiw	r24, 0x03	; 3
    45b4:	44 e0       	ldi	r20, 0x04	; 4
    45b6:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    45ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    45bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    45be:	8b 81       	ldd	r24, Y+3	; 0x03
    45c0:	8d 93       	st	X+, r24
    45c2:	8c 81       	ldd	r24, Y+4	; 0x04
    45c4:	8d 93       	st	X+, r24
    45c6:	8d 81       	ldd	r24, Y+5	; 0x05
    45c8:	8d 93       	st	X+, r24
    45ca:	8e 81       	ldd	r24, Y+6	; 0x06
    45cc:	8d 93       	st	X+, r24
    45ce:	bc 87       	std	Y+12, r27	; 0x0c
    45d0:	ab 87       	std	Y+11, r26	; 0x0b
    45d2:	8a 81       	ldd	r24, Y+2	; 0x02
    45d4:	8c 5f       	subi	r24, 0xFC	; 252
    45d6:	8a 83       	std	Y+2, r24	; 0x02

000045d8 <AES_KeyExpansion2>:
    45d8:	80 3d       	cpi	r24, 0xD0	; 208
    45da:	08 f4       	brcc	.+2      	; 0x45de <AES_KeyExpansion7>
    45dc:	c6 cf       	rjmp	.-116    	; 0x456a <AES_KeyExpansion8>

000045de <AES_KeyExpansion7>:
    45de:	60 96       	adiw	r28, 0x10	; 16
    45e0:	0f b6       	in	r0, 0x3f	; 63
    45e2:	f8 94       	cli
    45e4:	de bf       	out	0x3e, r29	; 62
    45e6:	0f be       	out	0x3f, r0	; 63
    45e8:	cd bf       	out	0x3d, r28	; 61
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	08 95       	ret

000045f0 <AES_192_SF_Init>:
    45f0:	cf 93       	push	r28
    45f2:	df 93       	push	r29
    45f4:	cd b7       	in	r28, 0x3d	; 61
    45f6:	de b7       	in	r29, 0x3e	; 62
    45f8:	2a 97       	sbiw	r28, 0x0a	; 10
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	f8 94       	cli
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	0f be       	out	0x3f, r0	; 63
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	9c 83       	std	Y+4, r25	; 0x04
    4606:	8b 83       	std	Y+3, r24	; 0x03
    4608:	7e 83       	std	Y+6, r23	; 0x06
    460a:	6d 83       	std	Y+5, r22	; 0x05
    460c:	58 87       	std	Y+8, r21	; 0x08
    460e:	4f 83       	std	Y+7, r20	; 0x07
    4610:	3a 83       	std	Y+2, r19	; 0x02
    4612:	29 83       	std	Y+1, r18	; 0x01
    4614:	22 27       	eor	r18, r18
    4616:	31 e0       	ldi	r19, 0x01	; 1

00004618 <AES_Init1>:
    4618:	e2 2f       	mov	r30, r18
    461a:	ff 27       	eor	r31, r31
    461c:	e6 0f       	add	r30, r22
    461e:	f7 1f       	adc	r31, r23
    4620:	30 83       	st	Z, r19
    4622:	e3 2f       	mov	r30, r19
    4624:	ff 27       	eor	r31, r31
    4626:	e4 0f       	add	r30, r20
    4628:	f5 1f       	adc	r31, r21
    462a:	20 83       	st	Z, r18
    462c:	23 95       	inc	r18
    462e:	83 2f       	mov	r24, r19
    4630:	88 0f       	add	r24, r24
    4632:	10 f4       	brcc	.+4      	; 0x4638 <AES_Init2B>
    4634:	9b e1       	ldi	r25, 0x1B	; 27
    4636:	89 27       	eor	r24, r25

00004638 <AES_Init2B>:
    4638:	38 27       	eor	r19, r24
    463a:	31 30       	cpi	r19, 0x01	; 1
    463c:	69 f7       	brne	.-38     	; 0x4618 <AES_Init1>
    463e:	fb 01       	movw	r30, r22
    4640:	80 81       	ld	r24, Z
    4642:	e1 50       	subi	r30, 0x01	; 1
    4644:	ff 4f       	sbci	r31, 0xFF	; 255
    4646:	80 83       	st	Z, r24
    4648:	8b 81       	ldd	r24, Y+3	; 0x03
    464a:	9c 81       	ldd	r25, Y+4	; 0x04
    464c:	90 93 12 05 	sts	0x0512, r25
    4650:	80 93 11 05 	sts	0x0511, r24
    4654:	0e 94 2e 2b 	call	0x565c	; 0x565c <AES_CalcSBox>
    4658:	8d 81       	ldd	r24, Y+5	; 0x05
    465a:	9e 81       	ldd	r25, Y+6	; 0x06
    465c:	90 93 14 05 	sts	0x0514, r25
    4660:	80 93 13 05 	sts	0x0513, r24
    4664:	69 81       	ldd	r22, Y+1	; 0x01
    4666:	7a 81       	ldd	r23, Y+2	; 0x02
    4668:	0e 94 91 22 	call	0x4522	; 0x4522 <AES_KeyExpansion>
    466c:	6f 81       	ldd	r22, Y+7	; 0x07
    466e:	78 85       	ldd	r23, Y+8	; 0x08
    4670:	70 93 10 05 	sts	0x0510, r23
    4674:	60 93 0f 05 	sts	0x050F, r22
    4678:	80 91 11 05 	lds	r24, 0x0511
    467c:	90 91 12 05 	lds	r25, 0x0512
    4680:	0e 94 24 2b 	call	0x5648	; 0x5648 <AES_CalcSBoxInv>
    4684:	2a 96       	adiw	r28, 0x0a	; 10
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	08 95       	ret

00004696 <AES_KeyExpansion>:
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	cd b7       	in	r28, 0x3d	; 61
    469c:	de b7       	in	r29, 0x3e	; 62
    469e:	60 97       	sbiw	r28, 0x10	; 16
    46a0:	0f b6       	in	r0, 0x3f	; 63
    46a2:	f8 94       	cli
    46a4:	de bf       	out	0x3e, r29	; 62
    46a6:	0f be       	out	0x3f, r0	; 63
    46a8:	cd bf       	out	0x3d, r28	; 61
    46aa:	a1 e0       	ldi	r26, 0x01	; 1
    46ac:	af 83       	std	Y+7, r26	; 0x07
    46ae:	18 86       	std	Y+8, r1	; 0x08
    46b0:	19 86       	std	Y+9, r1	; 0x09
    46b2:	1a 86       	std	Y+10, r1	; 0x0a
    46b4:	20 e2       	ldi	r18, 0x20	; 32
    46b6:	fb 01       	movw	r30, r22
    46b8:	dc 01       	movw	r26, r24

000046ba <AES_KeyExpansion1>:
    46ba:	31 91       	ld	r19, Z+
    46bc:	3d 93       	st	X+, r19
    46be:	21 50       	subi	r18, 0x01	; 1
    46c0:	e1 f7       	brne	.-8      	; 0x46ba <AES_KeyExpansion1>
    46c2:	14 97       	sbiw	r26, 0x04	; 4
    46c4:	8d 91       	ld	r24, X+
    46c6:	8b 83       	std	Y+3, r24	; 0x03
    46c8:	8d 91       	ld	r24, X+
    46ca:	8c 83       	std	Y+4, r24	; 0x04
    46cc:	8d 91       	ld	r24, X+
    46ce:	8d 83       	std	Y+5, r24	; 0x05
    46d0:	8d 91       	ld	r24, X+
    46d2:	8e 83       	std	Y+6, r24	; 0x06
    46d4:	bc 87       	std	Y+12, r27	; 0x0c
    46d6:	ab 87       	std	Y+11, r26	; 0x0b
    46d8:	80 e2       	ldi	r24, 0x20	; 32
    46da:	8a 83       	std	Y+2, r24	; 0x02
    46dc:	3f c0       	rjmp	.+126    	; 0x475c <AES_KeyExpansion2>

000046de <AES_KeyExpansion8>:
    46de:	8f 71       	andi	r24, 0x1F	; 31
    46e0:	e1 f4       	brne	.+56     	; 0x471a <AES_KeyExpansion3>

000046e2 <AES_KeyExpansion8C>:
    46e2:	9b 81       	ldd	r25, Y+3	; 0x03
    46e4:	8c 81       	ldd	r24, Y+4	; 0x04
    46e6:	8b 83       	std	Y+3, r24	; 0x03
    46e8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ea:	8c 83       	std	Y+4, r24	; 0x04
    46ec:	8e 81       	ldd	r24, Y+6	; 0x06
    46ee:	8d 83       	std	Y+5, r24	; 0x05
    46f0:	9e 83       	std	Y+6, r25	; 0x06
    46f2:	ce 01       	movw	r24, r28
    46f4:	03 96       	adiw	r24, 0x03	; 3
    46f6:	64 e0       	ldi	r22, 0x04	; 4
    46f8:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    46fc:	ce 01       	movw	r24, r28
    46fe:	07 96       	adiw	r24, 0x07	; 7
    4700:	bc 01       	movw	r22, r24
    4702:	ce 01       	movw	r24, r28
    4704:	03 96       	adiw	r24, 0x03	; 3
    4706:	44 e0       	ldi	r20, 0x04	; 4
    4708:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    470c:	8f 81       	ldd	r24, Y+7	; 0x07
    470e:	88 0f       	add	r24, r24
    4710:	10 f4       	brcc	.+4      	; 0x4716 <AES_KeyExpansion4>
    4712:	9b e1       	ldi	r25, 0x1B	; 27
    4714:	89 27       	eor	r24, r25

00004716 <AES_KeyExpansion4>:
    4716:	8f 83       	std	Y+7, r24	; 0x07
    4718:	09 c0       	rjmp	.+18     	; 0x472c <AES_KeyExpansion6>

0000471a <AES_KeyExpansion3>:
    471a:	8a 81       	ldd	r24, Y+2	; 0x02
    471c:	8f 71       	andi	r24, 0x1F	; 31
    471e:	80 31       	cpi	r24, 0x10	; 16
    4720:	29 f4       	brne	.+10     	; 0x472c <AES_KeyExpansion6>
    4722:	ce 01       	movw	r24, r28
    4724:	03 96       	adiw	r24, 0x03	; 3
    4726:	64 e0       	ldi	r22, 0x04	; 4
    4728:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>

0000472c <AES_KeyExpansion6>:
    472c:	8b 85       	ldd	r24, Y+11	; 0x0b
    472e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4730:	80 97       	sbiw	r24, 0x20	; 32
    4732:	bc 01       	movw	r22, r24
    4734:	ce 01       	movw	r24, r28
    4736:	03 96       	adiw	r24, 0x03	; 3
    4738:	44 e0       	ldi	r20, 0x04	; 4
    473a:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    473e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4740:	bc 85       	ldd	r27, Y+12	; 0x0c
    4742:	8b 81       	ldd	r24, Y+3	; 0x03
    4744:	8d 93       	st	X+, r24
    4746:	8c 81       	ldd	r24, Y+4	; 0x04
    4748:	8d 93       	st	X+, r24
    474a:	8d 81       	ldd	r24, Y+5	; 0x05
    474c:	8d 93       	st	X+, r24
    474e:	8e 81       	ldd	r24, Y+6	; 0x06
    4750:	8d 93       	st	X+, r24
    4752:	bc 87       	std	Y+12, r27	; 0x0c
    4754:	ab 87       	std	Y+11, r26	; 0x0b
    4756:	8a 81       	ldd	r24, Y+2	; 0x02
    4758:	8c 5f       	subi	r24, 0xFC	; 252
    475a:	8a 83       	std	Y+2, r24	; 0x02

0000475c <AES_KeyExpansion2>:
    475c:	80 3f       	cpi	r24, 0xF0	; 240
    475e:	08 f4       	brcc	.+2      	; 0x4762 <AES_KeyExpansion7>
    4760:	be cf       	rjmp	.-132    	; 0x46de <AES_KeyExpansion8>

00004762 <AES_KeyExpansion7>:
    4762:	60 96       	adiw	r28, 0x10	; 16
    4764:	0f b6       	in	r0, 0x3f	; 63
    4766:	f8 94       	cli
    4768:	de bf       	out	0x3e, r29	; 62
    476a:	0f be       	out	0x3f, r0	; 63
    476c:	cd bf       	out	0x3d, r28	; 61
    476e:	df 91       	pop	r29
    4770:	cf 91       	pop	r28
    4772:	08 95       	ret

00004774 <AES_256_SF_Init>:
    4774:	cf 93       	push	r28
    4776:	df 93       	push	r29
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	2a 97       	sbiw	r28, 0x0a	; 10
    477e:	0f b6       	in	r0, 0x3f	; 63
    4780:	f8 94       	cli
    4782:	de bf       	out	0x3e, r29	; 62
    4784:	0f be       	out	0x3f, r0	; 63
    4786:	cd bf       	out	0x3d, r28	; 61
    4788:	9c 83       	std	Y+4, r25	; 0x04
    478a:	8b 83       	std	Y+3, r24	; 0x03
    478c:	7e 83       	std	Y+6, r23	; 0x06
    478e:	6d 83       	std	Y+5, r22	; 0x05
    4790:	58 87       	std	Y+8, r21	; 0x08
    4792:	4f 83       	std	Y+7, r20	; 0x07
    4794:	3a 83       	std	Y+2, r19	; 0x02
    4796:	29 83       	std	Y+1, r18	; 0x01
    4798:	22 27       	eor	r18, r18
    479a:	31 e0       	ldi	r19, 0x01	; 1

0000479c <AES_Init1>:
    479c:	e2 2f       	mov	r30, r18
    479e:	ff 27       	eor	r31, r31
    47a0:	e6 0f       	add	r30, r22
    47a2:	f7 1f       	adc	r31, r23
    47a4:	30 83       	st	Z, r19
    47a6:	e3 2f       	mov	r30, r19
    47a8:	ff 27       	eor	r31, r31
    47aa:	e4 0f       	add	r30, r20
    47ac:	f5 1f       	adc	r31, r21
    47ae:	20 83       	st	Z, r18
    47b0:	23 95       	inc	r18
    47b2:	83 2f       	mov	r24, r19
    47b4:	88 0f       	add	r24, r24
    47b6:	10 f4       	brcc	.+4      	; 0x47bc <AES_Init2B>
    47b8:	9b e1       	ldi	r25, 0x1B	; 27
    47ba:	89 27       	eor	r24, r25

000047bc <AES_Init2B>:
    47bc:	38 27       	eor	r19, r24
    47be:	31 30       	cpi	r19, 0x01	; 1
    47c0:	69 f7       	brne	.-38     	; 0x479c <AES_Init1>
    47c2:	fb 01       	movw	r30, r22
    47c4:	80 81       	ld	r24, Z
    47c6:	e1 50       	subi	r30, 0x01	; 1
    47c8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ca:	80 83       	st	Z, r24
    47cc:	8b 81       	ldd	r24, Y+3	; 0x03
    47ce:	9c 81       	ldd	r25, Y+4	; 0x04
    47d0:	90 93 12 05 	sts	0x0512, r25
    47d4:	80 93 11 05 	sts	0x0511, r24
    47d8:	0e 94 2e 2b 	call	0x565c	; 0x565c <AES_CalcSBox>
    47dc:	8d 81       	ldd	r24, Y+5	; 0x05
    47de:	9e 81       	ldd	r25, Y+6	; 0x06
    47e0:	90 93 14 05 	sts	0x0514, r25
    47e4:	80 93 13 05 	sts	0x0513, r24
    47e8:	69 81       	ldd	r22, Y+1	; 0x01
    47ea:	7a 81       	ldd	r23, Y+2	; 0x02
    47ec:	0e 94 4b 23 	call	0x4696	; 0x4696 <AES_KeyExpansion>
    47f0:	6f 81       	ldd	r22, Y+7	; 0x07
    47f2:	78 85       	ldd	r23, Y+8	; 0x08
    47f4:	70 93 10 05 	sts	0x0510, r23
    47f8:	60 93 0f 05 	sts	0x050F, r22
    47fc:	80 91 11 05 	lds	r24, 0x0511
    4800:	90 91 12 05 	lds	r25, 0x0512
    4804:	0e 94 24 2b 	call	0x5648	; 0x5648 <AES_CalcSBoxInv>
    4808:	2a 96       	adiw	r28, 0x0a	; 10
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	f8 94       	cli
    480e:	de bf       	out	0x3e, r29	; 62
    4810:	0f be       	out	0x3f, r0	; 63
    4812:	cd bf       	out	0x3d, r28	; 61
    4814:	df 91       	pop	r29
    4816:	cf 91       	pop	r28
    4818:	08 95       	ret

0000481a <AES_KeyExpansion>:
    481a:	cf 93       	push	r28
    481c:	df 93       	push	r29
    481e:	cd b7       	in	r28, 0x3d	; 61
    4820:	de b7       	in	r29, 0x3e	; 62
    4822:	60 97       	sbiw	r28, 0x10	; 16
    4824:	0f b6       	in	r0, 0x3f	; 63
    4826:	f8 94       	cli
    4828:	de bf       	out	0x3e, r29	; 62
    482a:	0f be       	out	0x3f, r0	; 63
    482c:	cd bf       	out	0x3d, r28	; 61
    482e:	a1 e0       	ldi	r26, 0x01	; 1
    4830:	af 83       	std	Y+7, r26	; 0x07
    4832:	18 86       	std	Y+8, r1	; 0x08
    4834:	19 86       	std	Y+9, r1	; 0x09
    4836:	1a 86       	std	Y+10, r1	; 0x0a
    4838:	20 e1       	ldi	r18, 0x10	; 16
    483a:	fb 01       	movw	r30, r22
    483c:	dc 01       	movw	r26, r24

0000483e <AES_KeyExpansion1>:
    483e:	31 91       	ld	r19, Z+
    4840:	3d 93       	st	X+, r19
    4842:	21 50       	subi	r18, 0x01	; 1
    4844:	e1 f7       	brne	.-8      	; 0x483e <AES_KeyExpansion1>
    4846:	14 97       	sbiw	r26, 0x04	; 4
    4848:	8d 91       	ld	r24, X+
    484a:	8b 83       	std	Y+3, r24	; 0x03
    484c:	8d 91       	ld	r24, X+
    484e:	8c 83       	std	Y+4, r24	; 0x04
    4850:	8d 91       	ld	r24, X+
    4852:	8d 83       	std	Y+5, r24	; 0x05
    4854:	8d 91       	ld	r24, X+
    4856:	8e 83       	std	Y+6, r24	; 0x06
    4858:	bc 87       	std	Y+12, r27	; 0x0c
    485a:	ab 87       	std	Y+11, r26	; 0x0b
    485c:	80 e1       	ldi	r24, 0x10	; 16
    485e:	8a 83       	std	Y+2, r24	; 0x02
    4860:	35 c0       	rjmp	.+106    	; 0x48cc <AES_KeyExpansion2>

00004862 <AES_KeyExpansion8>:
    4862:	8f 70       	andi	r24, 0x0F	; 15
    4864:	d9 f4       	brne	.+54     	; 0x489c <AES_KeyExpansion3>

00004866 <AES_KeyExpansion8C>:
    4866:	9b 81       	ldd	r25, Y+3	; 0x03
    4868:	8c 81       	ldd	r24, Y+4	; 0x04
    486a:	8b 83       	std	Y+3, r24	; 0x03
    486c:	8d 81       	ldd	r24, Y+5	; 0x05
    486e:	8c 83       	std	Y+4, r24	; 0x04
    4870:	8e 81       	ldd	r24, Y+6	; 0x06
    4872:	8d 83       	std	Y+5, r24	; 0x05
    4874:	9e 83       	std	Y+6, r25	; 0x06
    4876:	ce 01       	movw	r24, r28
    4878:	03 96       	adiw	r24, 0x03	; 3
    487a:	64 e0       	ldi	r22, 0x04	; 4
    487c:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    4880:	ce 01       	movw	r24, r28
    4882:	07 96       	adiw	r24, 0x07	; 7
    4884:	bc 01       	movw	r22, r24
    4886:	ce 01       	movw	r24, r28
    4888:	03 96       	adiw	r24, 0x03	; 3
    488a:	44 e0       	ldi	r20, 0x04	; 4
    488c:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4890:	8f 81       	ldd	r24, Y+7	; 0x07
    4892:	88 0f       	add	r24, r24
    4894:	10 f4       	brcc	.+4      	; 0x489a <AES_KeyExpansion4>
    4896:	9b e1       	ldi	r25, 0x1B	; 27
    4898:	89 27       	eor	r24, r25

0000489a <AES_KeyExpansion4>:
    489a:	8f 83       	std	Y+7, r24	; 0x07

0000489c <AES_KeyExpansion3>:
    489c:	8b 85       	ldd	r24, Y+11	; 0x0b
    489e:	9c 85       	ldd	r25, Y+12	; 0x0c
    48a0:	40 97       	sbiw	r24, 0x10	; 16
    48a2:	bc 01       	movw	r22, r24
    48a4:	ce 01       	movw	r24, r28
    48a6:	03 96       	adiw	r24, 0x03	; 3
    48a8:	44 e0       	ldi	r20, 0x04	; 4
    48aa:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    48ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    48b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    48b2:	8b 81       	ldd	r24, Y+3	; 0x03
    48b4:	8d 93       	st	X+, r24
    48b6:	8c 81       	ldd	r24, Y+4	; 0x04
    48b8:	8d 93       	st	X+, r24
    48ba:	8d 81       	ldd	r24, Y+5	; 0x05
    48bc:	8d 93       	st	X+, r24
    48be:	8e 81       	ldd	r24, Y+6	; 0x06
    48c0:	8d 93       	st	X+, r24
    48c2:	bc 87       	std	Y+12, r27	; 0x0c
    48c4:	ab 87       	std	Y+11, r26	; 0x0b
    48c6:	8a 81       	ldd	r24, Y+2	; 0x02
    48c8:	8c 5f       	subi	r24, 0xFC	; 252
    48ca:	8a 83       	std	Y+2, r24	; 0x02

000048cc <AES_KeyExpansion2>:
    48cc:	80 3b       	cpi	r24, 0xB0	; 176
    48ce:	08 f4       	brcc	.+2      	; 0x48d2 <AES_KeyExpansion7>
    48d0:	c8 cf       	rjmp	.-112    	; 0x4862 <AES_KeyExpansion8>

000048d2 <AES_KeyExpansion7>:
    48d2:	60 96       	adiw	r28, 0x10	; 16
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
    48de:	df 91       	pop	r29
    48e0:	cf 91       	pop	r28
    48e2:	08 95       	ret

000048e4 <AES_128_SR_Init>:
    48e4:	cf 93       	push	r28
    48e6:	df 93       	push	r29
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
    48ec:	2a 97       	sbiw	r28, 0x0a	; 10
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	9c 83       	std	Y+4, r25	; 0x04
    48fa:	8b 83       	std	Y+3, r24	; 0x03
    48fc:	7a 83       	std	Y+2, r23	; 0x02
    48fe:	69 83       	std	Y+1, r22	; 0x01
    4900:	8b 81       	ldd	r24, Y+3	; 0x03
    4902:	9c 81       	ldd	r25, Y+4	; 0x04
    4904:	90 93 14 05 	sts	0x0514, r25
    4908:	80 93 13 05 	sts	0x0513, r24
    490c:	69 81       	ldd	r22, Y+1	; 0x01
    490e:	7a 81       	ldd	r23, Y+2	; 0x02
    4910:	0e 94 0d 24 	call	0x481a	; 0x481a <AES_KeyExpansion>
    4914:	2a 96       	adiw	r28, 0x0a	; 10
    4916:	0f b6       	in	r0, 0x3f	; 63
    4918:	f8 94       	cli
    491a:	de bf       	out	0x3e, r29	; 62
    491c:	0f be       	out	0x3f, r0	; 63
    491e:	cd bf       	out	0x3d, r28	; 61
    4920:	df 91       	pop	r29
    4922:	cf 91       	pop	r28
    4924:	08 95       	ret

00004926 <AES_KeyExpansion>:
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	60 97       	sbiw	r28, 0x10	; 16
    4930:	0f b6       	in	r0, 0x3f	; 63
    4932:	f8 94       	cli
    4934:	de bf       	out	0x3e, r29	; 62
    4936:	0f be       	out	0x3f, r0	; 63
    4938:	cd bf       	out	0x3d, r28	; 61
    493a:	a1 e0       	ldi	r26, 0x01	; 1
    493c:	af 83       	std	Y+7, r26	; 0x07
    493e:	18 86       	std	Y+8, r1	; 0x08
    4940:	19 86       	std	Y+9, r1	; 0x09
    4942:	1a 86       	std	Y+10, r1	; 0x0a
    4944:	28 e1       	ldi	r18, 0x18	; 24
    4946:	fb 01       	movw	r30, r22
    4948:	dc 01       	movw	r26, r24

0000494a <AES_KeyExpansion1>:
    494a:	31 91       	ld	r19, Z+
    494c:	3d 93       	st	X+, r19
    494e:	21 50       	subi	r18, 0x01	; 1
    4950:	e1 f7       	brne	.-8      	; 0x494a <AES_KeyExpansion1>
    4952:	14 97       	sbiw	r26, 0x04	; 4
    4954:	8d 91       	ld	r24, X+
    4956:	8b 83       	std	Y+3, r24	; 0x03
    4958:	8d 91       	ld	r24, X+
    495a:	8c 83       	std	Y+4, r24	; 0x04
    495c:	8d 91       	ld	r24, X+
    495e:	8d 83       	std	Y+5, r24	; 0x05
    4960:	8d 91       	ld	r24, X+
    4962:	8e 83       	std	Y+6, r24	; 0x06
    4964:	bc 87       	std	Y+12, r27	; 0x0c
    4966:	ab 87       	std	Y+11, r26	; 0x0b
    4968:	88 e1       	ldi	r24, 0x18	; 24
    496a:	8a 83       	std	Y+2, r24	; 0x02
    496c:	37 c0       	rjmp	.+110    	; 0x49dc <AES_KeyExpansion2>

0000496e <AES_KeyExpansion8>:
    496e:	88 51       	subi	r24, 0x18	; 24
    4970:	11 f0       	breq	.+4      	; 0x4976 <AES_KeyExpansion8C>
    4972:	e8 f7       	brcc	.-6      	; 0x496e <AES_KeyExpansion8>
    4974:	1b c0       	rjmp	.+54     	; 0x49ac <AES_KeyExpansion3>

00004976 <AES_KeyExpansion8C>:
    4976:	9b 81       	ldd	r25, Y+3	; 0x03
    4978:	8c 81       	ldd	r24, Y+4	; 0x04
    497a:	8b 83       	std	Y+3, r24	; 0x03
    497c:	8d 81       	ldd	r24, Y+5	; 0x05
    497e:	8c 83       	std	Y+4, r24	; 0x04
    4980:	8e 81       	ldd	r24, Y+6	; 0x06
    4982:	8d 83       	std	Y+5, r24	; 0x05
    4984:	9e 83       	std	Y+6, r25	; 0x06
    4986:	ce 01       	movw	r24, r28
    4988:	03 96       	adiw	r24, 0x03	; 3
    498a:	64 e0       	ldi	r22, 0x04	; 4
    498c:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    4990:	ce 01       	movw	r24, r28
    4992:	07 96       	adiw	r24, 0x07	; 7
    4994:	bc 01       	movw	r22, r24
    4996:	ce 01       	movw	r24, r28
    4998:	03 96       	adiw	r24, 0x03	; 3
    499a:	44 e0       	ldi	r20, 0x04	; 4
    499c:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    49a0:	8f 81       	ldd	r24, Y+7	; 0x07
    49a2:	88 0f       	add	r24, r24
    49a4:	10 f4       	brcc	.+4      	; 0x49aa <AES_KeyExpansion4>
    49a6:	9b e1       	ldi	r25, 0x1B	; 27
    49a8:	89 27       	eor	r24, r25

000049aa <AES_KeyExpansion4>:
    49aa:	8f 83       	std	Y+7, r24	; 0x07

000049ac <AES_KeyExpansion3>:
    49ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    49ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    49b0:	48 97       	sbiw	r24, 0x18	; 24
    49b2:	bc 01       	movw	r22, r24
    49b4:	ce 01       	movw	r24, r28
    49b6:	03 96       	adiw	r24, 0x03	; 3
    49b8:	44 e0       	ldi	r20, 0x04	; 4
    49ba:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    49be:	ab 85       	ldd	r26, Y+11	; 0x0b
    49c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    49c2:	8b 81       	ldd	r24, Y+3	; 0x03
    49c4:	8d 93       	st	X+, r24
    49c6:	8c 81       	ldd	r24, Y+4	; 0x04
    49c8:	8d 93       	st	X+, r24
    49ca:	8d 81       	ldd	r24, Y+5	; 0x05
    49cc:	8d 93       	st	X+, r24
    49ce:	8e 81       	ldd	r24, Y+6	; 0x06
    49d0:	8d 93       	st	X+, r24
    49d2:	bc 87       	std	Y+12, r27	; 0x0c
    49d4:	ab 87       	std	Y+11, r26	; 0x0b
    49d6:	8a 81       	ldd	r24, Y+2	; 0x02
    49d8:	8c 5f       	subi	r24, 0xFC	; 252
    49da:	8a 83       	std	Y+2, r24	; 0x02

000049dc <AES_KeyExpansion2>:
    49dc:	80 3d       	cpi	r24, 0xD0	; 208
    49de:	08 f4       	brcc	.+2      	; 0x49e2 <AES_KeyExpansion7>
    49e0:	c6 cf       	rjmp	.-116    	; 0x496e <AES_KeyExpansion8>

000049e2 <AES_KeyExpansion7>:
    49e2:	60 96       	adiw	r28, 0x10	; 16
    49e4:	0f b6       	in	r0, 0x3f	; 63
    49e6:	f8 94       	cli
    49e8:	de bf       	out	0x3e, r29	; 62
    49ea:	0f be       	out	0x3f, r0	; 63
    49ec:	cd bf       	out	0x3d, r28	; 61
    49ee:	df 91       	pop	r29
    49f0:	cf 91       	pop	r28
    49f2:	08 95       	ret

000049f4 <AES_192_SR_Init>:
    49f4:	cf 93       	push	r28
    49f6:	df 93       	push	r29
    49f8:	cd b7       	in	r28, 0x3d	; 61
    49fa:	de b7       	in	r29, 0x3e	; 62
    49fc:	2a 97       	sbiw	r28, 0x0a	; 10
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	f8 94       	cli
    4a02:	de bf       	out	0x3e, r29	; 62
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	cd bf       	out	0x3d, r28	; 61
    4a08:	9c 83       	std	Y+4, r25	; 0x04
    4a0a:	8b 83       	std	Y+3, r24	; 0x03
    4a0c:	7a 83       	std	Y+2, r23	; 0x02
    4a0e:	69 83       	std	Y+1, r22	; 0x01
    4a10:	8b 81       	ldd	r24, Y+3	; 0x03
    4a12:	9c 81       	ldd	r25, Y+4	; 0x04
    4a14:	90 93 14 05 	sts	0x0514, r25
    4a18:	80 93 13 05 	sts	0x0513, r24
    4a1c:	69 81       	ldd	r22, Y+1	; 0x01
    4a1e:	7a 81       	ldd	r23, Y+2	; 0x02
    4a20:	0e 94 93 24 	call	0x4926	; 0x4926 <AES_KeyExpansion>
    4a24:	2a 96       	adiw	r28, 0x0a	; 10
    4a26:	0f b6       	in	r0, 0x3f	; 63
    4a28:	f8 94       	cli
    4a2a:	de bf       	out	0x3e, r29	; 62
    4a2c:	0f be       	out	0x3f, r0	; 63
    4a2e:	cd bf       	out	0x3d, r28	; 61
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	08 95       	ret

00004a36 <AES_KeyExpansion>:
    4a36:	cf 93       	push	r28
    4a38:	df 93       	push	r29
    4a3a:	cd b7       	in	r28, 0x3d	; 61
    4a3c:	de b7       	in	r29, 0x3e	; 62
    4a3e:	60 97       	sbiw	r28, 0x10	; 16
    4a40:	0f b6       	in	r0, 0x3f	; 63
    4a42:	f8 94       	cli
    4a44:	de bf       	out	0x3e, r29	; 62
    4a46:	0f be       	out	0x3f, r0	; 63
    4a48:	cd bf       	out	0x3d, r28	; 61
    4a4a:	a1 e0       	ldi	r26, 0x01	; 1
    4a4c:	af 83       	std	Y+7, r26	; 0x07
    4a4e:	18 86       	std	Y+8, r1	; 0x08
    4a50:	19 86       	std	Y+9, r1	; 0x09
    4a52:	1a 86       	std	Y+10, r1	; 0x0a
    4a54:	20 e2       	ldi	r18, 0x20	; 32
    4a56:	fb 01       	movw	r30, r22
    4a58:	dc 01       	movw	r26, r24

00004a5a <AES_KeyExpansion1>:
    4a5a:	31 91       	ld	r19, Z+
    4a5c:	3d 93       	st	X+, r19
    4a5e:	21 50       	subi	r18, 0x01	; 1
    4a60:	e1 f7       	brne	.-8      	; 0x4a5a <AES_KeyExpansion1>
    4a62:	14 97       	sbiw	r26, 0x04	; 4
    4a64:	8d 91       	ld	r24, X+
    4a66:	8b 83       	std	Y+3, r24	; 0x03
    4a68:	8d 91       	ld	r24, X+
    4a6a:	8c 83       	std	Y+4, r24	; 0x04
    4a6c:	8d 91       	ld	r24, X+
    4a6e:	8d 83       	std	Y+5, r24	; 0x05
    4a70:	8d 91       	ld	r24, X+
    4a72:	8e 83       	std	Y+6, r24	; 0x06
    4a74:	bc 87       	std	Y+12, r27	; 0x0c
    4a76:	ab 87       	std	Y+11, r26	; 0x0b
    4a78:	80 e2       	ldi	r24, 0x20	; 32
    4a7a:	8a 83       	std	Y+2, r24	; 0x02
    4a7c:	3f c0       	rjmp	.+126    	; 0x4afc <AES_KeyExpansion2>

00004a7e <AES_KeyExpansion8>:
    4a7e:	8f 71       	andi	r24, 0x1F	; 31
    4a80:	e1 f4       	brne	.+56     	; 0x4aba <AES_KeyExpansion3>

00004a82 <AES_KeyExpansion8C>:
    4a82:	9b 81       	ldd	r25, Y+3	; 0x03
    4a84:	8c 81       	ldd	r24, Y+4	; 0x04
    4a86:	8b 83       	std	Y+3, r24	; 0x03
    4a88:	8d 81       	ldd	r24, Y+5	; 0x05
    4a8a:	8c 83       	std	Y+4, r24	; 0x04
    4a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a8e:	8d 83       	std	Y+5, r24	; 0x05
    4a90:	9e 83       	std	Y+6, r25	; 0x06
    4a92:	ce 01       	movw	r24, r28
    4a94:	03 96       	adiw	r24, 0x03	; 3
    4a96:	64 e0       	ldi	r22, 0x04	; 4
    4a98:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    4a9c:	ce 01       	movw	r24, r28
    4a9e:	07 96       	adiw	r24, 0x07	; 7
    4aa0:	bc 01       	movw	r22, r24
    4aa2:	ce 01       	movw	r24, r28
    4aa4:	03 96       	adiw	r24, 0x03	; 3
    4aa6:	44 e0       	ldi	r20, 0x04	; 4
    4aa8:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4aac:	8f 81       	ldd	r24, Y+7	; 0x07
    4aae:	88 0f       	add	r24, r24
    4ab0:	10 f4       	brcc	.+4      	; 0x4ab6 <AES_KeyExpansion4>
    4ab2:	9b e1       	ldi	r25, 0x1B	; 27
    4ab4:	89 27       	eor	r24, r25

00004ab6 <AES_KeyExpansion4>:
    4ab6:	8f 83       	std	Y+7, r24	; 0x07
    4ab8:	09 c0       	rjmp	.+18     	; 0x4acc <AES_KeyExpansion6>

00004aba <AES_KeyExpansion3>:
    4aba:	8a 81       	ldd	r24, Y+2	; 0x02
    4abc:	8f 71       	andi	r24, 0x1F	; 31
    4abe:	80 31       	cpi	r24, 0x10	; 16
    4ac0:	29 f4       	brne	.+10     	; 0x4acc <AES_KeyExpansion6>
    4ac2:	ce 01       	movw	r24, r28
    4ac4:	03 96       	adiw	r24, 0x03	; 3
    4ac6:	64 e0       	ldi	r22, 0x04	; 4
    4ac8:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>

00004acc <AES_KeyExpansion6>:
    4acc:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ace:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ad0:	80 97       	sbiw	r24, 0x20	; 32
    4ad2:	bc 01       	movw	r22, r24
    4ad4:	ce 01       	movw	r24, r28
    4ad6:	03 96       	adiw	r24, 0x03	; 3
    4ad8:	44 e0       	ldi	r20, 0x04	; 4
    4ada:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4ade:	ab 85       	ldd	r26, Y+11	; 0x0b
    4ae0:	bc 85       	ldd	r27, Y+12	; 0x0c
    4ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae4:	8d 93       	st	X+, r24
    4ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ae8:	8d 93       	st	X+, r24
    4aea:	8d 81       	ldd	r24, Y+5	; 0x05
    4aec:	8d 93       	st	X+, r24
    4aee:	8e 81       	ldd	r24, Y+6	; 0x06
    4af0:	8d 93       	st	X+, r24
    4af2:	bc 87       	std	Y+12, r27	; 0x0c
    4af4:	ab 87       	std	Y+11, r26	; 0x0b
    4af6:	8a 81       	ldd	r24, Y+2	; 0x02
    4af8:	8c 5f       	subi	r24, 0xFC	; 252
    4afa:	8a 83       	std	Y+2, r24	; 0x02

00004afc <AES_KeyExpansion2>:
    4afc:	80 3f       	cpi	r24, 0xF0	; 240
    4afe:	08 f4       	brcc	.+2      	; 0x4b02 <AES_KeyExpansion7>
    4b00:	be cf       	rjmp	.-132    	; 0x4a7e <AES_KeyExpansion8>

00004b02 <AES_KeyExpansion7>:
    4b02:	60 96       	adiw	r28, 0x10	; 16
    4b04:	0f b6       	in	r0, 0x3f	; 63
    4b06:	f8 94       	cli
    4b08:	de bf       	out	0x3e, r29	; 62
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	cd bf       	out	0x3d, r28	; 61
    4b0e:	df 91       	pop	r29
    4b10:	cf 91       	pop	r28
    4b12:	08 95       	ret

00004b14 <AES_256_SR_Init>:
    4b14:	cf 93       	push	r28
    4b16:	df 93       	push	r29
    4b18:	cd b7       	in	r28, 0x3d	; 61
    4b1a:	de b7       	in	r29, 0x3e	; 62
    4b1c:	2a 97       	sbiw	r28, 0x0a	; 10
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	f8 94       	cli
    4b22:	de bf       	out	0x3e, r29	; 62
    4b24:	0f be       	out	0x3f, r0	; 63
    4b26:	cd bf       	out	0x3d, r28	; 61
    4b28:	9c 83       	std	Y+4, r25	; 0x04
    4b2a:	8b 83       	std	Y+3, r24	; 0x03
    4b2c:	7a 83       	std	Y+2, r23	; 0x02
    4b2e:	69 83       	std	Y+1, r22	; 0x01
    4b30:	8b 81       	ldd	r24, Y+3	; 0x03
    4b32:	9c 81       	ldd	r25, Y+4	; 0x04
    4b34:	90 93 14 05 	sts	0x0514, r25
    4b38:	80 93 13 05 	sts	0x0513, r24
    4b3c:	69 81       	ldd	r22, Y+1	; 0x01
    4b3e:	7a 81       	ldd	r23, Y+2	; 0x02
    4b40:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <AES_KeyExpansion>
    4b44:	2a 96       	adiw	r28, 0x0a	; 10
    4b46:	0f b6       	in	r0, 0x3f	; 63
    4b48:	f8 94       	cli
    4b4a:	de bf       	out	0x3e, r29	; 62
    4b4c:	0f be       	out	0x3f, r0	; 63
    4b4e:	cd bf       	out	0x3d, r28	; 61
    4b50:	df 91       	pop	r29
    4b52:	cf 91       	pop	r28
    4b54:	08 95       	ret

00004b56 <AES_128_SF_Decrypt>:
    4b56:	1f 93       	push	r17
    4b58:	0f 93       	push	r16
    4b5a:	ff 92       	push	r15
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	cd b7       	in	r28, 0x3d	; 61
    4b62:	de b7       	in	r29, 0x3e	; 62
    4b64:	25 97       	sbiw	r28, 0x05	; 5
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	9d 83       	std	Y+5, r25	; 0x05
    4b72:	8c 83       	std	Y+4, r24	; 0x04
    4b74:	a9 e0       	ldi	r26, 0x09	; 9
    4b76:	ab 83       	std	Y+3, r26	; 0x03
    4b78:	60 91 13 05 	lds	r22, 0x0513
    4b7c:	70 91 14 05 	lds	r23, 0x0514
    4b80:	60 56       	subi	r22, 0x60	; 96
    4b82:	7f 4f       	sbci	r23, 0xFF	; 255
    4b84:	db 01       	movw	r26, r22
    4b86:	50 97       	sbiw	r26, 0x10	; 16
    4b88:	ba 83       	std	Y+2, r27	; 0x02
    4b8a:	a9 83       	std	Y+1, r26	; 0x01
    4b8c:	40 e1       	ldi	r20, 0x10	; 16
    4b8e:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

00004b92 <AES_Decrypt1>:
    4b92:	8c 81       	ldd	r24, Y+4	; 0x04
    4b94:	9d 81       	ldd	r25, Y+5	; 0x05
    4b96:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    4b9a:	69 81       	ldd	r22, Y+1	; 0x01
    4b9c:	7a 81       	ldd	r23, Y+2	; 0x02
    4b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    4ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ba2:	40 e1       	ldi	r20, 0x10	; 16
    4ba4:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <AES_SF_InvSubBytesAndXOR>
    4ba8:	89 81       	ldd	r24, Y+1	; 0x01
    4baa:	9a 81       	ldd	r25, Y+2	; 0x02
    4bac:	40 97       	sbiw	r24, 0x10	; 16
    4bae:	9a 83       	std	Y+2, r25	; 0x02
    4bb0:	89 83       	std	Y+1, r24	; 0x01
    4bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    4bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    4bb6:	0e 94 3c 2c 	call	0x5878	; 0x5878 <AES_InvMixColumns>
    4bba:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbc:	81 50       	subi	r24, 0x01	; 1
    4bbe:	8b 83       	std	Y+3, r24	; 0x03
    4bc0:	41 f7       	brne	.-48     	; 0x4b92 <AES_Decrypt1>
    4bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    4bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    4bc6:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    4bca:	69 81       	ldd	r22, Y+1	; 0x01
    4bcc:	7a 81       	ldd	r23, Y+2	; 0x02
    4bce:	8c 81       	ldd	r24, Y+4	; 0x04
    4bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    4bd2:	40 e1       	ldi	r20, 0x10	; 16
    4bd4:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <AES_SF_InvSubBytesAndXOR>
    4bd8:	25 96       	adiw	r28, 0x05	; 5
    4bda:	0f b6       	in	r0, 0x3f	; 63
    4bdc:	f8 94       	cli
    4bde:	de bf       	out	0x3e, r29	; 62
    4be0:	0f be       	out	0x3f, r0	; 63
    4be2:	cd bf       	out	0x3d, r28	; 61
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	ff 90       	pop	r15
    4bea:	0f 91       	pop	r16
    4bec:	1f 91       	pop	r17
    4bee:	08 95       	ret

00004bf0 <AES_128_SF_Encrypt>:
    4bf0:	0f 93       	push	r16
    4bf2:	1f 93       	push	r17
    4bf4:	cf 93       	push	r28
    4bf6:	df 93       	push	r29
    4bf8:	cd b7       	in	r28, 0x3d	; 61
    4bfa:	de b7       	in	r29, 0x3e	; 62
    4bfc:	25 97       	sbiw	r28, 0x05	; 5
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	f8 94       	cli
    4c02:	de bf       	out	0x3e, r29	; 62
    4c04:	0f be       	out	0x3f, r0	; 63
    4c06:	cd bf       	out	0x3d, r28	; 61
    4c08:	9d 83       	std	Y+5, r25	; 0x05
    4c0a:	8c 83       	std	Y+4, r24	; 0x04
    4c0c:	69 e0       	ldi	r22, 0x09	; 9
    4c0e:	6b 83       	std	Y+3, r22	; 0x03
    4c10:	60 91 13 05 	lds	r22, 0x0513
    4c14:	70 91 14 05 	lds	r23, 0x0514
    4c18:	db 01       	movw	r26, r22
    4c1a:	50 96       	adiw	r26, 0x10	; 16
    4c1c:	ba 83       	std	Y+2, r27	; 0x02
    4c1e:	a9 83       	std	Y+1, r26	; 0x01
    4c20:	40 e1       	ldi	r20, 0x10	; 16
    4c22:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

00004c26 <AESEncrypt1>:
    4c26:	8c 81       	ldd	r24, Y+4	; 0x04
    4c28:	9d 81       	ldd	r25, Y+5	; 0x05
    4c2a:	60 e1       	ldi	r22, 0x10	; 16
    4c2c:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    4c30:	8c 81       	ldd	r24, Y+4	; 0x04
    4c32:	9d 81       	ldd	r25, Y+5	; 0x05
    4c34:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    4c38:	8c 81       	ldd	r24, Y+4	; 0x04
    4c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    4c3c:	0e 94 c2 2b 	call	0x5784	; 0x5784 <AES_MixColumns>
    4c40:	69 81       	ldd	r22, Y+1	; 0x01
    4c42:	7a 81       	ldd	r23, Y+2	; 0x02
    4c44:	cb 01       	movw	r24, r22
    4c46:	40 96       	adiw	r24, 0x10	; 16
    4c48:	9a 83       	std	Y+2, r25	; 0x02
    4c4a:	89 83       	std	Y+1, r24	; 0x01
    4c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    4c50:	40 e1       	ldi	r20, 0x10	; 16
    4c52:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4c56:	8b 81       	ldd	r24, Y+3	; 0x03
    4c58:	81 50       	subi	r24, 0x01	; 1
    4c5a:	8b 83       	std	Y+3, r24	; 0x03
    4c5c:	21 f7       	brne	.-56     	; 0x4c26 <AESEncrypt1>
    4c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c60:	9d 81       	ldd	r25, Y+5	; 0x05
    4c62:	60 e1       	ldi	r22, 0x10	; 16
    4c64:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    4c68:	8c 81       	ldd	r24, Y+4	; 0x04
    4c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    4c6c:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    4c70:	69 81       	ldd	r22, Y+1	; 0x01
    4c72:	7a 81       	ldd	r23, Y+2	; 0x02
    4c74:	8c 81       	ldd	r24, Y+4	; 0x04
    4c76:	9d 81       	ldd	r25, Y+5	; 0x05
    4c78:	40 e1       	ldi	r20, 0x10	; 16
    4c7a:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4c7e:	25 96       	adiw	r28, 0x05	; 5
    4c80:	0f b6       	in	r0, 0x3f	; 63
    4c82:	f8 94       	cli
    4c84:	de bf       	out	0x3e, r29	; 62
    4c86:	0f be       	out	0x3f, r0	; 63
    4c88:	cd bf       	out	0x3d, r28	; 61
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	1f 91       	pop	r17
    4c90:	0f 91       	pop	r16
    4c92:	08 95       	ret

00004c94 <AES_192_SF_Decrypt>:
    4c94:	1f 93       	push	r17
    4c96:	0f 93       	push	r16
    4c98:	ff 92       	push	r15
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    4c9e:	cd b7       	in	r28, 0x3d	; 61
    4ca0:	de b7       	in	r29, 0x3e	; 62
    4ca2:	25 97       	sbiw	r28, 0x05	; 5
    4ca4:	0f b6       	in	r0, 0x3f	; 63
    4ca6:	f8 94       	cli
    4ca8:	de bf       	out	0x3e, r29	; 62
    4caa:	0f be       	out	0x3f, r0	; 63
    4cac:	cd bf       	out	0x3d, r28	; 61
    4cae:	9d 83       	std	Y+5, r25	; 0x05
    4cb0:	8c 83       	std	Y+4, r24	; 0x04
    4cb2:	ab e0       	ldi	r26, 0x0B	; 11
    4cb4:	ab 83       	std	Y+3, r26	; 0x03
    4cb6:	60 91 13 05 	lds	r22, 0x0513
    4cba:	70 91 14 05 	lds	r23, 0x0514
    4cbe:	60 54       	subi	r22, 0x40	; 64
    4cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc2:	db 01       	movw	r26, r22
    4cc4:	50 97       	sbiw	r26, 0x10	; 16
    4cc6:	ba 83       	std	Y+2, r27	; 0x02
    4cc8:	a9 83       	std	Y+1, r26	; 0x01
    4cca:	40 e1       	ldi	r20, 0x10	; 16
    4ccc:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

00004cd0 <AES_Decrypt1>:
    4cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    4cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    4cd4:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    4cd8:	69 81       	ldd	r22, Y+1	; 0x01
    4cda:	7a 81       	ldd	r23, Y+2	; 0x02
    4cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    4cde:	9d 81       	ldd	r25, Y+5	; 0x05
    4ce0:	40 e1       	ldi	r20, 0x10	; 16
    4ce2:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <AES_SF_InvSubBytesAndXOR>
    4ce6:	89 81       	ldd	r24, Y+1	; 0x01
    4ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cea:	40 97       	sbiw	r24, 0x10	; 16
    4cec:	9a 83       	std	Y+2, r25	; 0x02
    4cee:	89 83       	std	Y+1, r24	; 0x01
    4cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    4cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    4cf4:	0e 94 3c 2c 	call	0x5878	; 0x5878 <AES_InvMixColumns>
    4cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cfa:	81 50       	subi	r24, 0x01	; 1
    4cfc:	8b 83       	std	Y+3, r24	; 0x03
    4cfe:	41 f7       	brne	.-48     	; 0x4cd0 <AES_Decrypt1>
    4d00:	8c 81       	ldd	r24, Y+4	; 0x04
    4d02:	9d 81       	ldd	r25, Y+5	; 0x05
    4d04:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    4d08:	69 81       	ldd	r22, Y+1	; 0x01
    4d0a:	7a 81       	ldd	r23, Y+2	; 0x02
    4d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d10:	40 e1       	ldi	r20, 0x10	; 16
    4d12:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <AES_SF_InvSubBytesAndXOR>
    4d16:	25 96       	adiw	r28, 0x05	; 5
    4d18:	0f b6       	in	r0, 0x3f	; 63
    4d1a:	f8 94       	cli
    4d1c:	de bf       	out	0x3e, r29	; 62
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	cd bf       	out	0x3d, r28	; 61
    4d22:	df 91       	pop	r29
    4d24:	cf 91       	pop	r28
    4d26:	ff 90       	pop	r15
    4d28:	0f 91       	pop	r16
    4d2a:	1f 91       	pop	r17
    4d2c:	08 95       	ret

00004d2e <AES_192_SF_Encrypt>:
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	cd b7       	in	r28, 0x3d	; 61
    4d38:	de b7       	in	r29, 0x3e	; 62
    4d3a:	25 97       	sbiw	r28, 0x05	; 5
    4d3c:	0f b6       	in	r0, 0x3f	; 63
    4d3e:	f8 94       	cli
    4d40:	de bf       	out	0x3e, r29	; 62
    4d42:	0f be       	out	0x3f, r0	; 63
    4d44:	cd bf       	out	0x3d, r28	; 61
    4d46:	9d 83       	std	Y+5, r25	; 0x05
    4d48:	8c 83       	std	Y+4, r24	; 0x04
    4d4a:	6b e0       	ldi	r22, 0x0B	; 11
    4d4c:	6b 83       	std	Y+3, r22	; 0x03
    4d4e:	60 91 13 05 	lds	r22, 0x0513
    4d52:	70 91 14 05 	lds	r23, 0x0514
    4d56:	db 01       	movw	r26, r22
    4d58:	50 96       	adiw	r26, 0x10	; 16
    4d5a:	ba 83       	std	Y+2, r27	; 0x02
    4d5c:	a9 83       	std	Y+1, r26	; 0x01
    4d5e:	40 e1       	ldi	r20, 0x10	; 16
    4d60:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

00004d64 <AESEncrypt1>:
    4d64:	8c 81       	ldd	r24, Y+4	; 0x04
    4d66:	9d 81       	ldd	r25, Y+5	; 0x05
    4d68:	60 e1       	ldi	r22, 0x10	; 16
    4d6a:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    4d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4d70:	9d 81       	ldd	r25, Y+5	; 0x05
    4d72:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    4d76:	8c 81       	ldd	r24, Y+4	; 0x04
    4d78:	9d 81       	ldd	r25, Y+5	; 0x05
    4d7a:	0e 94 c2 2b 	call	0x5784	; 0x5784 <AES_MixColumns>
    4d7e:	69 81       	ldd	r22, Y+1	; 0x01
    4d80:	7a 81       	ldd	r23, Y+2	; 0x02
    4d82:	cb 01       	movw	r24, r22
    4d84:	40 96       	adiw	r24, 0x10	; 16
    4d86:	9a 83       	std	Y+2, r25	; 0x02
    4d88:	89 83       	std	Y+1, r24	; 0x01
    4d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    4d8e:	40 e1       	ldi	r20, 0x10	; 16
    4d90:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4d94:	8b 81       	ldd	r24, Y+3	; 0x03
    4d96:	81 50       	subi	r24, 0x01	; 1
    4d98:	8b 83       	std	Y+3, r24	; 0x03
    4d9a:	21 f7       	brne	.-56     	; 0x4d64 <AESEncrypt1>
    4d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    4da0:	60 e1       	ldi	r22, 0x10	; 16
    4da2:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    4da6:	8c 81       	ldd	r24, Y+4	; 0x04
    4da8:	9d 81       	ldd	r25, Y+5	; 0x05
    4daa:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    4dae:	69 81       	ldd	r22, Y+1	; 0x01
    4db0:	7a 81       	ldd	r23, Y+2	; 0x02
    4db2:	8c 81       	ldd	r24, Y+4	; 0x04
    4db4:	9d 81       	ldd	r25, Y+5	; 0x05
    4db6:	40 e1       	ldi	r20, 0x10	; 16
    4db8:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4dbc:	25 96       	adiw	r28, 0x05	; 5
    4dbe:	0f b6       	in	r0, 0x3f	; 63
    4dc0:	f8 94       	cli
    4dc2:	de bf       	out	0x3e, r29	; 62
    4dc4:	0f be       	out	0x3f, r0	; 63
    4dc6:	cd bf       	out	0x3d, r28	; 61
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	1f 91       	pop	r17
    4dce:	0f 91       	pop	r16
    4dd0:	08 95       	ret

00004dd2 <AES_256_SF_Decrypt>:
    4dd2:	1f 93       	push	r17
    4dd4:	0f 93       	push	r16
    4dd6:	ff 92       	push	r15
    4dd8:	cf 93       	push	r28
    4dda:	df 93       	push	r29
    4ddc:	cd b7       	in	r28, 0x3d	; 61
    4dde:	de b7       	in	r29, 0x3e	; 62
    4de0:	25 97       	sbiw	r28, 0x05	; 5
    4de2:	0f b6       	in	r0, 0x3f	; 63
    4de4:	f8 94       	cli
    4de6:	de bf       	out	0x3e, r29	; 62
    4de8:	0f be       	out	0x3f, r0	; 63
    4dea:	cd bf       	out	0x3d, r28	; 61
    4dec:	9d 83       	std	Y+5, r25	; 0x05
    4dee:	8c 83       	std	Y+4, r24	; 0x04
    4df0:	ad e0       	ldi	r26, 0x0D	; 13
    4df2:	ab 83       	std	Y+3, r26	; 0x03
    4df4:	60 91 13 05 	lds	r22, 0x0513
    4df8:	70 91 14 05 	lds	r23, 0x0514
    4dfc:	60 52       	subi	r22, 0x20	; 32
    4dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    4e00:	db 01       	movw	r26, r22
    4e02:	50 97       	sbiw	r26, 0x10	; 16
    4e04:	ba 83       	std	Y+2, r27	; 0x02
    4e06:	a9 83       	std	Y+1, r26	; 0x01
    4e08:	40 e1       	ldi	r20, 0x10	; 16
    4e0a:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

00004e0e <AES_Decrypt1>:
    4e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e10:	9d 81       	ldd	r25, Y+5	; 0x05
    4e12:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    4e16:	69 81       	ldd	r22, Y+1	; 0x01
    4e18:	7a 81       	ldd	r23, Y+2	; 0x02
    4e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e1e:	40 e1       	ldi	r20, 0x10	; 16
    4e20:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <AES_SF_InvSubBytesAndXOR>
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
    4e26:	9a 81       	ldd	r25, Y+2	; 0x02
    4e28:	40 97       	sbiw	r24, 0x10	; 16
    4e2a:	9a 83       	std	Y+2, r25	; 0x02
    4e2c:	89 83       	std	Y+1, r24	; 0x01
    4e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e30:	9d 81       	ldd	r25, Y+5	; 0x05
    4e32:	0e 94 3c 2c 	call	0x5878	; 0x5878 <AES_InvMixColumns>
    4e36:	8b 81       	ldd	r24, Y+3	; 0x03
    4e38:	81 50       	subi	r24, 0x01	; 1
    4e3a:	8b 83       	std	Y+3, r24	; 0x03
    4e3c:	41 f7       	brne	.-48     	; 0x4e0e <AES_Decrypt1>
    4e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e40:	9d 81       	ldd	r25, Y+5	; 0x05
    4e42:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    4e46:	69 81       	ldd	r22, Y+1	; 0x01
    4e48:	7a 81       	ldd	r23, Y+2	; 0x02
    4e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e4e:	40 e1       	ldi	r20, 0x10	; 16
    4e50:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <AES_SF_InvSubBytesAndXOR>
    4e54:	25 96       	adiw	r28, 0x05	; 5
    4e56:	0f b6       	in	r0, 0x3f	; 63
    4e58:	f8 94       	cli
    4e5a:	de bf       	out	0x3e, r29	; 62
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	cd bf       	out	0x3d, r28	; 61
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	ff 90       	pop	r15
    4e66:	0f 91       	pop	r16
    4e68:	1f 91       	pop	r17
    4e6a:	08 95       	ret

00004e6c <AES_256_SF_Encrypt>:
    4e6c:	0f 93       	push	r16
    4e6e:	1f 93       	push	r17
    4e70:	cf 93       	push	r28
    4e72:	df 93       	push	r29
    4e74:	cd b7       	in	r28, 0x3d	; 61
    4e76:	de b7       	in	r29, 0x3e	; 62
    4e78:	25 97       	sbiw	r28, 0x05	; 5
    4e7a:	0f b6       	in	r0, 0x3f	; 63
    4e7c:	f8 94       	cli
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	cd bf       	out	0x3d, r28	; 61
    4e84:	9d 83       	std	Y+5, r25	; 0x05
    4e86:	8c 83       	std	Y+4, r24	; 0x04
    4e88:	6d e0       	ldi	r22, 0x0D	; 13
    4e8a:	6b 83       	std	Y+3, r22	; 0x03
    4e8c:	60 91 13 05 	lds	r22, 0x0513
    4e90:	70 91 14 05 	lds	r23, 0x0514
    4e94:	db 01       	movw	r26, r22
    4e96:	50 96       	adiw	r26, 0x10	; 16
    4e98:	ba 83       	std	Y+2, r27	; 0x02
    4e9a:	a9 83       	std	Y+1, r26	; 0x01
    4e9c:	40 e1       	ldi	r20, 0x10	; 16
    4e9e:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

00004ea2 <AESEncrypt1>:
    4ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ea6:	60 e1       	ldi	r22, 0x10	; 16
    4ea8:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    4eac:	8c 81       	ldd	r24, Y+4	; 0x04
    4eae:	9d 81       	ldd	r25, Y+5	; 0x05
    4eb0:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    4eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    4eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    4eb8:	0e 94 c2 2b 	call	0x5784	; 0x5784 <AES_MixColumns>
    4ebc:	69 81       	ldd	r22, Y+1	; 0x01
    4ebe:	7a 81       	ldd	r23, Y+2	; 0x02
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	40 96       	adiw	r24, 0x10	; 16
    4ec4:	9a 83       	std	Y+2, r25	; 0x02
    4ec6:	89 83       	std	Y+1, r24	; 0x01
    4ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eca:	9d 81       	ldd	r25, Y+5	; 0x05
    4ecc:	40 e1       	ldi	r20, 0x10	; 16
    4ece:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ed4:	81 50       	subi	r24, 0x01	; 1
    4ed6:	8b 83       	std	Y+3, r24	; 0x03
    4ed8:	21 f7       	brne	.-56     	; 0x4ea2 <AESEncrypt1>
    4eda:	8c 81       	ldd	r24, Y+4	; 0x04
    4edc:	9d 81       	ldd	r25, Y+5	; 0x05
    4ede:	60 e1       	ldi	r22, 0x10	; 16
    4ee0:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <AES_SF_SubBytes>
    4ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ee8:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    4eec:	69 81       	ldd	r22, Y+1	; 0x01
    4eee:	7a 81       	ldd	r23, Y+2	; 0x02
    4ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ef2:	9d 81       	ldd	r25, Y+5	; 0x05
    4ef4:	40 e1       	ldi	r20, 0x10	; 16
    4ef6:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    4efa:	25 96       	adiw	r28, 0x05	; 5
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	f8 94       	cli
    4f00:	de bf       	out	0x3e, r29	; 62
    4f02:	0f be       	out	0x3f, r0	; 63
    4f04:	cd bf       	out	0x3d, r28	; 61
    4f06:	df 91       	pop	r29
    4f08:	cf 91       	pop	r28
    4f0a:	1f 91       	pop	r17
    4f0c:	0f 91       	pop	r16
    4f0e:	08 95       	ret

00004f10 <AES_128_SR_Decrypt>:
    4f10:	1f 93       	push	r17
    4f12:	0f 93       	push	r16
    4f14:	ff 92       	push	r15
    4f16:	cf 93       	push	r28
    4f18:	df 93       	push	r29
    4f1a:	cd b7       	in	r28, 0x3d	; 61
    4f1c:	de b7       	in	r29, 0x3e	; 62
    4f1e:	25 97       	sbiw	r28, 0x05	; 5
    4f20:	0f b6       	in	r0, 0x3f	; 63
    4f22:	f8 94       	cli
    4f24:	de bf       	out	0x3e, r29	; 62
    4f26:	0f be       	out	0x3f, r0	; 63
    4f28:	cd bf       	out	0x3d, r28	; 61
    4f2a:	9d 83       	std	Y+5, r25	; 0x05
    4f2c:	8c 83       	std	Y+4, r24	; 0x04
    4f2e:	a9 e0       	ldi	r26, 0x09	; 9
    4f30:	ab 83       	std	Y+3, r26	; 0x03
    4f32:	60 91 13 05 	lds	r22, 0x0513
    4f36:	70 91 14 05 	lds	r23, 0x0514
    4f3a:	60 56       	subi	r22, 0x60	; 96
    4f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f3e:	db 01       	movw	r26, r22
    4f40:	50 97       	sbiw	r26, 0x10	; 16
    4f42:	ba 83       	std	Y+2, r27	; 0x02
    4f44:	a9 83       	std	Y+1, r26	; 0x01
    4f46:	40 e1       	ldi	r20, 0x10	; 16
    4f48:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

00004f4c <AES_Decrypt1>:
    4f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    4f50:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    4f54:	69 81       	ldd	r22, Y+1	; 0x01
    4f56:	7a 81       	ldd	r23, Y+2	; 0x02
    4f58:	8c 81       	ldd	r24, Y+4	; 0x04
    4f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    4f5c:	40 e1       	ldi	r20, 0x10	; 16
    4f5e:	0e 94 80 2b 	call	0x5700	; 0x5700 <AES_SR_InvSubBytesAndXOR>
    4f62:	89 81       	ldd	r24, Y+1	; 0x01
    4f64:	9a 81       	ldd	r25, Y+2	; 0x02
    4f66:	40 97       	sbiw	r24, 0x10	; 16
    4f68:	9a 83       	std	Y+2, r25	; 0x02
    4f6a:	89 83       	std	Y+1, r24	; 0x01
    4f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    4f70:	0e 94 3c 2c 	call	0x5878	; 0x5878 <AES_InvMixColumns>
    4f74:	8b 81       	ldd	r24, Y+3	; 0x03
    4f76:	81 50       	subi	r24, 0x01	; 1
    4f78:	8b 83       	std	Y+3, r24	; 0x03
    4f7a:	41 f7       	brne	.-48     	; 0x4f4c <AES_Decrypt1>
    4f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    4f80:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    4f84:	69 81       	ldd	r22, Y+1	; 0x01
    4f86:	7a 81       	ldd	r23, Y+2	; 0x02
    4f88:	8c 81       	ldd	r24, Y+4	; 0x04
    4f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    4f8c:	40 e1       	ldi	r20, 0x10	; 16
    4f8e:	0e 94 80 2b 	call	0x5700	; 0x5700 <AES_SR_InvSubBytesAndXOR>
    4f92:	25 96       	adiw	r28, 0x05	; 5
    4f94:	0f b6       	in	r0, 0x3f	; 63
    4f96:	f8 94       	cli
    4f98:	de bf       	out	0x3e, r29	; 62
    4f9a:	0f be       	out	0x3f, r0	; 63
    4f9c:	cd bf       	out	0x3d, r28	; 61
    4f9e:	df 91       	pop	r29
    4fa0:	cf 91       	pop	r28
    4fa2:	ff 90       	pop	r15
    4fa4:	0f 91       	pop	r16
    4fa6:	1f 91       	pop	r17
    4fa8:	08 95       	ret

00004faa <AES_128_SR_Encrypt>:
    4faa:	0f 93       	push	r16
    4fac:	1f 93       	push	r17
    4fae:	cf 93       	push	r28
    4fb0:	df 93       	push	r29
    4fb2:	cd b7       	in	r28, 0x3d	; 61
    4fb4:	de b7       	in	r29, 0x3e	; 62
    4fb6:	25 97       	sbiw	r28, 0x05	; 5
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	f8 94       	cli
    4fbc:	de bf       	out	0x3e, r29	; 62
    4fbe:	0f be       	out	0x3f, r0	; 63
    4fc0:	cd bf       	out	0x3d, r28	; 61
    4fc2:	9d 83       	std	Y+5, r25	; 0x05
    4fc4:	8c 83       	std	Y+4, r24	; 0x04
    4fc6:	69 e0       	ldi	r22, 0x09	; 9
    4fc8:	6b 83       	std	Y+3, r22	; 0x03
    4fca:	60 91 13 05 	lds	r22, 0x0513
    4fce:	70 91 14 05 	lds	r23, 0x0514
    4fd2:	db 01       	movw	r26, r22
    4fd4:	50 96       	adiw	r26, 0x10	; 16
    4fd6:	ba 83       	std	Y+2, r27	; 0x02
    4fd8:	a9 83       	std	Y+1, r26	; 0x01
    4fda:	40 e1       	ldi	r20, 0x10	; 16
    4fdc:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

00004fe0 <AESEncrypt1>:
    4fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    4fe4:	60 e1       	ldi	r22, 0x10	; 16
    4fe6:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    4fea:	8c 81       	ldd	r24, Y+4	; 0x04
    4fec:	9d 81       	ldd	r25, Y+5	; 0x05
    4fee:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    4ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ff6:	0e 94 c2 2b 	call	0x5784	; 0x5784 <AES_MixColumns>
    4ffa:	69 81       	ldd	r22, Y+1	; 0x01
    4ffc:	7a 81       	ldd	r23, Y+2	; 0x02
    4ffe:	cb 01       	movw	r24, r22
    5000:	40 96       	adiw	r24, 0x10	; 16
    5002:	9a 83       	std	Y+2, r25	; 0x02
    5004:	89 83       	std	Y+1, r24	; 0x01
    5006:	8c 81       	ldd	r24, Y+4	; 0x04
    5008:	9d 81       	ldd	r25, Y+5	; 0x05
    500a:	40 e1       	ldi	r20, 0x10	; 16
    500c:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    5010:	8b 81       	ldd	r24, Y+3	; 0x03
    5012:	81 50       	subi	r24, 0x01	; 1
    5014:	8b 83       	std	Y+3, r24	; 0x03
    5016:	21 f7       	brne	.-56     	; 0x4fe0 <AESEncrypt1>
    5018:	8c 81       	ldd	r24, Y+4	; 0x04
    501a:	9d 81       	ldd	r25, Y+5	; 0x05
    501c:	60 e1       	ldi	r22, 0x10	; 16
    501e:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    5022:	8c 81       	ldd	r24, Y+4	; 0x04
    5024:	9d 81       	ldd	r25, Y+5	; 0x05
    5026:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    502a:	69 81       	ldd	r22, Y+1	; 0x01
    502c:	7a 81       	ldd	r23, Y+2	; 0x02
    502e:	8c 81       	ldd	r24, Y+4	; 0x04
    5030:	9d 81       	ldd	r25, Y+5	; 0x05
    5032:	40 e1       	ldi	r20, 0x10	; 16
    5034:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    5038:	25 96       	adiw	r28, 0x05	; 5
    503a:	0f b6       	in	r0, 0x3f	; 63
    503c:	f8 94       	cli
    503e:	de bf       	out	0x3e, r29	; 62
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	cd bf       	out	0x3d, r28	; 61
    5044:	df 91       	pop	r29
    5046:	cf 91       	pop	r28
    5048:	1f 91       	pop	r17
    504a:	0f 91       	pop	r16
    504c:	08 95       	ret

0000504e <AES_192_SR_Decrypt>:
    504e:	1f 93       	push	r17
    5050:	0f 93       	push	r16
    5052:	ff 92       	push	r15
    5054:	cf 93       	push	r28
    5056:	df 93       	push	r29
    5058:	cd b7       	in	r28, 0x3d	; 61
    505a:	de b7       	in	r29, 0x3e	; 62
    505c:	25 97       	sbiw	r28, 0x05	; 5
    505e:	0f b6       	in	r0, 0x3f	; 63
    5060:	f8 94       	cli
    5062:	de bf       	out	0x3e, r29	; 62
    5064:	0f be       	out	0x3f, r0	; 63
    5066:	cd bf       	out	0x3d, r28	; 61
    5068:	9d 83       	std	Y+5, r25	; 0x05
    506a:	8c 83       	std	Y+4, r24	; 0x04
    506c:	ab e0       	ldi	r26, 0x0B	; 11
    506e:	ab 83       	std	Y+3, r26	; 0x03
    5070:	60 91 13 05 	lds	r22, 0x0513
    5074:	70 91 14 05 	lds	r23, 0x0514
    5078:	60 54       	subi	r22, 0x40	; 64
    507a:	7f 4f       	sbci	r23, 0xFF	; 255
    507c:	db 01       	movw	r26, r22
    507e:	50 97       	sbiw	r26, 0x10	; 16
    5080:	ba 83       	std	Y+2, r27	; 0x02
    5082:	a9 83       	std	Y+1, r26	; 0x01
    5084:	40 e1       	ldi	r20, 0x10	; 16
    5086:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

0000508a <AES_Decrypt1>:
    508a:	8c 81       	ldd	r24, Y+4	; 0x04
    508c:	9d 81       	ldd	r25, Y+5	; 0x05
    508e:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    5092:	69 81       	ldd	r22, Y+1	; 0x01
    5094:	7a 81       	ldd	r23, Y+2	; 0x02
    5096:	8c 81       	ldd	r24, Y+4	; 0x04
    5098:	9d 81       	ldd	r25, Y+5	; 0x05
    509a:	40 e1       	ldi	r20, 0x10	; 16
    509c:	0e 94 80 2b 	call	0x5700	; 0x5700 <AES_SR_InvSubBytesAndXOR>
    50a0:	89 81       	ldd	r24, Y+1	; 0x01
    50a2:	9a 81       	ldd	r25, Y+2	; 0x02
    50a4:	40 97       	sbiw	r24, 0x10	; 16
    50a6:	9a 83       	std	Y+2, r25	; 0x02
    50a8:	89 83       	std	Y+1, r24	; 0x01
    50aa:	8c 81       	ldd	r24, Y+4	; 0x04
    50ac:	9d 81       	ldd	r25, Y+5	; 0x05
    50ae:	0e 94 3c 2c 	call	0x5878	; 0x5878 <AES_InvMixColumns>
    50b2:	8b 81       	ldd	r24, Y+3	; 0x03
    50b4:	81 50       	subi	r24, 0x01	; 1
    50b6:	8b 83       	std	Y+3, r24	; 0x03
    50b8:	41 f7       	brne	.-48     	; 0x508a <AES_Decrypt1>
    50ba:	8c 81       	ldd	r24, Y+4	; 0x04
    50bc:	9d 81       	ldd	r25, Y+5	; 0x05
    50be:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    50c2:	69 81       	ldd	r22, Y+1	; 0x01
    50c4:	7a 81       	ldd	r23, Y+2	; 0x02
    50c6:	8c 81       	ldd	r24, Y+4	; 0x04
    50c8:	9d 81       	ldd	r25, Y+5	; 0x05
    50ca:	40 e1       	ldi	r20, 0x10	; 16
    50cc:	0e 94 80 2b 	call	0x5700	; 0x5700 <AES_SR_InvSubBytesAndXOR>
    50d0:	25 96       	adiw	r28, 0x05	; 5
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	f8 94       	cli
    50d6:	de bf       	out	0x3e, r29	; 62
    50d8:	0f be       	out	0x3f, r0	; 63
    50da:	cd bf       	out	0x3d, r28	; 61
    50dc:	df 91       	pop	r29
    50de:	cf 91       	pop	r28
    50e0:	ff 90       	pop	r15
    50e2:	0f 91       	pop	r16
    50e4:	1f 91       	pop	r17
    50e6:	08 95       	ret

000050e8 <AES_192_SR_Encrypt>:
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	df 93       	push	r29
    50f0:	cd b7       	in	r28, 0x3d	; 61
    50f2:	de b7       	in	r29, 0x3e	; 62
    50f4:	25 97       	sbiw	r28, 0x05	; 5
    50f6:	0f b6       	in	r0, 0x3f	; 63
    50f8:	f8 94       	cli
    50fa:	de bf       	out	0x3e, r29	; 62
    50fc:	0f be       	out	0x3f, r0	; 63
    50fe:	cd bf       	out	0x3d, r28	; 61
    5100:	9d 83       	std	Y+5, r25	; 0x05
    5102:	8c 83       	std	Y+4, r24	; 0x04
    5104:	6b e0       	ldi	r22, 0x0B	; 11
    5106:	6b 83       	std	Y+3, r22	; 0x03
    5108:	60 91 13 05 	lds	r22, 0x0513
    510c:	70 91 14 05 	lds	r23, 0x0514
    5110:	db 01       	movw	r26, r22
    5112:	50 96       	adiw	r26, 0x10	; 16
    5114:	ba 83       	std	Y+2, r27	; 0x02
    5116:	a9 83       	std	Y+1, r26	; 0x01
    5118:	40 e1       	ldi	r20, 0x10	; 16
    511a:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

0000511e <AESEncrypt1>:
    511e:	8c 81       	ldd	r24, Y+4	; 0x04
    5120:	9d 81       	ldd	r25, Y+5	; 0x05
    5122:	60 e1       	ldi	r22, 0x10	; 16
    5124:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    5128:	8c 81       	ldd	r24, Y+4	; 0x04
    512a:	9d 81       	ldd	r25, Y+5	; 0x05
    512c:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    5130:	8c 81       	ldd	r24, Y+4	; 0x04
    5132:	9d 81       	ldd	r25, Y+5	; 0x05
    5134:	0e 94 c2 2b 	call	0x5784	; 0x5784 <AES_MixColumns>
    5138:	69 81       	ldd	r22, Y+1	; 0x01
    513a:	7a 81       	ldd	r23, Y+2	; 0x02
    513c:	cb 01       	movw	r24, r22
    513e:	40 96       	adiw	r24, 0x10	; 16
    5140:	9a 83       	std	Y+2, r25	; 0x02
    5142:	89 83       	std	Y+1, r24	; 0x01
    5144:	8c 81       	ldd	r24, Y+4	; 0x04
    5146:	9d 81       	ldd	r25, Y+5	; 0x05
    5148:	40 e1       	ldi	r20, 0x10	; 16
    514a:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    514e:	8b 81       	ldd	r24, Y+3	; 0x03
    5150:	81 50       	subi	r24, 0x01	; 1
    5152:	8b 83       	std	Y+3, r24	; 0x03
    5154:	21 f7       	brne	.-56     	; 0x511e <AESEncrypt1>
    5156:	8c 81       	ldd	r24, Y+4	; 0x04
    5158:	9d 81       	ldd	r25, Y+5	; 0x05
    515a:	60 e1       	ldi	r22, 0x10	; 16
    515c:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    5160:	8c 81       	ldd	r24, Y+4	; 0x04
    5162:	9d 81       	ldd	r25, Y+5	; 0x05
    5164:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    5168:	69 81       	ldd	r22, Y+1	; 0x01
    516a:	7a 81       	ldd	r23, Y+2	; 0x02
    516c:	8c 81       	ldd	r24, Y+4	; 0x04
    516e:	9d 81       	ldd	r25, Y+5	; 0x05
    5170:	40 e1       	ldi	r20, 0x10	; 16
    5172:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    5176:	25 96       	adiw	r28, 0x05	; 5
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	f8 94       	cli
    517c:	de bf       	out	0x3e, r29	; 62
    517e:	0f be       	out	0x3f, r0	; 63
    5180:	cd bf       	out	0x3d, r28	; 61
    5182:	df 91       	pop	r29
    5184:	cf 91       	pop	r28
    5186:	1f 91       	pop	r17
    5188:	0f 91       	pop	r16
    518a:	08 95       	ret

0000518c <AES_256_SR_Decrypt>:
    518c:	1f 93       	push	r17
    518e:	0f 93       	push	r16
    5190:	ff 92       	push	r15
    5192:	cf 93       	push	r28
    5194:	df 93       	push	r29
    5196:	cd b7       	in	r28, 0x3d	; 61
    5198:	de b7       	in	r29, 0x3e	; 62
    519a:	25 97       	sbiw	r28, 0x05	; 5
    519c:	0f b6       	in	r0, 0x3f	; 63
    519e:	f8 94       	cli
    51a0:	de bf       	out	0x3e, r29	; 62
    51a2:	0f be       	out	0x3f, r0	; 63
    51a4:	cd bf       	out	0x3d, r28	; 61
    51a6:	9d 83       	std	Y+5, r25	; 0x05
    51a8:	8c 83       	std	Y+4, r24	; 0x04
    51aa:	ad e0       	ldi	r26, 0x0D	; 13
    51ac:	ab 83       	std	Y+3, r26	; 0x03
    51ae:	60 91 13 05 	lds	r22, 0x0513
    51b2:	70 91 14 05 	lds	r23, 0x0514
    51b6:	60 52       	subi	r22, 0x20	; 32
    51b8:	7f 4f       	sbci	r23, 0xFF	; 255
    51ba:	db 01       	movw	r26, r22
    51bc:	50 97       	sbiw	r26, 0x10	; 16
    51be:	ba 83       	std	Y+2, r27	; 0x02
    51c0:	a9 83       	std	Y+1, r26	; 0x01
    51c2:	40 e1       	ldi	r20, 0x10	; 16
    51c4:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

000051c8 <AES_Decrypt1>:
    51c8:	8c 81       	ldd	r24, Y+4	; 0x04
    51ca:	9d 81       	ldd	r25, Y+5	; 0x05
    51cc:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    51d0:	69 81       	ldd	r22, Y+1	; 0x01
    51d2:	7a 81       	ldd	r23, Y+2	; 0x02
    51d4:	8c 81       	ldd	r24, Y+4	; 0x04
    51d6:	9d 81       	ldd	r25, Y+5	; 0x05
    51d8:	40 e1       	ldi	r20, 0x10	; 16
    51da:	0e 94 80 2b 	call	0x5700	; 0x5700 <AES_SR_InvSubBytesAndXOR>
    51de:	89 81       	ldd	r24, Y+1	; 0x01
    51e0:	9a 81       	ldd	r25, Y+2	; 0x02
    51e2:	40 97       	sbiw	r24, 0x10	; 16
    51e4:	9a 83       	std	Y+2, r25	; 0x02
    51e6:	89 83       	std	Y+1, r24	; 0x01
    51e8:	8c 81       	ldd	r24, Y+4	; 0x04
    51ea:	9d 81       	ldd	r25, Y+5	; 0x05
    51ec:	0e 94 3c 2c 	call	0x5878	; 0x5878 <AES_InvMixColumns>
    51f0:	8b 81       	ldd	r24, Y+3	; 0x03
    51f2:	81 50       	subi	r24, 0x01	; 1
    51f4:	8b 83       	std	Y+3, r24	; 0x03
    51f6:	41 f7       	brne	.-48     	; 0x51c8 <AES_Decrypt1>
    51f8:	8c 81       	ldd	r24, Y+4	; 0x04
    51fa:	9d 81       	ldd	r25, Y+5	; 0x05
    51fc:	0e 94 46 2c 	call	0x588c	; 0x588c <AES_InvShiftRows>
    5200:	69 81       	ldd	r22, Y+1	; 0x01
    5202:	7a 81       	ldd	r23, Y+2	; 0x02
    5204:	8c 81       	ldd	r24, Y+4	; 0x04
    5206:	9d 81       	ldd	r25, Y+5	; 0x05
    5208:	40 e1       	ldi	r20, 0x10	; 16
    520a:	0e 94 80 2b 	call	0x5700	; 0x5700 <AES_SR_InvSubBytesAndXOR>
    520e:	25 96       	adiw	r28, 0x05	; 5
    5210:	0f b6       	in	r0, 0x3f	; 63
    5212:	f8 94       	cli
    5214:	de bf       	out	0x3e, r29	; 62
    5216:	0f be       	out	0x3f, r0	; 63
    5218:	cd bf       	out	0x3d, r28	; 61
    521a:	df 91       	pop	r29
    521c:	cf 91       	pop	r28
    521e:	ff 90       	pop	r15
    5220:	0f 91       	pop	r16
    5222:	1f 91       	pop	r17
    5224:	08 95       	ret

00005226 <AES_256_SR_Encrypt>:
    5226:	0f 93       	push	r16
    5228:	1f 93       	push	r17
    522a:	cf 93       	push	r28
    522c:	df 93       	push	r29
    522e:	cd b7       	in	r28, 0x3d	; 61
    5230:	de b7       	in	r29, 0x3e	; 62
    5232:	25 97       	sbiw	r28, 0x05	; 5
    5234:	0f b6       	in	r0, 0x3f	; 63
    5236:	f8 94       	cli
    5238:	de bf       	out	0x3e, r29	; 62
    523a:	0f be       	out	0x3f, r0	; 63
    523c:	cd bf       	out	0x3d, r28	; 61
    523e:	9d 83       	std	Y+5, r25	; 0x05
    5240:	8c 83       	std	Y+4, r24	; 0x04
    5242:	6d e0       	ldi	r22, 0x0D	; 13
    5244:	6b 83       	std	Y+3, r22	; 0x03
    5246:	60 91 13 05 	lds	r22, 0x0513
    524a:	70 91 14 05 	lds	r23, 0x0514
    524e:	db 01       	movw	r26, r22
    5250:	50 96       	adiw	r26, 0x10	; 16
    5252:	ba 83       	std	Y+2, r27	; 0x02
    5254:	a9 83       	std	Y+1, r26	; 0x01
    5256:	40 e1       	ldi	r20, 0x10	; 16
    5258:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>

0000525c <AESEncrypt1>:
    525c:	8c 81       	ldd	r24, Y+4	; 0x04
    525e:	9d 81       	ldd	r25, Y+5	; 0x05
    5260:	60 e1       	ldi	r22, 0x10	; 16
    5262:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    5266:	8c 81       	ldd	r24, Y+4	; 0x04
    5268:	9d 81       	ldd	r25, Y+5	; 0x05
    526a:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    526e:	8c 81       	ldd	r24, Y+4	; 0x04
    5270:	9d 81       	ldd	r25, Y+5	; 0x05
    5272:	0e 94 c2 2b 	call	0x5784	; 0x5784 <AES_MixColumns>
    5276:	69 81       	ldd	r22, Y+1	; 0x01
    5278:	7a 81       	ldd	r23, Y+2	; 0x02
    527a:	cb 01       	movw	r24, r22
    527c:	40 96       	adiw	r24, 0x10	; 16
    527e:	9a 83       	std	Y+2, r25	; 0x02
    5280:	89 83       	std	Y+1, r24	; 0x01
    5282:	8c 81       	ldd	r24, Y+4	; 0x04
    5284:	9d 81       	ldd	r25, Y+5	; 0x05
    5286:	40 e1       	ldi	r20, 0x10	; 16
    5288:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	81 50       	subi	r24, 0x01	; 1
    5290:	8b 83       	std	Y+3, r24	; 0x03
    5292:	21 f7       	brne	.-56     	; 0x525c <AESEncrypt1>
    5294:	8c 81       	ldd	r24, Y+4	; 0x04
    5296:	9d 81       	ldd	r25, Y+5	; 0x05
    5298:	60 e1       	ldi	r22, 0x10	; 16
    529a:	0e 94 5f 2b 	call	0x56be	; 0x56be <AES_SR_SubBytes>
    529e:	8c 81       	ldd	r24, Y+4	; 0x04
    52a0:	9d 81       	ldd	r25, Y+5	; 0x05
    52a2:	0e 94 cc 2b 	call	0x5798	; 0x5798 <AES_ShiftRows>
    52a6:	69 81       	ldd	r22, Y+1	; 0x01
    52a8:	7a 81       	ldd	r23, Y+2	; 0x02
    52aa:	8c 81       	ldd	r24, Y+4	; 0x04
    52ac:	9d 81       	ldd	r25, Y+5	; 0x05
    52ae:	40 e1       	ldi	r20, 0x10	; 16
    52b0:	0e 94 1b 2b 	call	0x5636	; 0x5636 <AES_XORBytes>
    52b4:	25 96       	adiw	r28, 0x05	; 5
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	de bf       	out	0x3e, r29	; 62
    52bc:	0f be       	out	0x3f, r0	; 63
    52be:	cd bf       	out	0x3d, r28	; 61
    52c0:	df 91       	pop	r29
    52c2:	cf 91       	pop	r28
    52c4:	1f 91       	pop	r17
    52c6:	0f 91       	pop	r16
    52c8:	08 95       	ret

000052ca <mem_clr>:
    52ca:	11 92       	st	Z+, r1
    52cc:	6a 95       	dec	r22
    52ce:	e9 f7       	brne	.-6      	; 0x52ca <mem_clr>
    52d0:	08 95       	ret

000052d2 <memory_copy>:
    52d2:	01 90       	ld	r0, Z+
    52d4:	0d 92       	st	X+, r0
    52d6:	4a 95       	dec	r20
    52d8:	e1 f7       	brne	.-8      	; 0x52d2 <memory_copy>
    52da:	08 95       	ret

000052dc <des_Input_mem_ex>:
    52dc:	a7 ef       	ldi	r26, 0xF7	; 247
    52de:	b4 e0       	ldi	r27, 0x04	; 4
    52e0:	eb ef       	ldi	r30, 0xFB	; 251
    52e2:	f4 e0       	ldi	r31, 0x04	; 4
    52e4:	44 e0       	ldi	r20, 0x04	; 4

000052e6 <mem_ex1>:
    52e6:	20 81       	ld	r18, Z
    52e8:	3c 91       	ld	r19, X
    52ea:	31 93       	st	Z+, r19
    52ec:	2d 93       	st	X+, r18
    52ee:	4a 95       	dec	r20
    52f0:	d1 f7       	brne	.-12     	; 0x52e6 <mem_ex1>
    52f2:	08 95       	ret

000052f4 <des_frement>:
    52f4:	44 e0       	ldi	r20, 0x04	; 4
    52f6:	eb ef       	ldi	r30, 0xFB	; 251
    52f8:	f4 e0       	ldi	r31, 0x04	; 4
    52fa:	a7 e0       	ldi	r26, 0x07	; 7
    52fc:	b5 e0       	ldi	r27, 0x05	; 5
    52fe:	e9 df       	rcall	.-46     	; 0x52d2 <memory_copy>
    5300:	82 2f       	mov	r24, r18
    5302:	46 d0       	rcall	.+140    	; 0x5390 <fonction>
    5304:	ab e0       	ldi	r26, 0x0B	; 11
    5306:	b5 e0       	ldi	r27, 0x05	; 5
    5308:	c7 ef       	ldi	r28, 0xF7	; 247
    530a:	d4 e0       	ldi	r29, 0x04	; 4
    530c:	eb ef       	ldi	r30, 0xFB	; 251
    530e:	f4 e0       	ldi	r31, 0x04	; 4
    5310:	44 e0       	ldi	r20, 0x04	; 4

00005312 <frement1>:
    5312:	2d 91       	ld	r18, X+
    5314:	39 91       	ld	r19, Y+
    5316:	23 27       	eor	r18, r19
    5318:	21 93       	st	Z+, r18
    531a:	4a 95       	dec	r20
    531c:	d1 f7       	brne	.-12     	; 0x5312 <frement1>
    531e:	44 e0       	ldi	r20, 0x04	; 4
    5320:	e7 e0       	ldi	r30, 0x07	; 7
    5322:	f5 e0       	ldi	r31, 0x05	; 5
    5324:	a7 ef       	ldi	r26, 0xF7	; 247
    5326:	b4 e0       	ldi	r27, 0x04	; 4
    5328:	d4 cf       	rjmp	.-88     	; 0x52d2 <memory_copy>

0000532a <des_permutation>:
    532a:	48 e0       	ldi	r20, 0x08	; 8
    532c:	e7 ef       	ldi	r30, 0xF7	; 247
    532e:	f4 e0       	ldi	r31, 0x04	; 4
    5330:	a7 e0       	ldi	r26, 0x07	; 7
    5332:	b5 e0       	ldi	r27, 0x05	; 5
    5334:	ce df       	rcall	.-100    	; 0x52d2 <memory_copy>
    5336:	68 e0       	ldi	r22, 0x08	; 8
    5338:	e7 ef       	ldi	r30, 0xF7	; 247
    533a:	f4 e0       	ldi	r31, 0x04	; 4
    533c:	c6 df       	rcall	.-116    	; 0x52ca <mem_clr>
    533e:	fc 01       	movw	r30, r24
    5340:	00 27       	eor	r16, r16

00005342 <permut1>:
    5342:	a0 2f       	mov	r26, r16
    5344:	a6 95       	lsr	r26
    5346:	a6 95       	lsr	r26
    5348:	a6 95       	lsr	r26
    534a:	bb 27       	eor	r27, r27
    534c:	a9 5f       	subi	r26, 0xF9	; 249
    534e:	ba 4f       	sbci	r27, 0xFA	; 250
    5350:	4c 91       	ld	r20, X
    5352:	20 2f       	mov	r18, r16
    5354:	27 70       	andi	r18, 0x07	; 7
    5356:	80 e8       	ldi	r24, 0x80	; 128
    5358:	01 c0       	rjmp	.+2      	; 0x535c <permut4>

0000535a <permut5>:
    535a:	86 95       	lsr	r24

0000535c <permut4>:
    535c:	2a 95       	dec	r18
    535e:	ea f7       	brpl	.-6      	; 0x535a <permut5>
    5360:	84 23       	and	r24, r20
    5362:	89 f0       	breq	.+34     	; 0x5386 <permut8>
    5364:	24 91       	lpm	r18, Z+
    5366:	a2 2f       	mov	r26, r18
    5368:	a6 95       	lsr	r26
    536a:	a6 95       	lsr	r26
    536c:	a6 95       	lsr	r26
    536e:	bb 27       	eor	r27, r27
    5370:	a9 50       	subi	r26, 0x09	; 9
    5372:	bb 4f       	sbci	r27, 0xFB	; 251
    5374:	27 70       	andi	r18, 0x07	; 7
    5376:	80 e8       	ldi	r24, 0x80	; 128
    5378:	01 c0       	rjmp	.+2      	; 0x537c <permut10>

0000537a <permut9>:
    537a:	86 95       	lsr	r24

0000537c <permut10>:
    537c:	2a 95       	dec	r18
    537e:	ea f7       	brpl	.-6      	; 0x537a <permut9>
    5380:	2c 91       	ld	r18, X
    5382:	82 2b       	or	r24, r18
    5384:	8c 93       	st	X, r24

00005386 <permut8>:
    5386:	31 96       	adiw	r30, 0x01	; 1
    5388:	03 95       	inc	r16
    538a:	00 34       	cpi	r16, 0x40	; 64
    538c:	d0 f2       	brcs	.-76     	; 0x5342 <permut1>

0000538e <permut2>:
    538e:	08 95       	ret

00005390 <fonction>:
    5390:	99 27       	eor	r25, r25
    5392:	8b 56       	subi	r24, 0x6B	; 107
    5394:	9b 4f       	sbci	r25, 0xFB	; 251
    5396:	90 93 f6 04 	sts	0x04F6, r25
    539a:	80 93 f5 04 	sts	0x04F5, r24
    539e:	64 e0       	ldi	r22, 0x04	; 4
    53a0:	eb e0       	ldi	r30, 0x0B	; 11
    53a2:	f5 e0       	ldi	r31, 0x05	; 5
    53a4:	92 df       	rcall	.-220    	; 0x52ca <mem_clr>
    53a6:	44 27       	eor	r20, r20
    53a8:	ce e1       	ldi	r28, 0x1E	; 30
    53aa:	de e0       	ldi	r29, 0x0E	; 14
    53ac:	77 27       	eor	r23, r23

000053ae <fonction3>:
    53ae:	78 30       	cpi	r23, 0x08	; 8
    53b0:	08 f0       	brcs	.+2      	; 0x53b4 <fonction1>
    53b2:	4a c0       	rjmp	.+148    	; 0x5448 <fonction2>

000053b4 <fonction1>:
    53b4:	4a d0       	rcall	.+148    	; 0x544a <get_bit_input_knns>
    53b6:	12 95       	swap	r17
    53b8:	11 0f       	add	r17, r17
    53ba:	51 2f       	mov	r21, r17
    53bc:	43 95       	inc	r20
    53be:	45 d0       	rcall	.+138    	; 0x544a <get_bit_input_knns>
    53c0:	11 0f       	add	r17, r17
    53c2:	11 0f       	add	r17, r17
    53c4:	11 0f       	add	r17, r17
    53c6:	51 0f       	add	r21, r17
    53c8:	43 95       	inc	r20
    53ca:	3f d0       	rcall	.+126    	; 0x544a <get_bit_input_knns>
    53cc:	11 0f       	add	r17, r17
    53ce:	11 0f       	add	r17, r17
    53d0:	51 0f       	add	r21, r17
    53d2:	43 95       	inc	r20
    53d4:	3a d0       	rcall	.+116    	; 0x544a <get_bit_input_knns>
    53d6:	11 0f       	add	r17, r17
    53d8:	51 0f       	add	r21, r17
    53da:	43 95       	inc	r20
    53dc:	36 d0       	rcall	.+108    	; 0x544a <get_bit_input_knns>
    53de:	51 0f       	add	r21, r17
    53e0:	43 95       	inc	r20
    53e2:	33 d0       	rcall	.+102    	; 0x544a <get_bit_input_knns>
    53e4:	12 95       	swap	r17
    53e6:	51 0f       	add	r21, r17
    53e8:	43 95       	inc	r20
    53ea:	e7 2f       	mov	r30, r23
    53ec:	e2 95       	swap	r30
    53ee:	ee 0f       	add	r30, r30
    53f0:	ff 27       	eor	r31, r31
    53f2:	35 2f       	mov	r19, r21
    53f4:	36 95       	lsr	r19
    53f6:	e3 0f       	add	r30, r19
    53f8:	ea 55       	subi	r30, 0x5A	; 90
    53fa:	f1 4f       	sbci	r31, 0xF1	; 241
    53fc:	a4 91       	lpm	r26, Z+
    53fe:	35 2f       	mov	r19, r21
    5400:	36 95       	lsr	r19
    5402:	08 f0       	brcs	.+2      	; 0x5406 <fonction7A>
    5404:	a2 95       	swap	r26

00005406 <fonction7A>:
    5406:	af 70       	andi	r26, 0x0F	; 15
    5408:	55 27       	eor	r21, r21

0000540a <fonction7>:
    540a:	54 30       	cpi	r21, 0x04	; 4
    540c:	08 f0       	brcs	.+2      	; 0x5410 <fonction5>
    540e:	1a c0       	rjmp	.+52     	; 0x5444 <fonction6>

00005410 <fonction5>:
    5410:	fe 01       	movw	r30, r28
    5412:	25 91       	lpm	r18, Z+
    5414:	ef 01       	movw	r28, r30
    5416:	8a 2f       	mov	r24, r26
    5418:	98 e0       	ldi	r25, 0x08	; 8
    541a:	89 23       	and	r24, r25
    541c:	81 f0       	breq	.+32     	; 0x543e <fonction8>
    541e:	e2 2f       	mov	r30, r18
    5420:	ff 27       	eor	r31, r31
    5422:	e6 95       	lsr	r30
    5424:	e6 95       	lsr	r30
    5426:	e6 95       	lsr	r30
    5428:	e9 5f       	subi	r30, 0xF9	; 249
    542a:	fa 4f       	sbci	r31, 0xFA	; 250
    542c:	27 70       	andi	r18, 0x07	; 7
    542e:	80 e8       	ldi	r24, 0x80	; 128
    5430:	01 c0       	rjmp	.+2      	; 0x5434 <fonction9>

00005432 <fonction10>:
    5432:	86 95       	lsr	r24

00005434 <fonction9>:
    5434:	2a 95       	dec	r18
    5436:	ea f7       	brpl	.-6      	; 0x5432 <fonction10>
    5438:	20 81       	ld	r18, Z
    543a:	28 2b       	or	r18, r24
    543c:	20 83       	st	Z, r18

0000543e <fonction8>:
    543e:	aa 0f       	add	r26, r26
    5440:	53 95       	inc	r21
    5442:	e3 cf       	rjmp	.-58     	; 0x540a <fonction7>

00005444 <fonction6>:
    5444:	73 95       	inc	r23
    5446:	b3 cf       	rjmp	.-154    	; 0x53ae <fonction3>

00005448 <fonction2>:
    5448:	08 95       	ret

0000544a <get_bit_input_knns>:
    544a:	04 2f       	mov	r16, r20
    544c:	e4 2f       	mov	r30, r20
    544e:	ff 27       	eor	r31, r31
    5450:	e2 51       	subi	r30, 0x12	; 18
    5452:	f2 4f       	sbci	r31, 0xF2	; 242
    5454:	14 91       	lpm	r17, Z+
    5456:	e1 2f       	mov	r30, r17
    5458:	e6 95       	lsr	r30
    545a:	e6 95       	lsr	r30
    545c:	e6 95       	lsr	r30
    545e:	ff 27       	eor	r31, r31
    5460:	e9 50       	subi	r30, 0x09	; 9
    5462:	fb 4f       	sbci	r31, 0xFB	; 251
    5464:	80 81       	ld	r24, Z
    5466:	17 70       	andi	r17, 0x07	; 7
    5468:	90 e8       	ldi	r25, 0x80	; 128
    546a:	01 c0       	rjmp	.+2      	; 0x546e <input_knns0>

0000546c <input_knns1>:
    546c:	96 95       	lsr	r25

0000546e <input_knns0>:
    546e:	1a 95       	dec	r17
    5470:	ea f7       	brpl	.-6      	; 0x546c <input_knns1>
    5472:	89 23       	and	r24, r25
    5474:	11 f0       	breq	.+4      	; 0x547a <input_knns2>
    5476:	11 e0       	ldi	r17, 0x01	; 1
    5478:	01 c0       	rjmp	.+2      	; 0x547c <input_knns3>

0000547a <input_knns2>:
    547a:	11 27       	eor	r17, r17

0000547c <input_knns3>:
    547c:	e0 91 f5 04 	lds	r30, 0x04F5
    5480:	f0 91 f6 04 	lds	r31, 0x04F6
    5484:	91 91       	ld	r25, Z+
    5486:	07 70       	andi	r16, 0x07	; 7
    5488:	07 30       	cpi	r16, 0x07	; 7
    548a:	21 f4       	brne	.+8      	; 0x5494 <input_knns9>
    548c:	f0 93 f6 04 	sts	0x04F6, r31
    5490:	e0 93 f5 04 	sts	0x04F5, r30

00005494 <input_knns9>:
    5494:	80 e8       	ldi	r24, 0x80	; 128
    5496:	01 c0       	rjmp	.+2      	; 0x549a <input_knns4>

00005498 <input_knns5>:
    5498:	86 95       	lsr	r24

0000549a <input_knns4>:
    549a:	0a 95       	dec	r16
    549c:	ea f7       	brpl	.-6      	; 0x5498 <input_knns5>
    549e:	89 23       	and	r24, r25
    54a0:	11 f0       	breq	.+4      	; 0x54a6 <input_knns8>
    54a2:	91 e0       	ldi	r25, 0x01	; 1
    54a4:	19 27       	eor	r17, r25

000054a6 <input_knns8>:
    54a6:	08 95       	ret

000054a8 <DesKeyT9>:
    54a8:	c3 2f       	mov	r28, r19
    54aa:	cc 0f       	add	r28, r28
    54ac:	c3 0f       	add	r28, r19
    54ae:	cc 0f       	add	r28, r28
    54b0:	dd 27       	eor	r29, r29
    54b2:	cb 56       	subi	r28, 0x6B	; 107
    54b4:	db 4f       	sbci	r29, 0xFB	; 251
    54b6:	e6 e7       	ldi	r30, 0x76	; 118
    54b8:	fe e0       	ldi	r31, 0x0E	; 14
    54ba:	22 27       	eor	r18, r18

000054bc <DesKeyT9_1>:
    54bc:	00 e8       	ldi	r16, 0x80	; 128

000054be <DesKeyT9_4>:
    54be:	a5 91       	lpm	r26, Z+
    54c0:	9a 2f       	mov	r25, r26
    54c2:	a6 95       	lsr	r26
    54c4:	a6 95       	lsr	r26
    54c6:	a6 95       	lsr	r26
    54c8:	bb 27       	eor	r27, r27
    54ca:	a8 5f       	subi	r26, 0xF8	; 248
    54cc:	ba 4f       	sbci	r27, 0xFA	; 250
    54ce:	8c 91       	ld	r24, X
    54d0:	97 70       	andi	r25, 0x07	; 7
    54d2:	93 95       	inc	r25
    54d4:	08 94       	sec
    54d6:	11 27       	eor	r17, r17

000054d8 <DesKeyT9_4B>:
    54d8:	17 95       	ror	r17
    54da:	9a 95       	dec	r25
    54dc:	e9 f7       	brne	.-6      	; 0x54d8 <DesKeyT9_4B>
    54de:	81 23       	and	r24, r17
    54e0:	19 f0       	breq	.+6      	; 0x54e8 <DesKeyT9_9>
    54e2:	88 81       	ld	r24, Y
    54e4:	80 2b       	or	r24, r16
    54e6:	88 83       	st	Y, r24

000054e8 <DesKeyT9_9>:
    54e8:	06 95       	lsr	r16
    54ea:	48 f7       	brcc	.-46     	; 0x54be <DesKeyT9_4>

000054ec <DesKeyT9_5>:
    54ec:	19 91       	ld	r17, Y+
    54ee:	23 95       	inc	r18
    54f0:	26 30       	cpi	r18, 0x06	; 6
    54f2:	20 f3       	brcs	.-56     	; 0x54bc <DesKeyT9_1>

000054f4 <DesKeyT9_2>:
    54f4:	08 95       	ret

000054f6 <two_drol_cds>:
    54f6:	00 d0       	rcall	.+0      	; 0x54f8 <drol_cds>

000054f8 <drol_cds>:
    54f8:	ef e0       	ldi	r30, 0x0F	; 15
    54fa:	f5 e0       	ldi	r31, 0x05	; 5
    54fc:	17 e0       	ldi	r17, 0x07	; 7
    54fe:	00 91 0b 05 	lds	r16, 0x050B
    5502:	02 95       	swap	r16
    5504:	00 1f       	adc	r16, r16

00005506 <drol_cds1>:
    5506:	02 91       	ld	r16, -Z
    5508:	00 1f       	adc	r16, r16
    550a:	00 83       	st	Z, r16
    550c:	1a 95       	dec	r17
    550e:	d9 f7       	brne	.-10     	; 0x5506 <drol_cds1>
    5510:	80 91 0b 05 	lds	r24, 0x050B
    5514:	08 95       	ret

00005516 <DesKeyScheduleCalculation>:
    5516:	0f 93       	push	r16
    5518:	1f 93       	push	r17
    551a:	cf 93       	push	r28
    551c:	df 93       	push	r29
    551e:	67 e0       	ldi	r22, 0x07	; 7
    5520:	e8 e0       	ldi	r30, 0x08	; 8
    5522:	f5 e0       	ldi	r31, 0x05	; 5
    5524:	d2 de       	rcall	.-604    	; 0x52ca <mem_clr>
    5526:	40 e8       	ldi	r20, 0x80	; 128
    5528:	00 27       	eor	r16, r16
    552a:	ee e3       	ldi	r30, 0x3E	; 62
    552c:	fe e0       	ldi	r31, 0x0E	; 14

0000552e <KeySchedule2>:
    552e:	85 91       	lpm	r24, Z+
    5530:	98 2f       	mov	r25, r24
    5532:	86 95       	lsr	r24
    5534:	86 95       	lsr	r24
    5536:	86 95       	lsr	r24
    5538:	af ef       	ldi	r26, 0xFF	; 255
    553a:	b4 e0       	ldi	r27, 0x04	; 4
    553c:	a8 0f       	add	r26, r24
    553e:	b1 1d       	adc	r27, r1
    5540:	10 e8       	ldi	r17, 0x80	; 128

00005542 <KeySchedule4>:
    5542:	97 70       	andi	r25, 0x07	; 7
    5544:	19 f0       	breq	.+6      	; 0x554c <KeySchedule3>

00005546 <KeySchedule41>:
    5546:	16 95       	lsr	r17
    5548:	9a 95       	dec	r25
    554a:	e9 f7       	brne	.-6      	; 0x5546 <KeySchedule41>

0000554c <KeySchedule3>:
    554c:	9c 91       	ld	r25, X
    554e:	91 23       	and	r25, r17
    5550:	59 f0       	breq	.+22     	; 0x5568 <KeySchedule5>
    5552:	80 2f       	mov	r24, r16
    5554:	86 95       	lsr	r24
    5556:	86 95       	lsr	r24
    5558:	86 95       	lsr	r24
    555a:	a8 e0       	ldi	r26, 0x08	; 8
    555c:	b5 e0       	ldi	r27, 0x05	; 5
    555e:	a8 0f       	add	r26, r24
    5560:	b1 1d       	adc	r27, r1
    5562:	2c 91       	ld	r18, X
    5564:	24 2b       	or	r18, r20
    5566:	2c 93       	st	X, r18

00005568 <KeySchedule5>:
    5568:	46 95       	lsr	r20
    556a:	08 f4       	brcc	.+2      	; 0x556e <KeySchedule6>
    556c:	47 95       	ror	r20

0000556e <KeySchedule6>:
    556e:	03 95       	inc	r16
    5570:	08 33       	cpi	r16, 0x38	; 56
    5572:	e8 f2       	brcs	.-70     	; 0x552e <KeySchedule2>

00005574 <KeySchedule1>:
    5574:	60 e6       	ldi	r22, 0x60	; 96
    5576:	e5 e9       	ldi	r30, 0x95	; 149
    5578:	f4 e0       	ldi	r31, 0x04	; 4
    557a:	a7 de       	rcall	.-690    	; 0x52ca <mem_clr>
    557c:	31 2d       	mov	r19, r1

0000557e <DesKeySch0>:
    557e:	32 30       	cpi	r19, 0x02	; 2
    5580:	28 f0       	brcs	.+10     	; 0x558c <DesKeySchA>
    5582:	38 30       	cpi	r19, 0x08	; 8
    5584:	19 f0       	breq	.+6      	; 0x558c <DesKeySchA>
    5586:	3f 30       	cpi	r19, 0x0F	; 15
    5588:	09 f0       	breq	.+2      	; 0x558c <DesKeySchA>
    558a:	0a c0       	rjmp	.+20     	; 0x55a0 <DesKeySch1>

0000558c <DesKeySchA>:
    558c:	80 91 08 05 	lds	r24, 0x0508
    5590:	88 23       	and	r24, r24
    5592:	1c f4       	brge	.+6      	; 0x559a <DesKeySch2>
    5594:	b1 df       	rcall	.-158    	; 0x54f8 <drol_cds>
    5596:	80 61       	ori	r24, 0x10	; 16
    5598:	1c c0       	rjmp	.+56     	; 0x55d2 <DesKeySch3>

0000559a <DesKeySch2>:
    559a:	ae df       	rcall	.-164    	; 0x54f8 <drol_cds>
    559c:	8f 7e       	andi	r24, 0xEF	; 239
    559e:	19 c0       	rjmp	.+50     	; 0x55d2 <DesKeySch3>

000055a0 <DesKeySch1>:
    55a0:	80 91 08 05 	lds	r24, 0x0508
    55a4:	88 23       	and	r24, r24
    55a6:	5c f4       	brge	.+22     	; 0x55be <DesKeySch4>
    55a8:	80 91 08 05 	lds	r24, 0x0508
    55ac:	80 74       	andi	r24, 0x40	; 64
    55ae:	19 f0       	breq	.+6      	; 0x55b6 <DesKeySch5>
    55b0:	a2 df       	rcall	.-188    	; 0x54f6 <two_drol_cds>
    55b2:	80 63       	ori	r24, 0x30	; 48
    55b4:	0e c0       	rjmp	.+28     	; 0x55d2 <DesKeySch3>

000055b6 <DesKeySch5>:
    55b6:	9f df       	rcall	.-194    	; 0x54f6 <two_drol_cds>
    55b8:	80 62       	ori	r24, 0x20	; 32
    55ba:	8f 7e       	andi	r24, 0xEF	; 239
    55bc:	0a c0       	rjmp	.+20     	; 0x55d2 <DesKeySch3>

000055be <DesKeySch4>:
    55be:	80 91 08 05 	lds	r24, 0x0508
    55c2:	80 74       	andi	r24, 0x40	; 64
    55c4:	21 f0       	breq	.+8      	; 0x55ce <DesKeySch6>
    55c6:	97 df       	rcall	.-210    	; 0x54f6 <two_drol_cds>
    55c8:	8f 7d       	andi	r24, 0xDF	; 223
    55ca:	80 61       	ori	r24, 0x10	; 16
    55cc:	02 c0       	rjmp	.+4      	; 0x55d2 <DesKeySch3>

000055ce <DesKeySch6>:
    55ce:	93 df       	rcall	.-218    	; 0x54f6 <two_drol_cds>
    55d0:	8f 7c       	andi	r24, 0xCF	; 207

000055d2 <DesKeySch3>:
    55d2:	80 93 0b 05 	sts	0x050B, r24
    55d6:	68 df       	rcall	.-304    	; 0x54a8 <DesKeyT9>
    55d8:	33 95       	inc	r19
    55da:	30 31       	cpi	r19, 0x10	; 16
    55dc:	80 f2       	brcs	.-96     	; 0x557e <DesKeySch0>

000055de <DesKeySchb>:
    55de:	df 91       	pop	r29
    55e0:	cf 91       	pop	r28
    55e2:	1f 91       	pop	r17
    55e4:	0f 91       	pop	r16
    55e6:	08 95       	ret

000055e8 <Des_Dec>:
    55e8:	cf 93       	push	r28
    55ea:	df 93       	push	r29
    55ec:	8e e6       	ldi	r24, 0x6E	; 110
    55ee:	9d e0       	ldi	r25, 0x0D	; 13
    55f0:	9c de       	rcall	.-712    	; 0x532a <des_permutation>
    55f2:	06 d0       	rcall	.+12     	; 0x5600 <des_dechiffrement>
    55f4:	8e ea       	ldi	r24, 0xAE	; 174
    55f6:	9d e0       	ldi	r25, 0x0D	; 13
    55f8:	98 de       	rcall	.-720    	; 0x532a <des_permutation>
    55fa:	df 91       	pop	r29
    55fc:	cf 91       	pop	r28
    55fe:	08 95       	ret

00005600 <des_dechiffrement>:
    5600:	2a e5       	ldi	r18, 0x5A	; 90

00005602 <dechiff2>:
    5602:	2f 93       	push	r18
    5604:	77 de       	rcall	.-786    	; 0x52f4 <des_frement>
    5606:	2f 91       	pop	r18
    5608:	26 50       	subi	r18, 0x06	; 6
    560a:	d8 f7       	brcc	.-10     	; 0x5602 <dechiff2>

0000560c <dechiff1>:
    560c:	67 ce       	rjmp	.-818    	; 0x52dc <des_Input_mem_ex>

0000560e <Des_Enc>:
    560e:	cf 93       	push	r28
    5610:	df 93       	push	r29
    5612:	8e e6       	ldi	r24, 0x6E	; 110
    5614:	9d e0       	ldi	r25, 0x0D	; 13
    5616:	89 de       	rcall	.-750    	; 0x532a <des_permutation>
    5618:	06 d0       	rcall	.+12     	; 0x5626 <des_chiffrement>
    561a:	8e ea       	ldi	r24, 0xAE	; 174
    561c:	9d e0       	ldi	r25, 0x0D	; 13
    561e:	85 de       	rcall	.-758    	; 0x532a <des_permutation>
    5620:	df 91       	pop	r29
    5622:	cf 91       	pop	r28
    5624:	08 95       	ret

00005626 <des_chiffrement>:
    5626:	22 27       	eor	r18, r18

00005628 <chiffre4>:
    5628:	2f 93       	push	r18
    562a:	64 de       	rcall	.-824    	; 0x52f4 <des_frement>
    562c:	2f 91       	pop	r18
    562e:	2a 5f       	subi	r18, 0xFA	; 250
    5630:	20 36       	cpi	r18, 0x60	; 96
    5632:	d0 f3       	brcs	.-12     	; 0x5628 <chiffre4>
    5634:	53 ce       	rjmp	.-858    	; 0x52dc <des_Input_mem_ex>

00005636 <AES_XORBytes>:
    5636:	fc 01       	movw	r30, r24
    5638:	db 01       	movw	r26, r22

0000563a <AES_XORBytes_2>:
    563a:	9d 91       	ld	r25, X+
    563c:	80 81       	ld	r24, Z
    563e:	89 27       	eor	r24, r25
    5640:	81 93       	st	Z+, r24
    5642:	41 50       	subi	r20, 0x01	; 1
    5644:	d1 f7       	brne	.-12     	; 0x563a <AES_XORBytes_2>
    5646:	08 95       	ret

00005648 <AES_CalcSBoxInv>:
    5648:	22 27       	eor	r18, r18
    564a:	fc 01       	movw	r30, r24

0000564c <AES_CalcSBoxInv2>:
    564c:	db 01       	movw	r26, r22
    564e:	31 91       	ld	r19, Z+
    5650:	a3 0f       	add	r26, r19
    5652:	b1 1d       	adc	r27, r1
    5654:	2c 93       	st	X, r18
    5656:	2f 5f       	subi	r18, 0xFF	; 255
    5658:	c8 f3       	brcs	.-14     	; 0x564c <AES_CalcSBoxInv2>
    565a:	08 95       	ret

0000565c <AES_CalcSBox>:
    565c:	ff 92       	push	r15
    565e:	0f 93       	push	r16
    5660:	1f 93       	push	r17
    5662:	da 01       	movw	r26, r20
    5664:	ff 24       	eor	r15, r15
    5666:	11 96       	adiw	r26, 0x01	; 1
    5668:	08 c0       	rjmp	.+16     	; 0x567a <AES_CalcSBox1>

0000566a <AES_CalcSBox6>:
    566a:	5d 91       	ld	r21, X+
    566c:	4f ef       	ldi	r20, 0xFF	; 255
    566e:	45 1b       	sub	r20, r21
    5670:	fb 01       	movw	r30, r22
    5672:	e4 0f       	add	r30, r20
    5674:	f1 1d       	adc	r31, r1
    5676:	00 81       	ld	r16, Z
    5678:	01 c0       	rjmp	.+2      	; 0x567c <AES_CalcSBox2>

0000567a <AES_CalcSBox1>:
    567a:	00 27       	eor	r16, r16

0000567c <AES_CalcSBox2>:
    567c:	10 2f       	mov	r17, r16
    567e:	53 e6       	ldi	r21, 0x63	; 99
    5680:	15 27       	eor	r17, r21
    5682:	44 e0       	ldi	r20, 0x04	; 4

00005684 <AES_CalcSBox4>:
    5684:	00 0f       	add	r16, r16
    5686:	01 1d       	adc	r16, r1
    5688:	10 27       	eor	r17, r16
    568a:	41 50       	subi	r20, 0x01	; 1
    568c:	d9 f7       	brne	.-10     	; 0x5684 <AES_CalcSBox4>
    568e:	fc 01       	movw	r30, r24
    5690:	ef 0d       	add	r30, r15
    5692:	f1 1d       	adc	r31, r1
    5694:	10 83       	st	Z, r17
    5696:	f3 94       	inc	r15
    5698:	41 f7       	brne	.-48     	; 0x566a <AES_CalcSBox6>
    569a:	1f 91       	pop	r17
    569c:	0f 91       	pop	r16
    569e:	ff 90       	pop	r15
    56a0:	08 95       	ret

000056a2 <AES_SF_SubBytes>:
    56a2:	dc 01       	movw	r26, r24
    56a4:	40 91 11 05 	lds	r20, 0x0511
    56a8:	50 91 12 05 	lds	r21, 0x0512

000056ac <AES_SF_SubBytes1>:
    56ac:	8c 91       	ld	r24, X
    56ae:	fa 01       	movw	r30, r20
    56b0:	e8 0f       	add	r30, r24
    56b2:	f1 1d       	adc	r31, r1
    56b4:	80 81       	ld	r24, Z
    56b6:	8d 93       	st	X+, r24
    56b8:	61 50       	subi	r22, 0x01	; 1
    56ba:	c1 f7       	brne	.-16     	; 0x56ac <AES_SF_SubBytes1>
    56bc:	08 95       	ret

000056be <AES_SR_SubBytes>:
    56be:	dc 01       	movw	r26, r24
    56c0:	46 ea       	ldi	r20, 0xA6	; 166
    56c2:	5f e0       	ldi	r21, 0x0F	; 15

000056c4 <AES_SR_SubBytes1>:
    56c4:	8c 91       	ld	r24, X
    56c6:	fa 01       	movw	r30, r20
    56c8:	e8 0f       	add	r30, r24
    56ca:	f1 1d       	adc	r31, r1
    56cc:	84 91       	lpm	r24, Z+
    56ce:	8d 93       	st	X+, r24
    56d0:	61 50       	subi	r22, 0x01	; 1
    56d2:	c1 f7       	brne	.-16     	; 0x56c4 <AES_SR_SubBytes1>
    56d4:	08 95       	ret

000056d6 <AES_SF_InvSubBytesAndXOR>:
    56d6:	cf 93       	push	r28
    56d8:	df 93       	push	r29
    56da:	db 01       	movw	r26, r22
    56dc:	ec 01       	movw	r28, r24
    56de:	20 91 0f 05 	lds	r18, 0x050F
    56e2:	30 91 10 05 	lds	r19, 0x0510

000056e6 <InvSubBytesAndXOR1>:
    56e6:	88 81       	ld	r24, Y
    56e8:	f9 01       	movw	r30, r18
    56ea:	e8 0f       	add	r30, r24
    56ec:	f1 1d       	adc	r31, r1
    56ee:	80 81       	ld	r24, Z
    56f0:	9d 91       	ld	r25, X+
    56f2:	89 27       	eor	r24, r25
    56f4:	89 93       	st	Y+, r24
    56f6:	41 50       	subi	r20, 0x01	; 1
    56f8:	b1 f7       	brne	.-20     	; 0x56e6 <InvSubBytesAndXOR1>
    56fa:	df 91       	pop	r29
    56fc:	cf 91       	pop	r28
    56fe:	08 95       	ret

00005700 <AES_SR_InvSubBytesAndXOR>:
    5700:	cf 93       	push	r28
    5702:	df 93       	push	r29
    5704:	db 01       	movw	r26, r22
    5706:	ec 01       	movw	r28, r24
    5708:	26 ea       	ldi	r18, 0xA6	; 166
    570a:	30 e1       	ldi	r19, 0x10	; 16

0000570c <InvSubBytesAndXOR1>:
    570c:	88 81       	ld	r24, Y
    570e:	f9 01       	movw	r30, r18
    5710:	e8 0f       	add	r30, r24
    5712:	f1 1d       	adc	r31, r1
    5714:	84 91       	lpm	r24, Z+
    5716:	9d 91       	ld	r25, X+
    5718:	89 27       	eor	r24, r25
    571a:	89 93       	st	Y+, r24
    571c:	41 50       	subi	r20, 0x01	; 1
    571e:	b1 f7       	brne	.-20     	; 0x570c <InvSubBytesAndXOR1>
    5720:	df 91       	pop	r29
    5722:	cf 91       	pop	r28
    5724:	08 95       	ret

00005726 <AES_MixColumn>:
    5726:	4d 91       	ld	r20, X+
    5728:	5d 91       	ld	r21, X+
    572a:	6d 91       	ld	r22, X+
    572c:	7d 91       	ld	r23, X+
    572e:	05 2f       	mov	r16, r21
    5730:	06 27       	eor	r16, r22
    5732:	07 27       	eor	r16, r23
    5734:	14 2f       	mov	r17, r20
    5736:	16 27       	eor	r17, r22
    5738:	17 27       	eor	r17, r23
    573a:	24 2f       	mov	r18, r20
    573c:	25 27       	eor	r18, r21
    573e:	27 27       	eor	r18, r23
    5740:	34 2f       	mov	r19, r20
    5742:	35 27       	eor	r19, r21
    5744:	36 27       	eor	r19, r22
    5746:	9b e1       	ldi	r25, 0x1B	; 27
    5748:	44 0f       	add	r20, r20
    574a:	08 f4       	brcc	.+2      	; 0x574e <MixColumn0>
    574c:	49 27       	eor	r20, r25

0000574e <MixColumn0>:
    574e:	55 0f       	add	r21, r21
    5750:	08 f4       	brcc	.+2      	; 0x5754 <MixColumn1>
    5752:	59 27       	eor	r21, r25

00005754 <MixColumn1>:
    5754:	66 0f       	add	r22, r22
    5756:	08 f4       	brcc	.+2      	; 0x575a <MixColumn2>
    5758:	69 27       	eor	r22, r25

0000575a <MixColumn2>:
    575a:	77 0f       	add	r23, r23
    575c:	08 f4       	brcc	.+2      	; 0x5760 <MixColumn3>
    575e:	79 27       	eor	r23, r25

00005760 <MixColumn3>:
    5760:	14 97       	sbiw	r26, 0x04	; 4
    5762:	80 2f       	mov	r24, r16
    5764:	84 27       	eor	r24, r20
    5766:	85 27       	eor	r24, r21
    5768:	8d 93       	st	X+, r24
    576a:	81 2f       	mov	r24, r17
    576c:	85 27       	eor	r24, r21
    576e:	86 27       	eor	r24, r22
    5770:	8d 93       	st	X+, r24
    5772:	82 2f       	mov	r24, r18
    5774:	86 27       	eor	r24, r22
    5776:	87 27       	eor	r24, r23
    5778:	8d 93       	st	X+, r24
    577a:	83 2f       	mov	r24, r19
    577c:	84 27       	eor	r24, r20
    577e:	87 27       	eor	r24, r23
    5780:	8d 93       	st	X+, r24
    5782:	08 95       	ret

00005784 <AES_MixColumns>:
    5784:	dc 01       	movw	r26, r24
    5786:	0e 94 93 2b 	call	0x5726	; 0x5726 <AES_MixColumn>
    578a:	0e 94 93 2b 	call	0x5726	; 0x5726 <AES_MixColumn>
    578e:	0e 94 93 2b 	call	0x5726	; 0x5726 <AES_MixColumn>
    5792:	0e 94 93 2b 	call	0x5726	; 0x5726 <AES_MixColumn>
    5796:	08 95       	ret

00005798 <AES_ShiftRows>:
    5798:	fc 01       	movw	r30, r24
    579a:	41 91       	ld	r20, Z+
    579c:	df 01       	movw	r26, r30
    579e:	50 81       	ld	r21, Z
    57a0:	34 96       	adiw	r30, 0x04	; 4
    57a2:	40 81       	ld	r20, Z
    57a4:	4c 93       	st	X, r20
    57a6:	34 96       	adiw	r30, 0x04	; 4
    57a8:	14 96       	adiw	r26, 0x04	; 4
    57aa:	40 81       	ld	r20, Z
    57ac:	4c 93       	st	X, r20
    57ae:	34 96       	adiw	r30, 0x04	; 4
    57b0:	14 96       	adiw	r26, 0x04	; 4
    57b2:	40 81       	ld	r20, Z
    57b4:	4c 93       	st	X, r20
    57b6:	14 96       	adiw	r26, 0x04	; 4
    57b8:	5c 93       	st	X, r21
    57ba:	fc 01       	movw	r30, r24
    57bc:	32 96       	adiw	r30, 0x02	; 2
    57be:	50 81       	ld	r21, Z
    57c0:	df 01       	movw	r26, r30
    57c2:	38 96       	adiw	r30, 0x08	; 8
    57c4:	40 81       	ld	r20, Z
    57c6:	4c 93       	st	X, r20
    57c8:	50 83       	st	Z, r21
    57ca:	fc 01       	movw	r30, r24
    57cc:	36 96       	adiw	r30, 0x06	; 6
    57ce:	50 81       	ld	r21, Z
    57d0:	dc 01       	movw	r26, r24
    57d2:	1e 96       	adiw	r26, 0x0e	; 14
    57d4:	4c 91       	ld	r20, X
    57d6:	40 83       	st	Z, r20
    57d8:	5c 93       	st	X, r21
    57da:	fc 01       	movw	r30, r24
    57dc:	3f 96       	adiw	r30, 0x0f	; 15
    57de:	50 81       	ld	r21, Z
    57e0:	dc 01       	movw	r26, r24
    57e2:	1b 96       	adiw	r26, 0x0b	; 11
    57e4:	4c 91       	ld	r20, X
    57e6:	40 83       	st	Z, r20
    57e8:	34 97       	sbiw	r30, 0x04	; 4
    57ea:	14 97       	sbiw	r26, 0x04	; 4
    57ec:	4c 91       	ld	r20, X
    57ee:	40 83       	st	Z, r20
    57f0:	34 97       	sbiw	r30, 0x04	; 4
    57f2:	14 97       	sbiw	r26, 0x04	; 4
    57f4:	4c 91       	ld	r20, X
    57f6:	40 83       	st	Z, r20
    57f8:	5c 93       	st	X, r21
    57fa:	08 95       	ret

000057fc <AES_InvMixColumn_Regs>:
    57fc:	00 0f       	add	r16, r16
    57fe:	08 f4       	brcc	.+2      	; 0x5802 <AES_InvMixColumn1>
    5800:	0e 25       	eor	r16, r14

00005802 <AES_InvMixColumn1>:
    5802:	11 0f       	add	r17, r17
    5804:	08 f4       	brcc	.+2      	; 0x5808 <AES_InvMixColumn2>
    5806:	1e 25       	eor	r17, r14

00005808 <AES_InvMixColumn2>:
    5808:	22 0f       	add	r18, r18
    580a:	08 f4       	brcc	.+2      	; 0x580e <AES_InvMixColumn3>
    580c:	2e 25       	eor	r18, r14

0000580e <AES_InvMixColumn3>:
    580e:	33 0f       	add	r19, r19
    5810:	08 f4       	brcc	.+2      	; 0x5814 <AES_InvMixColumn4>
    5812:	3e 25       	eor	r19, r14

00005814 <AES_InvMixColumn4>:
    5814:	08 95       	ret

00005816 <AES_InvMixColumn>:
    5816:	fd 01       	movw	r30, r26
    5818:	0d 91       	ld	r16, X+
    581a:	1d 91       	ld	r17, X+
    581c:	2d 91       	ld	r18, X+
    581e:	3d 91       	ld	r19, X+
    5820:	41 2f       	mov	r20, r17
    5822:	42 27       	eor	r20, r18
    5824:	43 27       	eor	r20, r19
    5826:	50 2f       	mov	r21, r16
    5828:	52 27       	eor	r21, r18
    582a:	53 27       	eor	r21, r19
    582c:	60 2f       	mov	r22, r16
    582e:	61 27       	eor	r22, r17
    5830:	63 27       	eor	r22, r19
    5832:	70 2f       	mov	r23, r16
    5834:	71 27       	eor	r23, r17
    5836:	72 27       	eor	r23, r18
    5838:	e1 df       	rcall	.-62     	; 0x57fc <AES_InvMixColumn_Regs>
    583a:	40 27       	eor	r20, r16
    583c:	41 27       	eor	r20, r17
    583e:	51 27       	eor	r21, r17
    5840:	52 27       	eor	r21, r18
    5842:	62 27       	eor	r22, r18
    5844:	63 27       	eor	r22, r19
    5846:	70 27       	eor	r23, r16
    5848:	73 27       	eor	r23, r19
    584a:	d8 df       	rcall	.-80     	; 0x57fc <AES_InvMixColumn_Regs>
    584c:	40 27       	eor	r20, r16
    584e:	42 27       	eor	r20, r18
    5850:	51 27       	eor	r21, r17
    5852:	53 27       	eor	r21, r19
    5854:	60 27       	eor	r22, r16
    5856:	62 27       	eor	r22, r18
    5858:	71 27       	eor	r23, r17
    585a:	73 27       	eor	r23, r19
    585c:	cf df       	rcall	.-98     	; 0x57fc <AES_InvMixColumn_Regs>
    585e:	01 27       	eor	r16, r17
    5860:	02 27       	eor	r16, r18
    5862:	03 27       	eor	r16, r19
    5864:	40 27       	eor	r20, r16
    5866:	50 27       	eor	r21, r16
    5868:	60 27       	eor	r22, r16
    586a:	70 27       	eor	r23, r16
    586c:	df 01       	movw	r26, r30
    586e:	4d 93       	st	X+, r20
    5870:	5d 93       	st	X+, r21
    5872:	6d 93       	st	X+, r22
    5874:	7d 93       	st	X+, r23
    5876:	08 95       	ret

00005878 <AES_InvMixColumns>:
    5878:	ef 92       	push	r14
    587a:	4b e1       	ldi	r20, 0x1B	; 27
    587c:	e4 2e       	mov	r14, r20
    587e:	dc 01       	movw	r26, r24
    5880:	ca df       	rcall	.-108    	; 0x5816 <AES_InvMixColumn>
    5882:	c9 df       	rcall	.-110    	; 0x5816 <AES_InvMixColumn>
    5884:	c8 df       	rcall	.-112    	; 0x5816 <AES_InvMixColumn>
    5886:	c7 df       	rcall	.-114    	; 0x5816 <AES_InvMixColumn>
    5888:	ef 90       	pop	r14
    588a:	08 95       	ret

0000588c <AES_InvShiftRows>:
    588c:	dc 01       	movw	r26, r24
    588e:	fc 01       	movw	r30, r24
    5890:	3d 96       	adiw	r30, 0x0d	; 13
    5892:	f0 80       	ld	r15, Z
    5894:	19 96       	adiw	r26, 0x09	; 9
    5896:	0c 91       	ld	r16, X
    5898:	00 83       	st	Z, r16
    589a:	38 97       	sbiw	r30, 0x08	; 8
    589c:	00 81       	ld	r16, Z
    589e:	0c 93       	st	X, r16
    58a0:	18 97       	sbiw	r26, 0x08	; 8
    58a2:	0c 91       	ld	r16, X
    58a4:	00 83       	st	Z, r16
    58a6:	fd 92       	st	X+, r15
    58a8:	fc 90       	ld	r15, X
    58aa:	35 96       	adiw	r30, 0x05	; 5
    58ac:	00 81       	ld	r16, Z
    58ae:	0c 93       	st	X, r16
    58b0:	f0 82       	st	Z, r15
    58b2:	34 97       	sbiw	r30, 0x04	; 4
    58b4:	f0 80       	ld	r15, Z
    58b6:	1c 96       	adiw	r26, 0x0c	; 12
    58b8:	0c 91       	ld	r16, X
    58ba:	01 93       	st	Z+, r16
    58bc:	fc 92       	st	X, r15
    58be:	1b 97       	sbiw	r26, 0x0b	; 11
    58c0:	fc 90       	ld	r15, X
    58c2:	00 81       	ld	r16, Z
    58c4:	0c 93       	st	X, r16
    58c6:	18 96       	adiw	r26, 0x08	; 8
    58c8:	0c 91       	ld	r16, X
    58ca:	00 83       	st	Z, r16
    58cc:	38 96       	adiw	r30, 0x08	; 8
    58ce:	00 81       	ld	r16, Z
    58d0:	0c 93       	st	X, r16
    58d2:	f0 82       	st	Z, r15
    58d4:	08 95       	ret

000058d6 <memcmp_P>:
    58d6:	fb 01       	movw	r30, r22
    58d8:	dc 01       	movw	r26, r24
    58da:	04 c0       	rjmp	.+8      	; 0x58e4 <memcmp_P+0xe>
    58dc:	8d 91       	ld	r24, X+
    58de:	05 90       	lpm	r0, Z+
    58e0:	80 19       	sub	r24, r0
    58e2:	21 f4       	brne	.+8      	; 0x58ec <memcmp_P+0x16>
    58e4:	41 50       	subi	r20, 0x01	; 1
    58e6:	50 40       	sbci	r21, 0x00	; 0
    58e8:	c8 f7       	brcc	.-14     	; 0x58dc <memcmp_P+0x6>
    58ea:	88 1b       	sub	r24, r24
    58ec:	99 0b       	sbc	r25, r25
    58ee:	08 95       	ret

000058f0 <memcpy_P>:
    58f0:	fb 01       	movw	r30, r22
    58f2:	dc 01       	movw	r26, r24
    58f4:	02 c0       	rjmp	.+4      	; 0x58fa <memcpy_P+0xa>
    58f6:	05 90       	lpm	r0, Z+
    58f8:	0d 92       	st	X+, r0
    58fa:	41 50       	subi	r20, 0x01	; 1
    58fc:	50 40       	sbci	r21, 0x00	; 0
    58fe:	d8 f7       	brcc	.-10     	; 0x58f6 <memcpy_P+0x6>
    5900:	08 95       	ret

00005902 <memcpy>:
    5902:	fb 01       	movw	r30, r22
    5904:	dc 01       	movw	r26, r24
    5906:	02 c0       	rjmp	.+4      	; 0x590c <memcpy+0xa>
    5908:	01 90       	ld	r0, Z+
    590a:	0d 92       	st	X+, r0
    590c:	41 50       	subi	r20, 0x01	; 1
    590e:	50 40       	sbci	r21, 0x00	; 0
    5910:	d8 f7       	brcc	.-10     	; 0x5908 <memcpy+0x6>
    5912:	08 95       	ret

00005914 <memset>:
    5914:	dc 01       	movw	r26, r24
    5916:	01 c0       	rjmp	.+2      	; 0x591a <memset+0x6>
    5918:	6d 93       	st	X+, r22
    591a:	41 50       	subi	r20, 0x01	; 1
    591c:	50 40       	sbci	r21, 0x00	; 0
    591e:	e0 f7       	brcc	.-8      	; 0x5918 <memset+0x4>
    5920:	08 95       	ret

00005922 <_exit>:
    5922:	f8 94       	cli

00005924 <__stop_program>:
    5924:	ff cf       	rjmp	.-2      	; 0x5924 <__stop_program>
